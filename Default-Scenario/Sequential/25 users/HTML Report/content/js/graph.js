/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 560.0, "minX": 0.0, "maxY": 6120.0, "series": [{"data": [[0.0, 1487.0], [0.1, 1487.0], [0.2, 1499.0], [0.3, 1510.0], [0.4, 1520.0], [0.5, 1521.0], [0.6, 1523.0], [0.7, 1524.0], [0.8, 1531.0], [0.9, 1535.0], [1.0, 1541.0], [1.1, 1542.0], [1.2, 1544.0], [1.3, 1545.0], [1.4, 1546.0], [1.5, 1547.0], [1.6, 1547.0], [1.7, 1550.0], [1.8, 1550.0], [1.9, 1550.0], [2.0, 1551.0], [2.1, 1552.0], [2.2, 1555.0], [2.3, 1556.0], [2.4, 1559.0], [2.5, 1561.0], [2.6, 1562.0], [2.7, 1563.0], [2.8, 1567.0], [2.9, 1568.0], [3.0, 1568.0], [3.1, 1568.0], [3.2, 1569.0], [3.3, 1570.0], [3.4, 1570.0], [3.5, 1570.0], [3.6, 1571.0], [3.7, 1572.0], [3.8, 1572.0], [3.9, 1574.0], [4.0, 1576.0], [4.1, 1576.0], [4.2, 1576.0], [4.3, 1577.0], [4.4, 1578.0], [4.5, 1578.0], [4.6, 1578.0], [4.7, 1582.0], [4.8, 1582.0], [4.9, 1582.0], [5.0, 1582.0], [5.1, 1583.0], [5.2, 1584.0], [5.3, 1584.0], [5.4, 1585.0], [5.5, 1585.0], [5.6, 1585.0], [5.7, 1586.0], [5.8, 1587.0], [5.9, 1587.0], [6.0, 1589.0], [6.1, 1589.0], [6.2, 1589.0], [6.3, 1590.0], [6.4, 1590.0], [6.5, 1593.0], [6.6, 1593.0], [6.7, 1595.0], [6.8, 1597.0], [6.9, 1600.0], [7.0, 1600.0], [7.1, 1600.0], [7.2, 1600.0], [7.3, 1600.0], [7.4, 1600.0], [7.5, 1600.0], [7.6, 1601.0], [7.7, 1601.0], [7.8, 1601.0], [7.9, 1601.0], [8.0, 1603.0], [8.1, 1604.0], [8.2, 1604.0], [8.3, 1604.0], [8.4, 1605.0], [8.5, 1605.0], [8.6, 1605.0], [8.7, 1606.0], [8.8, 1606.0], [8.9, 1606.0], [9.0, 1608.0], [9.1, 1609.0], [9.2, 1610.0], [9.3, 1610.0], [9.4, 1610.0], [9.5, 1612.0], [9.6, 1612.0], [9.7, 1612.0], [9.8, 1612.0], [9.9, 1612.0], [10.0, 1613.0], [10.1, 1613.0], [10.2, 1613.0], [10.3, 1614.0], [10.4, 1614.0], [10.5, 1614.0], [10.6, 1615.0], [10.7, 1615.0], [10.8, 1615.0], [10.9, 1616.0], [11.0, 1616.0], [11.1, 1616.0], [11.2, 1616.0], [11.3, 1616.0], [11.4, 1618.0], [11.5, 1618.0], [11.6, 1618.0], [11.7, 1620.0], [11.8, 1620.0], [11.9, 1620.0], [12.0, 1620.0], [12.1, 1621.0], [12.2, 1621.0], [12.3, 1621.0], [12.4, 1622.0], [12.5, 1622.0], [12.6, 1623.0], [12.7, 1624.0], [12.8, 1624.0], [12.9, 1625.0], [13.0, 1625.0], [13.1, 1625.0], [13.2, 1625.0], [13.3, 1625.0], [13.4, 1625.0], [13.5, 1626.0], [13.6, 1627.0], [13.7, 1627.0], [13.8, 1627.0], [13.9, 1627.0], [14.0, 1628.0], [14.1, 1628.0], [14.2, 1628.0], [14.3, 1628.0], [14.4, 1629.0], [14.5, 1629.0], [14.6, 1629.0], [14.7, 1631.0], [14.8, 1631.0], [14.9, 1631.0], [15.0, 1633.0], [15.1, 1633.0], [15.2, 1633.0], [15.3, 1634.0], [15.4, 1634.0], [15.5, 1634.0], [15.6, 1636.0], [15.7, 1637.0], [15.8, 1637.0], [15.9, 1637.0], [16.0, 1638.0], [16.1, 1638.0], [16.2, 1638.0], [16.3, 1638.0], [16.4, 1638.0], [16.5, 1639.0], [16.6, 1639.0], [16.7, 1639.0], [16.8, 1639.0], [16.9, 1639.0], [17.0, 1639.0], [17.1, 1640.0], [17.2, 1641.0], [17.3, 1641.0], [17.4, 1642.0], [17.5, 1643.0], [17.6, 1643.0], [17.7, 1643.0], [17.8, 1644.0], [17.9, 1644.0], [18.0, 1646.0], [18.1, 1646.0], [18.2, 1646.0], [18.3, 1647.0], [18.4, 1647.0], [18.5, 1647.0], [18.6, 1647.0], [18.7, 1647.0], [18.8, 1648.0], [18.9, 1649.0], [19.0, 1649.0], [19.1, 1649.0], [19.2, 1650.0], [19.3, 1650.0], [19.4, 1650.0], [19.5, 1652.0], [19.6, 1652.0], [19.7, 1653.0], [19.8, 1653.0], [19.9, 1653.0], [20.0, 1654.0], [20.1, 1654.0], [20.2, 1654.0], [20.3, 1654.0], [20.4, 1654.0], [20.5, 1654.0], [20.6, 1655.0], [20.7, 1655.0], [20.8, 1656.0], [20.9, 1656.0], [21.0, 1656.0], [21.1, 1657.0], [21.2, 1657.0], [21.3, 1657.0], [21.4, 1658.0], [21.5, 1658.0], [21.6, 1659.0], [21.7, 1659.0], [21.8, 1659.0], [21.9, 1659.0], [22.0, 1660.0], [22.1, 1660.0], [22.2, 1660.0], [22.3, 1660.0], [22.4, 1660.0], [22.5, 1660.0], [22.6, 1661.0], [22.7, 1661.0], [22.8, 1661.0], [22.9, 1661.0], [23.0, 1661.0], [23.1, 1662.0], [23.2, 1663.0], [23.3, 1663.0], [23.4, 1663.0], [23.5, 1663.0], [23.6, 1664.0], [23.7, 1664.0], [23.8, 1664.0], [23.9, 1664.0], [24.0, 1664.0], [24.1, 1664.0], [24.2, 1665.0], [24.3, 1666.0], [24.4, 1666.0], [24.5, 1667.0], [24.6, 1667.0], [24.7, 1667.0], [24.8, 1667.0], [24.9, 1668.0], [25.0, 1668.0], [25.1, 1668.0], [25.2, 1668.0], [25.3, 1668.0], [25.4, 1668.0], [25.5, 1669.0], [25.6, 1669.0], [25.7, 1669.0], [25.8, 1669.0], [25.9, 1669.0], [26.0, 1669.0], [26.1, 1669.0], [26.2, 1670.0], [26.3, 1670.0], [26.4, 1670.0], [26.5, 1670.0], [26.6, 1671.0], [26.7, 1671.0], [26.8, 1672.0], [26.9, 1672.0], [27.0, 1673.0], [27.1, 1674.0], [27.2, 1674.0], [27.3, 1674.0], [27.4, 1676.0], [27.5, 1676.0], [27.6, 1677.0], [27.7, 1678.0], [27.8, 1678.0], [27.9, 1678.0], [28.0, 1678.0], [28.1, 1679.0], [28.2, 1679.0], [28.3, 1679.0], [28.4, 1679.0], [28.5, 1680.0], [28.6, 1680.0], [28.7, 1681.0], [28.8, 1681.0], [28.9, 1682.0], [29.0, 1682.0], [29.1, 1682.0], [29.2, 1683.0], [29.3, 1683.0], [29.4, 1683.0], [29.5, 1683.0], [29.6, 1683.0], [29.7, 1683.0], [29.8, 1685.0], [29.9, 1685.0], [30.0, 1685.0], [30.1, 1685.0], [30.2, 1685.0], [30.3, 1686.0], [30.4, 1686.0], [30.5, 1686.0], [30.6, 1686.0], [30.7, 1686.0], [30.8, 1687.0], [30.9, 1688.0], [31.0, 1688.0], [31.1, 1688.0], [31.2, 1688.0], [31.3, 1689.0], [31.4, 1689.0], [31.5, 1689.0], [31.6, 1689.0], [31.7, 1690.0], [31.8, 1690.0], [31.9, 1690.0], [32.0, 1690.0], [32.1, 1690.0], [32.2, 1691.0], [32.3, 1691.0], [32.4, 1692.0], [32.5, 1693.0], [32.6, 1693.0], [32.7, 1693.0], [32.8, 1694.0], [32.9, 1696.0], [33.0, 1696.0], [33.1, 1696.0], [33.2, 1696.0], [33.3, 1697.0], [33.4, 1697.0], [33.5, 1697.0], [33.6, 1697.0], [33.7, 1697.0], [33.8, 1698.0], [33.9, 1698.0], [34.0, 1698.0], [34.1, 1699.0], [34.2, 1699.0], [34.3, 1699.0], [34.4, 1700.0], [34.5, 1700.0], [34.6, 1700.0], [34.7, 1700.0], [34.8, 1701.0], [34.9, 1701.0], [35.0, 1701.0], [35.1, 1701.0], [35.2, 1701.0], [35.3, 1702.0], [35.4, 1702.0], [35.5, 1702.0], [35.6, 1703.0], [35.7, 1703.0], [35.8, 1703.0], [35.9, 1703.0], [36.0, 1704.0], [36.1, 1706.0], [36.2, 1706.0], [36.3, 1706.0], [36.4, 1706.0], [36.5, 1706.0], [36.6, 1706.0], [36.7, 1708.0], [36.8, 1708.0], [36.9, 1709.0], [37.0, 1709.0], [37.1, 1709.0], [37.2, 1709.0], [37.3, 1710.0], [37.4, 1710.0], [37.5, 1710.0], [37.6, 1710.0], [37.7, 1712.0], [37.8, 1713.0], [37.9, 1713.0], [38.0, 1713.0], [38.1, 1715.0], [38.2, 1716.0], [38.3, 1716.0], [38.4, 1716.0], [38.5, 1716.0], [38.6, 1717.0], [38.7, 1717.0], [38.8, 1717.0], [38.9, 1717.0], [39.0, 1717.0], [39.1, 1719.0], [39.2, 1719.0], [39.3, 1719.0], [39.4, 1719.0], [39.5, 1719.0], [39.6, 1720.0], [39.7, 1720.0], [39.8, 1720.0], [39.9, 1721.0], [40.0, 1721.0], [40.1, 1721.0], [40.2, 1721.0], [40.3, 1721.0], [40.4, 1722.0], [40.5, 1723.0], [40.6, 1723.0], [40.7, 1723.0], [40.8, 1723.0], [40.9, 1723.0], [41.0, 1724.0], [41.1, 1724.0], [41.2, 1724.0], [41.3, 1724.0], [41.4, 1725.0], [41.5, 1725.0], [41.6, 1725.0], [41.7, 1725.0], [41.8, 1726.0], [41.9, 1726.0], [42.0, 1726.0], [42.1, 1727.0], [42.2, 1727.0], [42.3, 1727.0], [42.4, 1727.0], [42.5, 1727.0], [42.6, 1727.0], [42.7, 1728.0], [42.8, 1728.0], [42.9, 1729.0], [43.0, 1729.0], [43.1, 1730.0], [43.2, 1730.0], [43.3, 1730.0], [43.4, 1731.0], [43.5, 1731.0], [43.6, 1731.0], [43.7, 1732.0], [43.8, 1732.0], [43.9, 1732.0], [44.0, 1733.0], [44.1, 1733.0], [44.2, 1733.0], [44.3, 1733.0], [44.4, 1733.0], [44.5, 1733.0], [44.6, 1733.0], [44.7, 1734.0], [44.8, 1734.0], [44.9, 1735.0], [45.0, 1735.0], [45.1, 1736.0], [45.2, 1736.0], [45.3, 1736.0], [45.4, 1736.0], [45.5, 1736.0], [45.6, 1736.0], [45.7, 1737.0], [45.8, 1737.0], [45.9, 1737.0], [46.0, 1737.0], [46.1, 1737.0], [46.2, 1738.0], [46.3, 1738.0], [46.4, 1738.0], [46.5, 1738.0], [46.6, 1739.0], [46.7, 1739.0], [46.8, 1739.0], [46.9, 1740.0], [47.0, 1741.0], [47.1, 1741.0], [47.2, 1741.0], [47.3, 1741.0], [47.4, 1742.0], [47.5, 1743.0], [47.6, 1743.0], [47.7, 1743.0], [47.8, 1743.0], [47.9, 1743.0], [48.0, 1744.0], [48.1, 1747.0], [48.2, 1747.0], [48.3, 1747.0], [48.4, 1747.0], [48.5, 1748.0], [48.6, 1748.0], [48.7, 1749.0], [48.8, 1750.0], [48.9, 1750.0], [49.0, 1750.0], [49.1, 1751.0], [49.2, 1751.0], [49.3, 1752.0], [49.4, 1753.0], [49.5, 1754.0], [49.6, 1754.0], [49.7, 1755.0], [49.8, 1755.0], [49.9, 1756.0], [50.0, 1756.0], [50.1, 1756.0], [50.2, 1758.0], [50.3, 1758.0], [50.4, 1758.0], [50.5, 1759.0], [50.6, 1759.0], [50.7, 1760.0], [50.8, 1760.0], [50.9, 1760.0], [51.0, 1761.0], [51.1, 1761.0], [51.2, 1761.0], [51.3, 1761.0], [51.4, 1761.0], [51.5, 1762.0], [51.6, 1762.0], [51.7, 1765.0], [51.8, 1767.0], [51.9, 1767.0], [52.0, 1767.0], [52.1, 1767.0], [52.2, 1767.0], [52.3, 1767.0], [52.4, 1768.0], [52.5, 1768.0], [52.6, 1768.0], [52.7, 1769.0], [52.8, 1769.0], [52.9, 1771.0], [53.0, 1771.0], [53.1, 1771.0], [53.2, 1772.0], [53.3, 1772.0], [53.4, 1774.0], [53.5, 1774.0], [53.6, 1775.0], [53.7, 1775.0], [53.8, 1775.0], [53.9, 1776.0], [54.0, 1776.0], [54.1, 1777.0], [54.2, 1777.0], [54.3, 1778.0], [54.4, 1778.0], [54.5, 1779.0], [54.6, 1779.0], [54.7, 1780.0], [54.8, 1780.0], [54.9, 1780.0], [55.0, 1780.0], [55.1, 1781.0], [55.2, 1781.0], [55.3, 1781.0], [55.4, 1781.0], [55.5, 1783.0], [55.6, 1783.0], [55.7, 1784.0], [55.8, 1784.0], [55.9, 1784.0], [56.0, 1784.0], [56.1, 1785.0], [56.2, 1786.0], [56.3, 1786.0], [56.4, 1787.0], [56.5, 1787.0], [56.6, 1787.0], [56.7, 1788.0], [56.8, 1788.0], [56.9, 1791.0], [57.0, 1792.0], [57.1, 1792.0], [57.2, 1793.0], [57.3, 1793.0], [57.4, 1793.0], [57.5, 1793.0], [57.6, 1794.0], [57.7, 1795.0], [57.8, 1795.0], [57.9, 1796.0], [58.0, 1797.0], [58.1, 1797.0], [58.2, 1797.0], [58.3, 1798.0], [58.4, 1798.0], [58.5, 1798.0], [58.6, 1798.0], [58.7, 1799.0], [58.8, 1800.0], [58.9, 1800.0], [59.0, 1801.0], [59.1, 1802.0], [59.2, 1802.0], [59.3, 1802.0], [59.4, 1803.0], [59.5, 1805.0], [59.6, 1805.0], [59.7, 1805.0], [59.8, 1806.0], [59.9, 1807.0], [60.0, 1807.0], [60.1, 1808.0], [60.2, 1809.0], [60.3, 1811.0], [60.4, 1811.0], [60.5, 1813.0], [60.6, 1813.0], [60.7, 1813.0], [60.8, 1813.0], [60.9, 1814.0], [61.0, 1814.0], [61.1, 1816.0], [61.2, 1816.0], [61.3, 1816.0], [61.4, 1816.0], [61.5, 1817.0], [61.6, 1817.0], [61.7, 1817.0], [61.8, 1817.0], [61.9, 1820.0], [62.0, 1821.0], [62.1, 1821.0], [62.2, 1822.0], [62.3, 1823.0], [62.4, 1823.0], [62.5, 1824.0], [62.6, 1825.0], [62.7, 1825.0], [62.8, 1825.0], [62.9, 1826.0], [63.0, 1826.0], [63.1, 1827.0], [63.2, 1828.0], [63.3, 1828.0], [63.4, 1830.0], [63.5, 1831.0], [63.6, 1833.0], [63.7, 1833.0], [63.8, 1834.0], [63.9, 1834.0], [64.0, 1835.0], [64.1, 1836.0], [64.2, 1841.0], [64.3, 1842.0], [64.4, 1843.0], [64.5, 1843.0], [64.6, 1844.0], [64.7, 1844.0], [64.8, 1844.0], [64.9, 1844.0], [65.0, 1845.0], [65.1, 1846.0], [65.2, 1846.0], [65.3, 1847.0], [65.4, 1847.0], [65.5, 1848.0], [65.6, 1851.0], [65.7, 1851.0], [65.8, 1854.0], [65.9, 1855.0], [66.0, 1855.0], [66.1, 1856.0], [66.2, 1857.0], [66.3, 1857.0], [66.4, 1859.0], [66.5, 1861.0], [66.6, 1862.0], [66.7, 1862.0], [66.8, 1862.0], [66.9, 1865.0], [67.0, 1866.0], [67.1, 1866.0], [67.2, 1867.0], [67.3, 1867.0], [67.4, 1867.0], [67.5, 1868.0], [67.6, 1870.0], [67.7, 1870.0], [67.8, 1872.0], [67.9, 1872.0], [68.0, 1872.0], [68.1, 1873.0], [68.2, 1873.0], [68.3, 1873.0], [68.4, 1874.0], [68.5, 1874.0], [68.6, 1874.0], [68.7, 1874.0], [68.8, 1874.0], [68.9, 1876.0], [69.0, 1877.0], [69.1, 1877.0], [69.2, 1879.0], [69.3, 1880.0], [69.4, 1881.0], [69.5, 1881.0], [69.6, 1881.0], [69.7, 1882.0], [69.8, 1883.0], [69.9, 1884.0], [70.0, 1884.0], [70.1, 1885.0], [70.2, 1885.0], [70.3, 1885.0], [70.4, 1885.0], [70.5, 1886.0], [70.6, 1887.0], [70.7, 1888.0], [70.8, 1888.0], [70.9, 1888.0], [71.0, 1889.0], [71.1, 1890.0], [71.2, 1891.0], [71.3, 1894.0], [71.4, 1895.0], [71.5, 1896.0], [71.6, 1897.0], [71.7, 1897.0], [71.8, 1897.0], [71.9, 1899.0], [72.0, 1900.0], [72.1, 1901.0], [72.2, 1901.0], [72.3, 1901.0], [72.4, 1901.0], [72.5, 1901.0], [72.6, 1902.0], [72.7, 1903.0], [72.8, 1903.0], [72.9, 1903.0], [73.0, 1904.0], [73.1, 1905.0], [73.2, 1905.0], [73.3, 1906.0], [73.4, 1908.0], [73.5, 1909.0], [73.6, 1911.0], [73.7, 1912.0], [73.8, 1913.0], [73.9, 1913.0], [74.0, 1913.0], [74.1, 1913.0], [74.2, 1916.0], [74.3, 1918.0], [74.4, 1920.0], [74.5, 1923.0], [74.6, 1924.0], [74.7, 1924.0], [74.8, 1926.0], [74.9, 1927.0], [75.0, 1929.0], [75.1, 1930.0], [75.2, 1932.0], [75.3, 1932.0], [75.4, 1933.0], [75.5, 1934.0], [75.6, 1935.0], [75.7, 1938.0], [75.8, 1940.0], [75.9, 1941.0], [76.0, 1941.0], [76.1, 1942.0], [76.2, 1944.0], [76.3, 1945.0], [76.4, 1945.0], [76.5, 1946.0], [76.6, 1947.0], [76.7, 1950.0], [76.8, 1954.0], [76.9, 1954.0], [77.0, 1954.0], [77.1, 1955.0], [77.2, 1955.0], [77.3, 1957.0], [77.4, 1959.0], [77.5, 1962.0], [77.6, 1964.0], [77.7, 1964.0], [77.8, 1964.0], [77.9, 1964.0], [78.0, 1965.0], [78.1, 1966.0], [78.2, 1966.0], [78.3, 1968.0], [78.4, 1969.0], [78.5, 1970.0], [78.6, 1970.0], [78.7, 1974.0], [78.8, 1977.0], [78.9, 1980.0], [79.0, 1980.0], [79.1, 1981.0], [79.2, 1981.0], [79.3, 1981.0], [79.4, 1982.0], [79.5, 1982.0], [79.6, 1982.0], [79.7, 1982.0], [79.8, 1983.0], [79.9, 1983.0], [80.0, 1984.0], [80.1, 1985.0], [80.2, 1987.0], [80.3, 1988.0], [80.4, 1989.0], [80.5, 1989.0], [80.6, 1989.0], [80.7, 1990.0], [80.8, 1991.0], [80.9, 1992.0], [81.0, 1992.0], [81.1, 1993.0], [81.2, 1993.0], [81.3, 1998.0], [81.4, 1998.0], [81.5, 1998.0], [81.6, 1998.0], [81.7, 1999.0], [81.8, 1999.0], [81.9, 2001.0], [82.0, 2004.0], [82.1, 2008.0], [82.2, 2009.0], [82.3, 2009.0], [82.4, 2009.0], [82.5, 2013.0], [82.6, 2013.0], [82.7, 2013.0], [82.8, 2013.0], [82.9, 2014.0], [83.0, 2015.0], [83.1, 2016.0], [83.2, 2019.0], [83.3, 2019.0], [83.4, 2019.0], [83.5, 2021.0], [83.6, 2021.0], [83.7, 2022.0], [83.8, 2023.0], [83.9, 2025.0], [84.0, 2025.0], [84.1, 2026.0], [84.2, 2028.0], [84.3, 2028.0], [84.4, 2029.0], [84.5, 2030.0], [84.6, 2030.0], [84.7, 2034.0], [84.8, 2035.0], [84.9, 2037.0], [85.0, 2038.0], [85.1, 2039.0], [85.2, 2039.0], [85.3, 2039.0], [85.4, 2040.0], [85.5, 2043.0], [85.6, 2044.0], [85.7, 2045.0], [85.8, 2045.0], [85.9, 2052.0], [86.0, 2052.0], [86.1, 2057.0], [86.2, 2057.0], [86.3, 2059.0], [86.4, 2060.0], [86.5, 2061.0], [86.6, 2063.0], [86.7, 2065.0], [86.8, 2065.0], [86.9, 2066.0], [87.0, 2066.0], [87.1, 2066.0], [87.2, 2068.0], [87.3, 2073.0], [87.4, 2076.0], [87.5, 2077.0], [87.6, 2080.0], [87.7, 2083.0], [87.8, 2085.0], [87.9, 2092.0], [88.0, 2093.0], [88.1, 2095.0], [88.2, 2101.0], [88.3, 2103.0], [88.4, 2108.0], [88.5, 2108.0], [88.6, 2111.0], [88.7, 2112.0], [88.8, 2112.0], [88.9, 2112.0], [89.0, 2114.0], [89.1, 2117.0], [89.2, 2119.0], [89.3, 2120.0], [89.4, 2121.0], [89.5, 2123.0], [89.6, 2126.0], [89.7, 2129.0], [89.8, 2133.0], [89.9, 2133.0], [90.0, 2137.0], [90.1, 2140.0], [90.2, 2142.0], [90.3, 2143.0], [90.4, 2144.0], [90.5, 2145.0], [90.6, 2151.0], [90.7, 2155.0], [90.8, 2155.0], [90.9, 2156.0], [91.0, 2159.0], [91.1, 2160.0], [91.2, 2161.0], [91.3, 2163.0], [91.4, 2170.0], [91.5, 2173.0], [91.6, 2174.0], [91.7, 2175.0], [91.8, 2177.0], [91.9, 2180.0], [92.0, 2181.0], [92.1, 2183.0], [92.2, 2184.0], [92.3, 2195.0], [92.4, 2198.0], [92.5, 2210.0], [92.6, 2210.0], [92.7, 2210.0], [92.8, 2219.0], [92.9, 2221.0], [93.0, 2221.0], [93.1, 2224.0], [93.2, 2229.0], [93.3, 2229.0], [93.4, 2246.0], [93.5, 2246.0], [93.6, 2251.0], [93.7, 2256.0], [93.8, 2256.0], [93.9, 2266.0], [94.0, 2269.0], [94.1, 2280.0], [94.2, 2290.0], [94.3, 2317.0], [94.4, 2320.0], [94.5, 2320.0], [94.6, 2329.0], [94.7, 2343.0], [94.8, 2347.0], [94.9, 2347.0], [95.0, 2372.0], [95.1, 2373.0], [95.2, 2381.0], [95.3, 2383.0], [95.4, 2391.0], [95.5, 2394.0], [95.6, 2422.0], [95.7, 2442.0], [95.8, 2444.0], [95.9, 2450.0], [96.0, 2461.0], [96.1, 2473.0], [96.2, 2474.0], [96.3, 2474.0], [96.4, 2484.0], [96.5, 2486.0], [96.6, 2507.0], [96.7, 2516.0], [96.8, 2536.0], [96.9, 2624.0], [97.0, 2694.0], [97.1, 2699.0], [97.2, 2704.0], [97.3, 2728.0], [97.4, 2739.0], [97.5, 2763.0], [97.6, 2769.0], [97.7, 2817.0], [97.8, 2833.0], [97.9, 2847.0], [98.0, 2903.0], [98.1, 2926.0], [98.2, 2926.0], [98.3, 3188.0], [98.4, 3189.0], [98.5, 3239.0], [98.6, 3239.0], [98.7, 3265.0], [98.8, 3337.0], [98.9, 4055.0], [99.0, 4251.0], [99.1, 4884.0], [99.2, 5129.0], [99.3, 5265.0], [99.4, 5535.0], [99.5, 5536.0], [99.6, 5537.0], [99.7, 5733.0], [99.8, 5851.0], [99.9, 6120.0], [100.0, 6120.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 560.0], [0.1, 560.0], [0.2, 574.0], [0.3, 582.0], [0.4, 583.0], [0.5, 587.0], [0.6, 591.0], [0.7, 592.0], [0.8, 594.0], [0.9, 595.0], [1.0, 596.0], [1.1, 597.0], [1.2, 597.0], [1.3, 598.0], [1.4, 599.0], [1.5, 599.0], [1.6, 599.0], [1.7, 600.0], [1.8, 601.0], [1.9, 603.0], [2.0, 604.0], [2.1, 605.0], [2.2, 606.0], [2.3, 607.0], [2.4, 609.0], [2.5, 610.0], [2.6, 613.0], [2.7, 613.0], [2.8, 614.0], [2.9, 614.0], [3.0, 615.0], [3.1, 615.0], [3.2, 616.0], [3.3, 616.0], [3.4, 616.0], [3.5, 618.0], [3.6, 618.0], [3.7, 618.0], [3.8, 618.0], [3.9, 619.0], [4.0, 620.0], [4.1, 621.0], [4.2, 621.0], [4.3, 621.0], [4.4, 621.0], [4.5, 622.0], [4.6, 624.0], [4.7, 624.0], [4.8, 625.0], [4.9, 625.0], [5.0, 627.0], [5.1, 627.0], [5.2, 628.0], [5.3, 629.0], [5.4, 629.0], [5.5, 630.0], [5.6, 630.0], [5.7, 630.0], [5.8, 630.0], [5.9, 631.0], [6.0, 631.0], [6.1, 631.0], [6.2, 632.0], [6.3, 632.0], [6.4, 632.0], [6.5, 634.0], [6.6, 634.0], [6.7, 634.0], [6.8, 635.0], [6.9, 635.0], [7.0, 635.0], [7.1, 635.0], [7.2, 635.0], [7.3, 635.0], [7.4, 636.0], [7.5, 636.0], [7.6, 636.0], [7.7, 636.0], [7.8, 637.0], [7.9, 637.0], [8.0, 637.0], [8.1, 638.0], [8.2, 638.0], [8.3, 638.0], [8.4, 639.0], [8.5, 639.0], [8.6, 639.0], [8.7, 639.0], [8.8, 640.0], [8.9, 640.0], [9.0, 640.0], [9.1, 640.0], [9.2, 640.0], [9.3, 640.0], [9.4, 640.0], [9.5, 641.0], [9.6, 641.0], [9.7, 641.0], [9.8, 641.0], [9.9, 641.0], [10.0, 641.0], [10.1, 642.0], [10.2, 642.0], [10.3, 642.0], [10.4, 643.0], [10.5, 643.0], [10.6, 643.0], [10.7, 643.0], [10.8, 644.0], [10.9, 645.0], [11.0, 645.0], [11.1, 645.0], [11.2, 646.0], [11.3, 647.0], [11.4, 647.0], [11.5, 647.0], [11.6, 647.0], [11.7, 648.0], [11.8, 648.0], [11.9, 648.0], [12.0, 648.0], [12.1, 648.0], [12.2, 648.0], [12.3, 649.0], [12.4, 649.0], [12.5, 649.0], [12.6, 649.0], [12.7, 649.0], [12.8, 649.0], [12.9, 650.0], [13.0, 650.0], [13.1, 650.0], [13.2, 650.0], [13.3, 650.0], [13.4, 650.0], [13.5, 651.0], [13.6, 651.0], [13.7, 651.0], [13.8, 651.0], [13.9, 651.0], [14.0, 651.0], [14.1, 651.0], [14.2, 652.0], [14.3, 653.0], [14.4, 653.0], [14.5, 653.0], [14.6, 653.0], [14.7, 653.0], [14.8, 653.0], [14.9, 654.0], [15.0, 654.0], [15.1, 654.0], [15.2, 655.0], [15.3, 655.0], [15.4, 655.0], [15.5, 655.0], [15.6, 656.0], [15.7, 656.0], [15.8, 656.0], [15.9, 657.0], [16.0, 657.0], [16.1, 657.0], [16.2, 658.0], [16.3, 658.0], [16.4, 658.0], [16.5, 658.0], [16.6, 658.0], [16.7, 658.0], [16.8, 658.0], [16.9, 659.0], [17.0, 659.0], [17.1, 659.0], [17.2, 659.0], [17.3, 659.0], [17.4, 659.0], [17.5, 659.0], [17.6, 659.0], [17.7, 660.0], [17.8, 660.0], [17.9, 660.0], [18.0, 661.0], [18.1, 661.0], [18.2, 661.0], [18.3, 661.0], [18.4, 661.0], [18.5, 661.0], [18.6, 662.0], [18.7, 662.0], [18.8, 663.0], [18.9, 663.0], [19.0, 663.0], [19.1, 663.0], [19.2, 663.0], [19.3, 663.0], [19.4, 663.0], [19.5, 664.0], [19.6, 664.0], [19.7, 664.0], [19.8, 664.0], [19.9, 664.0], [20.0, 665.0], [20.1, 665.0], [20.2, 665.0], [20.3, 665.0], [20.4, 665.0], [20.5, 666.0], [20.6, 666.0], [20.7, 666.0], [20.8, 666.0], [20.9, 666.0], [21.0, 666.0], [21.1, 667.0], [21.2, 667.0], [21.3, 667.0], [21.4, 667.0], [21.5, 668.0], [21.6, 668.0], [21.7, 668.0], [21.8, 668.0], [21.9, 669.0], [22.0, 669.0], [22.1, 669.0], [22.2, 669.0], [22.3, 670.0], [22.4, 670.0], [22.5, 670.0], [22.6, 670.0], [22.7, 670.0], [22.8, 670.0], [22.9, 671.0], [23.0, 671.0], [23.1, 671.0], [23.2, 671.0], [23.3, 671.0], [23.4, 671.0], [23.5, 671.0], [23.6, 672.0], [23.7, 672.0], [23.8, 672.0], [23.9, 672.0], [24.0, 672.0], [24.1, 672.0], [24.2, 672.0], [24.3, 672.0], [24.4, 672.0], [24.5, 673.0], [24.6, 673.0], [24.7, 673.0], [24.8, 673.0], [24.9, 673.0], [25.0, 673.0], [25.1, 673.0], [25.2, 674.0], [25.3, 674.0], [25.4, 674.0], [25.5, 674.0], [25.6, 674.0], [25.7, 675.0], [25.8, 675.0], [25.9, 676.0], [26.0, 676.0], [26.1, 676.0], [26.2, 676.0], [26.3, 676.0], [26.4, 677.0], [26.5, 677.0], [26.6, 677.0], [26.7, 677.0], [26.8, 677.0], [26.9, 677.0], [27.0, 677.0], [27.1, 678.0], [27.2, 678.0], [27.3, 678.0], [27.4, 678.0], [27.5, 678.0], [27.6, 678.0], [27.7, 679.0], [27.8, 679.0], [27.9, 680.0], [28.0, 680.0], [28.1, 680.0], [28.2, 680.0], [28.3, 680.0], [28.4, 680.0], [28.5, 681.0], [28.6, 681.0], [28.7, 681.0], [28.8, 681.0], [28.9, 681.0], [29.0, 681.0], [29.1, 681.0], [29.2, 681.0], [29.3, 681.0], [29.4, 682.0], [29.5, 682.0], [29.6, 682.0], [29.7, 682.0], [29.8, 682.0], [29.9, 683.0], [30.0, 683.0], [30.1, 683.0], [30.2, 683.0], [30.3, 683.0], [30.4, 684.0], [30.5, 684.0], [30.6, 684.0], [30.7, 685.0], [30.8, 685.0], [30.9, 685.0], [31.0, 685.0], [31.1, 685.0], [31.2, 685.0], [31.3, 686.0], [31.4, 686.0], [31.5, 686.0], [31.6, 686.0], [31.7, 686.0], [31.8, 686.0], [31.9, 686.0], [32.0, 686.0], [32.1, 686.0], [32.2, 687.0], [32.3, 687.0], [32.4, 688.0], [32.5, 688.0], [32.6, 688.0], [32.7, 688.0], [32.8, 688.0], [32.9, 688.0], [33.0, 688.0], [33.1, 689.0], [33.2, 689.0], [33.3, 690.0], [33.4, 690.0], [33.5, 690.0], [33.6, 690.0], [33.7, 690.0], [33.8, 690.0], [33.9, 690.0], [34.0, 691.0], [34.1, 691.0], [34.2, 691.0], [34.3, 691.0], [34.4, 691.0], [34.5, 691.0], [34.6, 691.0], [34.7, 692.0], [34.8, 692.0], [34.9, 692.0], [35.0, 692.0], [35.1, 692.0], [35.2, 692.0], [35.3, 692.0], [35.4, 692.0], [35.5, 693.0], [35.6, 693.0], [35.7, 693.0], [35.8, 693.0], [35.9, 694.0], [36.0, 694.0], [36.1, 694.0], [36.2, 694.0], [36.3, 694.0], [36.4, 694.0], [36.5, 694.0], [36.6, 694.0], [36.7, 694.0], [36.8, 694.0], [36.9, 694.0], [37.0, 694.0], [37.1, 695.0], [37.2, 695.0], [37.3, 695.0], [37.4, 695.0], [37.5, 695.0], [37.6, 695.0], [37.7, 695.0], [37.8, 696.0], [37.9, 696.0], [38.0, 696.0], [38.1, 696.0], [38.2, 696.0], [38.3, 696.0], [38.4, 696.0], [38.5, 696.0], [38.6, 696.0], [38.7, 697.0], [38.8, 697.0], [38.9, 697.0], [39.0, 697.0], [39.1, 697.0], [39.2, 697.0], [39.3, 697.0], [39.4, 697.0], [39.5, 697.0], [39.6, 697.0], [39.7, 698.0], [39.8, 698.0], [39.9, 698.0], [40.0, 698.0], [40.1, 699.0], [40.2, 699.0], [40.3, 699.0], [40.4, 699.0], [40.5, 699.0], [40.6, 699.0], [40.7, 699.0], [40.8, 699.0], [40.9, 699.0], [41.0, 699.0], [41.1, 699.0], [41.2, 700.0], [41.3, 700.0], [41.4, 700.0], [41.5, 700.0], [41.6, 700.0], [41.7, 700.0], [41.8, 700.0], [41.9, 701.0], [42.0, 701.0], [42.1, 701.0], [42.2, 701.0], [42.3, 701.0], [42.4, 701.0], [42.5, 701.0], [42.6, 701.0], [42.7, 702.0], [42.8, 702.0], [42.9, 702.0], [43.0, 703.0], [43.1, 703.0], [43.2, 703.0], [43.3, 703.0], [43.4, 703.0], [43.5, 703.0], [43.6, 703.0], [43.7, 703.0], [43.8, 703.0], [43.9, 704.0], [44.0, 704.0], [44.1, 704.0], [44.2, 704.0], [44.3, 705.0], [44.4, 705.0], [44.5, 705.0], [44.6, 705.0], [44.7, 706.0], [44.8, 706.0], [44.9, 706.0], [45.0, 706.0], [45.1, 706.0], [45.2, 706.0], [45.3, 706.0], [45.4, 706.0], [45.5, 706.0], [45.6, 706.0], [45.7, 707.0], [45.8, 707.0], [45.9, 708.0], [46.0, 708.0], [46.1, 708.0], [46.2, 708.0], [46.3, 708.0], [46.4, 708.0], [46.5, 708.0], [46.6, 709.0], [46.7, 709.0], [46.8, 710.0], [46.9, 710.0], [47.0, 711.0], [47.1, 711.0], [47.2, 712.0], [47.3, 712.0], [47.4, 712.0], [47.5, 712.0], [47.6, 712.0], [47.7, 712.0], [47.8, 713.0], [47.9, 713.0], [48.0, 713.0], [48.1, 713.0], [48.2, 713.0], [48.3, 714.0], [48.4, 714.0], [48.5, 714.0], [48.6, 714.0], [48.7, 714.0], [48.8, 714.0], [48.9, 714.0], [49.0, 715.0], [49.1, 715.0], [49.2, 716.0], [49.3, 716.0], [49.4, 716.0], [49.5, 716.0], [49.6, 716.0], [49.7, 717.0], [49.8, 717.0], [49.9, 717.0], [50.0, 718.0], [50.1, 718.0], [50.2, 718.0], [50.3, 718.0], [50.4, 718.0], [50.5, 718.0], [50.6, 719.0], [50.7, 719.0], [50.8, 719.0], [50.9, 719.0], [51.0, 719.0], [51.1, 719.0], [51.2, 719.0], [51.3, 719.0], [51.4, 719.0], [51.5, 720.0], [51.6, 720.0], [51.7, 720.0], [51.8, 720.0], [51.9, 721.0], [52.0, 721.0], [52.1, 721.0], [52.2, 721.0], [52.3, 722.0], [52.4, 722.0], [52.5, 722.0], [52.6, 722.0], [52.7, 722.0], [52.8, 723.0], [52.9, 723.0], [53.0, 723.0], [53.1, 723.0], [53.2, 723.0], [53.3, 723.0], [53.4, 723.0], [53.5, 724.0], [53.6, 724.0], [53.7, 724.0], [53.8, 724.0], [53.9, 724.0], [54.0, 725.0], [54.1, 725.0], [54.2, 725.0], [54.3, 725.0], [54.4, 725.0], [54.5, 725.0], [54.6, 725.0], [54.7, 725.0], [54.8, 726.0], [54.9, 726.0], [55.0, 726.0], [55.1, 726.0], [55.2, 726.0], [55.3, 726.0], [55.4, 726.0], [55.5, 726.0], [55.6, 727.0], [55.7, 728.0], [55.8, 728.0], [55.9, 728.0], [56.0, 728.0], [56.1, 728.0], [56.2, 729.0], [56.3, 729.0], [56.4, 729.0], [56.5, 729.0], [56.6, 729.0], [56.7, 730.0], [56.8, 730.0], [56.9, 730.0], [57.0, 730.0], [57.1, 731.0], [57.2, 731.0], [57.3, 732.0], [57.4, 732.0], [57.5, 733.0], [57.6, 733.0], [57.7, 734.0], [57.8, 734.0], [57.9, 734.0], [58.0, 734.0], [58.1, 734.0], [58.2, 734.0], [58.3, 735.0], [58.4, 735.0], [58.5, 735.0], [58.6, 735.0], [58.7, 735.0], [58.8, 735.0], [58.9, 735.0], [59.0, 735.0], [59.1, 736.0], [59.2, 736.0], [59.3, 736.0], [59.4, 736.0], [59.5, 736.0], [59.6, 737.0], [59.7, 737.0], [59.8, 737.0], [59.9, 737.0], [60.0, 737.0], [60.1, 738.0], [60.2, 738.0], [60.3, 738.0], [60.4, 738.0], [60.5, 738.0], [60.6, 738.0], [60.7, 738.0], [60.8, 739.0], [60.9, 739.0], [61.0, 739.0], [61.1, 739.0], [61.2, 740.0], [61.3, 740.0], [61.4, 740.0], [61.5, 741.0], [61.6, 741.0], [61.7, 741.0], [61.8, 741.0], [61.9, 741.0], [62.0, 741.0], [62.1, 742.0], [62.2, 742.0], [62.3, 742.0], [62.4, 742.0], [62.5, 742.0], [62.6, 743.0], [62.7, 743.0], [62.8, 743.0], [62.9, 743.0], [63.0, 744.0], [63.1, 744.0], [63.2, 744.0], [63.3, 744.0], [63.4, 744.0], [63.5, 744.0], [63.6, 745.0], [63.7, 745.0], [63.8, 745.0], [63.9, 745.0], [64.0, 745.0], [64.1, 746.0], [64.2, 746.0], [64.3, 746.0], [64.4, 747.0], [64.5, 747.0], [64.6, 747.0], [64.7, 747.0], [64.8, 747.0], [64.9, 747.0], [65.0, 748.0], [65.1, 748.0], [65.2, 748.0], [65.3, 748.0], [65.4, 748.0], [65.5, 749.0], [65.6, 749.0], [65.7, 749.0], [65.8, 749.0], [65.9, 750.0], [66.0, 750.0], [66.1, 751.0], [66.2, 751.0], [66.3, 751.0], [66.4, 751.0], [66.5, 751.0], [66.6, 751.0], [66.7, 751.0], [66.8, 752.0], [66.9, 752.0], [67.0, 752.0], [67.1, 752.0], [67.2, 752.0], [67.3, 753.0], [67.4, 753.0], [67.5, 753.0], [67.6, 753.0], [67.7, 754.0], [67.8, 754.0], [67.9, 754.0], [68.0, 756.0], [68.1, 756.0], [68.2, 756.0], [68.3, 758.0], [68.4, 758.0], [68.5, 758.0], [68.6, 758.0], [68.7, 759.0], [68.8, 759.0], [68.9, 760.0], [69.0, 760.0], [69.1, 760.0], [69.2, 760.0], [69.3, 760.0], [69.4, 761.0], [69.5, 761.0], [69.6, 761.0], [69.7, 761.0], [69.8, 761.0], [69.9, 761.0], [70.0, 762.0], [70.1, 762.0], [70.2, 762.0], [70.3, 764.0], [70.4, 764.0], [70.5, 765.0], [70.6, 766.0], [70.7, 767.0], [70.8, 767.0], [70.9, 767.0], [71.0, 767.0], [71.1, 767.0], [71.2, 768.0], [71.3, 769.0], [71.4, 769.0], [71.5, 769.0], [71.6, 769.0], [71.7, 769.0], [71.8, 770.0], [71.9, 770.0], [72.0, 770.0], [72.1, 770.0], [72.2, 771.0], [72.3, 771.0], [72.4, 772.0], [72.5, 772.0], [72.6, 772.0], [72.7, 772.0], [72.8, 772.0], [72.9, 773.0], [73.0, 773.0], [73.1, 773.0], [73.2, 773.0], [73.3, 774.0], [73.4, 774.0], [73.5, 775.0], [73.6, 775.0], [73.7, 775.0], [73.8, 776.0], [73.9, 776.0], [74.0, 776.0], [74.1, 777.0], [74.2, 777.0], [74.3, 777.0], [74.4, 778.0], [74.5, 778.0], [74.6, 778.0], [74.7, 778.0], [74.8, 779.0], [74.9, 780.0], [75.0, 780.0], [75.1, 780.0], [75.2, 780.0], [75.3, 780.0], [75.4, 780.0], [75.5, 780.0], [75.6, 780.0], [75.7, 781.0], [75.8, 781.0], [75.9, 782.0], [76.0, 783.0], [76.1, 785.0], [76.2, 785.0], [76.3, 786.0], [76.4, 788.0], [76.5, 791.0], [76.6, 791.0], [76.7, 792.0], [76.8, 792.0], [76.9, 792.0], [77.0, 792.0], [77.1, 792.0], [77.2, 793.0], [77.3, 795.0], [77.4, 796.0], [77.5, 797.0], [77.6, 797.0], [77.7, 798.0], [77.8, 801.0], [77.9, 802.0], [78.0, 802.0], [78.1, 803.0], [78.2, 803.0], [78.3, 803.0], [78.4, 804.0], [78.5, 805.0], [78.6, 805.0], [78.7, 805.0], [78.8, 805.0], [78.9, 806.0], [79.0, 806.0], [79.1, 807.0], [79.2, 808.0], [79.3, 810.0], [79.4, 811.0], [79.5, 811.0], [79.6, 812.0], [79.7, 812.0], [79.8, 812.0], [79.9, 813.0], [80.0, 813.0], [80.1, 813.0], [80.2, 813.0], [80.3, 814.0], [80.4, 814.0], [80.5, 816.0], [80.6, 816.0], [80.7, 817.0], [80.8, 818.0], [80.9, 819.0], [81.0, 819.0], [81.1, 822.0], [81.2, 822.0], [81.3, 823.0], [81.4, 824.0], [81.5, 826.0], [81.6, 827.0], [81.7, 827.0], [81.8, 828.0], [81.9, 828.0], [82.0, 829.0], [82.1, 830.0], [82.2, 831.0], [82.3, 831.0], [82.4, 831.0], [82.5, 831.0], [82.6, 832.0], [82.7, 832.0], [82.8, 832.0], [82.9, 833.0], [83.0, 834.0], [83.1, 835.0], [83.2, 836.0], [83.3, 837.0], [83.4, 837.0], [83.5, 837.0], [83.6, 838.0], [83.7, 838.0], [83.8, 838.0], [83.9, 839.0], [84.0, 842.0], [84.1, 842.0], [84.2, 844.0], [84.3, 845.0], [84.4, 845.0], [84.5, 845.0], [84.6, 847.0], [84.7, 848.0], [84.8, 848.0], [84.9, 849.0], [85.0, 850.0], [85.1, 851.0], [85.2, 852.0], [85.3, 852.0], [85.4, 852.0], [85.5, 853.0], [85.6, 853.0], [85.7, 855.0], [85.8, 855.0], [85.9, 855.0], [86.0, 856.0], [86.1, 856.0], [86.2, 858.0], [86.3, 861.0], [86.4, 862.0], [86.5, 864.0], [86.6, 864.0], [86.7, 866.0], [86.8, 866.0], [86.9, 867.0], [87.0, 867.0], [87.1, 867.0], [87.2, 868.0], [87.3, 870.0], [87.4, 871.0], [87.5, 873.0], [87.6, 873.0], [87.7, 876.0], [87.8, 877.0], [87.9, 878.0], [88.0, 879.0], [88.1, 880.0], [88.2, 881.0], [88.3, 882.0], [88.4, 883.0], [88.5, 883.0], [88.6, 884.0], [88.7, 886.0], [88.8, 887.0], [88.9, 888.0], [89.0, 889.0], [89.1, 889.0], [89.2, 890.0], [89.3, 893.0], [89.4, 894.0], [89.5, 895.0], [89.6, 900.0], [89.7, 900.0], [89.8, 907.0], [89.9, 907.0], [90.0, 908.0], [90.1, 908.0], [90.2, 909.0], [90.3, 909.0], [90.4, 915.0], [90.5, 917.0], [90.6, 919.0], [90.7, 921.0], [90.8, 925.0], [90.9, 931.0], [91.0, 934.0], [91.1, 935.0], [91.2, 936.0], [91.3, 938.0], [91.4, 938.0], [91.5, 939.0], [91.6, 942.0], [91.7, 944.0], [91.8, 945.0], [91.9, 946.0], [92.0, 951.0], [92.1, 954.0], [92.2, 955.0], [92.3, 958.0], [92.4, 961.0], [92.5, 962.0], [92.6, 966.0], [92.7, 969.0], [92.8, 969.0], [92.9, 970.0], [93.0, 973.0], [93.1, 974.0], [93.2, 975.0], [93.3, 975.0], [93.4, 975.0], [93.5, 983.0], [93.6, 983.0], [93.7, 984.0], [93.8, 996.0], [93.9, 999.0], [94.0, 1010.0], [94.1, 1015.0], [94.2, 1020.0], [94.3, 1020.0], [94.4, 1021.0], [94.5, 1023.0], [94.6, 1024.0], [94.7, 1033.0], [94.8, 1037.0], [94.9, 1038.0], [95.0, 1042.0], [95.1, 1046.0], [95.2, 1047.0], [95.3, 1051.0], [95.4, 1052.0], [95.5, 1053.0], [95.6, 1057.0], [95.7, 1057.0], [95.8, 1057.0], [95.9, 1068.0], [96.0, 1071.0], [96.1, 1072.0], [96.2, 1073.0], [96.3, 1089.0], [96.4, 1091.0], [96.5, 1092.0], [96.6, 1100.0], [96.7, 1102.0], [96.8, 1105.0], [96.9, 1105.0], [97.0, 1106.0], [97.1, 1109.0], [97.2, 1109.0], [97.3, 1124.0], [97.4, 1126.0], [97.5, 1126.0], [97.6, 1131.0], [97.7, 1135.0], [97.8, 1140.0], [97.9, 1140.0], [98.0, 1146.0], [98.1, 1150.0], [98.2, 1170.0], [98.3, 1171.0], [98.4, 1172.0], [98.5, 1195.0], [98.6, 1195.0], [98.7, 1205.0], [98.8, 1208.0], [98.9, 1234.0], [99.0, 1236.0], [99.1, 1248.0], [99.2, 1341.0], [99.3, 1343.0], [99.4, 1854.0], [99.5, 2289.0], [99.6, 2543.0], [99.7, 2616.0], [99.8, 2723.0], [99.9, 2851.0], [100.0, 2851.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 853.0], [0.1, 853.0], [0.2, 856.0], [0.3, 894.0], [0.4, 895.0], [0.5, 896.0], [0.6, 900.0], [0.7, 900.0], [0.8, 912.0], [0.9, 916.0], [1.0, 918.0], [1.1, 921.0], [1.2, 921.0], [1.3, 925.0], [1.4, 925.0], [1.5, 927.0], [1.6, 928.0], [1.7, 929.0], [1.8, 929.0], [1.9, 930.0], [2.0, 932.0], [2.1, 932.0], [2.2, 933.0], [2.3, 935.0], [2.4, 936.0], [2.5, 937.0], [2.6, 938.0], [2.7, 938.0], [2.8, 940.0], [2.9, 941.0], [3.0, 941.0], [3.1, 942.0], [3.2, 944.0], [3.3, 946.0], [3.4, 948.0], [3.5, 949.0], [3.6, 949.0], [3.7, 950.0], [3.8, 951.0], [3.9, 951.0], [4.0, 951.0], [4.1, 951.0], [4.2, 952.0], [4.3, 952.0], [4.4, 952.0], [4.5, 954.0], [4.6, 954.0], [4.7, 955.0], [4.8, 956.0], [4.9, 957.0], [5.0, 957.0], [5.1, 959.0], [5.2, 959.0], [5.3, 961.0], [5.4, 961.0], [5.5, 961.0], [5.6, 961.0], [5.7, 961.0], [5.8, 962.0], [5.9, 963.0], [6.0, 963.0], [6.1, 963.0], [6.2, 964.0], [6.3, 965.0], [6.4, 965.0], [6.5, 965.0], [6.6, 965.0], [6.7, 965.0], [6.8, 966.0], [6.9, 967.0], [7.0, 967.0], [7.1, 967.0], [7.2, 967.0], [7.3, 969.0], [7.4, 970.0], [7.5, 970.0], [7.6, 970.0], [7.7, 970.0], [7.8, 970.0], [7.9, 971.0], [8.0, 972.0], [8.1, 972.0], [8.2, 973.0], [8.3, 974.0], [8.4, 975.0], [8.5, 976.0], [8.6, 978.0], [8.7, 978.0], [8.8, 978.0], [8.9, 978.0], [9.0, 978.0], [9.1, 979.0], [9.2, 979.0], [9.3, 980.0], [9.4, 980.0], [9.5, 980.0], [9.6, 980.0], [9.7, 980.0], [9.8, 980.0], [9.9, 981.0], [10.0, 981.0], [10.1, 981.0], [10.2, 981.0], [10.3, 981.0], [10.4, 981.0], [10.5, 982.0], [10.6, 982.0], [10.7, 982.0], [10.8, 983.0], [10.9, 984.0], [11.0, 985.0], [11.1, 985.0], [11.2, 985.0], [11.3, 986.0], [11.4, 986.0], [11.5, 987.0], [11.6, 987.0], [11.7, 987.0], [11.8, 987.0], [11.9, 988.0], [12.0, 988.0], [12.1, 988.0], [12.2, 988.0], [12.3, 989.0], [12.4, 989.0], [12.5, 990.0], [12.6, 990.0], [12.7, 990.0], [12.8, 990.0], [12.9, 991.0], [13.0, 991.0], [13.1, 992.0], [13.2, 992.0], [13.3, 992.0], [13.4, 992.0], [13.5, 992.0], [13.6, 994.0], [13.7, 994.0], [13.8, 995.0], [13.9, 995.0], [14.0, 995.0], [14.1, 995.0], [14.2, 996.0], [14.3, 997.0], [14.4, 997.0], [14.5, 998.0], [14.6, 998.0], [14.7, 998.0], [14.8, 998.0], [14.9, 999.0], [15.0, 999.0], [15.1, 999.0], [15.2, 1000.0], [15.3, 1000.0], [15.4, 1000.0], [15.5, 1001.0], [15.6, 1001.0], [15.7, 1001.0], [15.8, 1001.0], [15.9, 1002.0], [16.0, 1002.0], [16.1, 1002.0], [16.2, 1002.0], [16.3, 1002.0], [16.4, 1002.0], [16.5, 1003.0], [16.6, 1005.0], [16.7, 1005.0], [16.8, 1005.0], [16.9, 1005.0], [17.0, 1005.0], [17.1, 1006.0], [17.2, 1006.0], [17.3, 1006.0], [17.4, 1006.0], [17.5, 1006.0], [17.6, 1006.0], [17.7, 1007.0], [17.8, 1008.0], [17.9, 1008.0], [18.0, 1009.0], [18.1, 1010.0], [18.2, 1010.0], [18.3, 1010.0], [18.4, 1011.0], [18.5, 1011.0], [18.6, 1011.0], [18.7, 1011.0], [18.8, 1011.0], [18.9, 1011.0], [19.0, 1012.0], [19.1, 1013.0], [19.2, 1013.0], [19.3, 1014.0], [19.4, 1015.0], [19.5, 1015.0], [19.6, 1015.0], [19.7, 1016.0], [19.8, 1016.0], [19.9, 1017.0], [20.0, 1017.0], [20.1, 1018.0], [20.2, 1018.0], [20.3, 1019.0], [20.4, 1019.0], [20.5, 1019.0], [20.6, 1019.0], [20.7, 1020.0], [20.8, 1020.0], [20.9, 1021.0], [21.0, 1021.0], [21.1, 1021.0], [21.2, 1022.0], [21.3, 1022.0], [21.4, 1022.0], [21.5, 1022.0], [21.6, 1022.0], [21.7, 1024.0], [21.8, 1024.0], [21.9, 1025.0], [22.0, 1025.0], [22.1, 1026.0], [22.2, 1026.0], [22.3, 1027.0], [22.4, 1027.0], [22.5, 1027.0], [22.6, 1027.0], [22.7, 1027.0], [22.8, 1028.0], [22.9, 1029.0], [23.0, 1029.0], [23.1, 1030.0], [23.2, 1030.0], [23.3, 1030.0], [23.4, 1030.0], [23.5, 1030.0], [23.6, 1030.0], [23.7, 1031.0], [23.8, 1031.0], [23.9, 1031.0], [24.0, 1031.0], [24.1, 1031.0], [24.2, 1031.0], [24.3, 1033.0], [24.4, 1033.0], [24.5, 1033.0], [24.6, 1033.0], [24.7, 1033.0], [24.8, 1033.0], [24.9, 1034.0], [25.0, 1035.0], [25.1, 1036.0], [25.2, 1036.0], [25.3, 1036.0], [25.4, 1036.0], [25.5, 1036.0], [25.6, 1036.0], [25.7, 1037.0], [25.8, 1037.0], [25.9, 1038.0], [26.0, 1038.0], [26.1, 1038.0], [26.2, 1039.0], [26.3, 1039.0], [26.4, 1039.0], [26.5, 1040.0], [26.6, 1040.0], [26.7, 1040.0], [26.8, 1041.0], [26.9, 1042.0], [27.0, 1042.0], [27.1, 1043.0], [27.2, 1043.0], [27.3, 1044.0], [27.4, 1045.0], [27.5, 1045.0], [27.6, 1045.0], [27.7, 1045.0], [27.8, 1046.0], [27.9, 1046.0], [28.0, 1046.0], [28.1, 1046.0], [28.2, 1046.0], [28.3, 1047.0], [28.4, 1047.0], [28.5, 1048.0], [28.6, 1048.0], [28.7, 1048.0], [28.8, 1048.0], [28.9, 1049.0], [29.0, 1049.0], [29.1, 1050.0], [29.2, 1050.0], [29.3, 1051.0], [29.4, 1051.0], [29.5, 1051.0], [29.6, 1052.0], [29.7, 1052.0], [29.8, 1052.0], [29.9, 1052.0], [30.0, 1052.0], [30.1, 1053.0], [30.2, 1053.0], [30.3, 1053.0], [30.4, 1054.0], [30.5, 1054.0], [30.6, 1055.0], [30.7, 1055.0], [30.8, 1056.0], [30.9, 1056.0], [31.0, 1056.0], [31.1, 1057.0], [31.2, 1058.0], [31.3, 1059.0], [31.4, 1059.0], [31.5, 1059.0], [31.6, 1060.0], [31.7, 1060.0], [31.8, 1062.0], [31.9, 1062.0], [32.0, 1062.0], [32.1, 1062.0], [32.2, 1062.0], [32.3, 1062.0], [32.4, 1063.0], [32.5, 1063.0], [32.6, 1063.0], [32.7, 1064.0], [32.8, 1064.0], [32.9, 1064.0], [33.0, 1064.0], [33.1, 1064.0], [33.2, 1064.0], [33.3, 1065.0], [33.4, 1065.0], [33.5, 1065.0], [33.6, 1066.0], [33.7, 1067.0], [33.8, 1067.0], [33.9, 1068.0], [34.0, 1068.0], [34.1, 1068.0], [34.2, 1069.0], [34.3, 1069.0], [34.4, 1069.0], [34.5, 1069.0], [34.6, 1070.0], [34.7, 1070.0], [34.8, 1070.0], [34.9, 1070.0], [35.0, 1070.0], [35.1, 1071.0], [35.2, 1071.0], [35.3, 1072.0], [35.4, 1073.0], [35.5, 1073.0], [35.6, 1073.0], [35.7, 1074.0], [35.8, 1074.0], [35.9, 1074.0], [36.0, 1074.0], [36.1, 1074.0], [36.2, 1075.0], [36.3, 1075.0], [36.4, 1075.0], [36.5, 1076.0], [36.6, 1076.0], [36.7, 1077.0], [36.8, 1077.0], [36.9, 1078.0], [37.0, 1078.0], [37.1, 1078.0], [37.2, 1079.0], [37.3, 1079.0], [37.4, 1079.0], [37.5, 1079.0], [37.6, 1079.0], [37.7, 1079.0], [37.8, 1079.0], [37.9, 1080.0], [38.0, 1080.0], [38.1, 1080.0], [38.2, 1081.0], [38.3, 1082.0], [38.4, 1082.0], [38.5, 1082.0], [38.6, 1083.0], [38.7, 1083.0], [38.8, 1083.0], [38.9, 1084.0], [39.0, 1084.0], [39.1, 1085.0], [39.2, 1086.0], [39.3, 1086.0], [39.4, 1087.0], [39.5, 1087.0], [39.6, 1087.0], [39.7, 1088.0], [39.8, 1088.0], [39.9, 1089.0], [40.0, 1089.0], [40.1, 1089.0], [40.2, 1089.0], [40.3, 1089.0], [40.4, 1089.0], [40.5, 1089.0], [40.6, 1090.0], [40.7, 1091.0], [40.8, 1091.0], [40.9, 1091.0], [41.0, 1091.0], [41.1, 1092.0], [41.2, 1092.0], [41.3, 1094.0], [41.4, 1094.0], [41.5, 1094.0], [41.6, 1094.0], [41.7, 1094.0], [41.8, 1095.0], [41.9, 1095.0], [42.0, 1096.0], [42.1, 1096.0], [42.2, 1097.0], [42.3, 1097.0], [42.4, 1097.0], [42.5, 1099.0], [42.6, 1100.0], [42.7, 1100.0], [42.8, 1100.0], [42.9, 1100.0], [43.0, 1100.0], [43.1, 1100.0], [43.2, 1100.0], [43.3, 1100.0], [43.4, 1101.0], [43.5, 1102.0], [43.6, 1102.0], [43.7, 1102.0], [43.8, 1102.0], [43.9, 1103.0], [44.0, 1103.0], [44.1, 1103.0], [44.2, 1103.0], [44.3, 1104.0], [44.4, 1104.0], [44.5, 1105.0], [44.6, 1105.0], [44.7, 1105.0], [44.8, 1105.0], [44.9, 1106.0], [45.0, 1106.0], [45.1, 1107.0], [45.2, 1107.0], [45.3, 1108.0], [45.4, 1108.0], [45.5, 1108.0], [45.6, 1108.0], [45.7, 1108.0], [45.8, 1110.0], [45.9, 1110.0], [46.0, 1110.0], [46.1, 1111.0], [46.2, 1111.0], [46.3, 1112.0], [46.4, 1112.0], [46.5, 1112.0], [46.6, 1114.0], [46.7, 1114.0], [46.8, 1115.0], [46.9, 1115.0], [47.0, 1116.0], [47.1, 1116.0], [47.2, 1116.0], [47.3, 1117.0], [47.4, 1117.0], [47.5, 1117.0], [47.6, 1117.0], [47.7, 1118.0], [47.8, 1119.0], [47.9, 1119.0], [48.0, 1119.0], [48.1, 1119.0], [48.2, 1120.0], [48.3, 1120.0], [48.4, 1121.0], [48.5, 1121.0], [48.6, 1122.0], [48.7, 1122.0], [48.8, 1122.0], [48.9, 1123.0], [49.0, 1123.0], [49.1, 1124.0], [49.2, 1125.0], [49.3, 1125.0], [49.4, 1125.0], [49.5, 1125.0], [49.6, 1126.0], [49.7, 1127.0], [49.8, 1127.0], [49.9, 1128.0], [50.0, 1129.0], [50.1, 1129.0], [50.2, 1129.0], [50.3, 1130.0], [50.4, 1131.0], [50.5, 1131.0], [50.6, 1132.0], [50.7, 1132.0], [50.8, 1132.0], [50.9, 1132.0], [51.0, 1132.0], [51.1, 1132.0], [51.2, 1133.0], [51.3, 1133.0], [51.4, 1133.0], [51.5, 1133.0], [51.6, 1133.0], [51.7, 1134.0], [51.8, 1134.0], [51.9, 1135.0], [52.0, 1135.0], [52.1, 1135.0], [52.2, 1135.0], [52.3, 1136.0], [52.4, 1138.0], [52.5, 1140.0], [52.6, 1140.0], [52.7, 1141.0], [52.8, 1141.0], [52.9, 1141.0], [53.0, 1141.0], [53.1, 1142.0], [53.2, 1143.0], [53.3, 1144.0], [53.4, 1144.0], [53.5, 1144.0], [53.6, 1145.0], [53.7, 1146.0], [53.8, 1146.0], [53.9, 1147.0], [54.0, 1148.0], [54.1, 1149.0], [54.2, 1151.0], [54.3, 1152.0], [54.4, 1152.0], [54.5, 1153.0], [54.6, 1154.0], [54.7, 1154.0], [54.8, 1155.0], [54.9, 1155.0], [55.0, 1155.0], [55.1, 1156.0], [55.2, 1156.0], [55.3, 1156.0], [55.4, 1157.0], [55.5, 1157.0], [55.6, 1158.0], [55.7, 1158.0], [55.8, 1158.0], [55.9, 1159.0], [56.0, 1159.0], [56.1, 1159.0], [56.2, 1160.0], [56.3, 1161.0], [56.4, 1161.0], [56.5, 1162.0], [56.6, 1165.0], [56.7, 1165.0], [56.8, 1166.0], [56.9, 1167.0], [57.0, 1167.0], [57.1, 1168.0], [57.2, 1168.0], [57.3, 1168.0], [57.4, 1168.0], [57.5, 1169.0], [57.6, 1169.0], [57.7, 1169.0], [57.8, 1169.0], [57.9, 1169.0], [58.0, 1170.0], [58.1, 1170.0], [58.2, 1170.0], [58.3, 1170.0], [58.4, 1171.0], [58.5, 1171.0], [58.6, 1172.0], [58.7, 1172.0], [58.8, 1172.0], [58.9, 1173.0], [59.0, 1173.0], [59.1, 1173.0], [59.2, 1174.0], [59.3, 1176.0], [59.4, 1177.0], [59.5, 1177.0], [59.6, 1178.0], [59.7, 1178.0], [59.8, 1178.0], [59.9, 1179.0], [60.0, 1179.0], [60.1, 1179.0], [60.2, 1179.0], [60.3, 1179.0], [60.4, 1180.0], [60.5, 1180.0], [60.6, 1180.0], [60.7, 1181.0], [60.8, 1182.0], [60.9, 1182.0], [61.0, 1183.0], [61.1, 1184.0], [61.2, 1185.0], [61.3, 1186.0], [61.4, 1186.0], [61.5, 1186.0], [61.6, 1186.0], [61.7, 1187.0], [61.8, 1188.0], [61.9, 1188.0], [62.0, 1188.0], [62.1, 1189.0], [62.2, 1190.0], [62.3, 1191.0], [62.4, 1193.0], [62.5, 1193.0], [62.6, 1194.0], [62.7, 1194.0], [62.8, 1194.0], [62.9, 1195.0], [63.0, 1195.0], [63.1, 1195.0], [63.2, 1197.0], [63.3, 1198.0], [63.4, 1199.0], [63.5, 1200.0], [63.6, 1202.0], [63.7, 1203.0], [63.8, 1205.0], [63.9, 1206.0], [64.0, 1206.0], [64.1, 1206.0], [64.2, 1206.0], [64.3, 1208.0], [64.4, 1210.0], [64.5, 1211.0], [64.6, 1213.0], [64.7, 1213.0], [64.8, 1213.0], [64.9, 1214.0], [65.0, 1214.0], [65.1, 1215.0], [65.2, 1215.0], [65.3, 1217.0], [65.4, 1217.0], [65.5, 1217.0], [65.6, 1217.0], [65.7, 1218.0], [65.8, 1219.0], [65.9, 1220.0], [66.0, 1220.0], [66.1, 1220.0], [66.2, 1222.0], [66.3, 1222.0], [66.4, 1223.0], [66.5, 1224.0], [66.6, 1224.0], [66.7, 1224.0], [66.8, 1224.0], [66.9, 1224.0], [67.0, 1225.0], [67.1, 1228.0], [67.2, 1228.0], [67.3, 1230.0], [67.4, 1231.0], [67.5, 1231.0], [67.6, 1232.0], [67.7, 1232.0], [67.8, 1234.0], [67.9, 1234.0], [68.0, 1235.0], [68.1, 1235.0], [68.2, 1236.0], [68.3, 1238.0], [68.4, 1238.0], [68.5, 1239.0], [68.6, 1239.0], [68.7, 1240.0], [68.8, 1241.0], [68.9, 1241.0], [69.0, 1241.0], [69.1, 1241.0], [69.2, 1241.0], [69.3, 1242.0], [69.4, 1242.0], [69.5, 1243.0], [69.6, 1243.0], [69.7, 1244.0], [69.8, 1244.0], [69.9, 1244.0], [70.0, 1245.0], [70.1, 1245.0], [70.2, 1246.0], [70.3, 1246.0], [70.4, 1247.0], [70.5, 1248.0], [70.6, 1249.0], [70.7, 1249.0], [70.8, 1249.0], [70.9, 1249.0], [71.0, 1249.0], [71.1, 1250.0], [71.2, 1250.0], [71.3, 1250.0], [71.4, 1251.0], [71.5, 1252.0], [71.6, 1252.0], [71.7, 1252.0], [71.8, 1253.0], [71.9, 1253.0], [72.0, 1253.0], [72.1, 1253.0], [72.2, 1254.0], [72.3, 1255.0], [72.4, 1255.0], [72.5, 1256.0], [72.6, 1256.0], [72.7, 1256.0], [72.8, 1256.0], [72.9, 1256.0], [73.0, 1257.0], [73.1, 1257.0], [73.2, 1257.0], [73.3, 1259.0], [73.4, 1259.0], [73.5, 1259.0], [73.6, 1260.0], [73.7, 1260.0], [73.8, 1262.0], [73.9, 1263.0], [74.0, 1266.0], [74.1, 1267.0], [74.2, 1269.0], [74.3, 1269.0], [74.4, 1271.0], [74.5, 1272.0], [74.6, 1273.0], [74.7, 1273.0], [74.8, 1273.0], [74.9, 1273.0], [75.0, 1274.0], [75.1, 1275.0], [75.2, 1275.0], [75.3, 1276.0], [75.4, 1278.0], [75.5, 1279.0], [75.6, 1279.0], [75.7, 1279.0], [75.8, 1279.0], [75.9, 1279.0], [76.0, 1282.0], [76.1, 1282.0], [76.2, 1283.0], [76.3, 1284.0], [76.4, 1285.0], [76.5, 1285.0], [76.6, 1288.0], [76.7, 1289.0], [76.8, 1289.0], [76.9, 1289.0], [77.0, 1290.0], [77.1, 1290.0], [77.2, 1291.0], [77.3, 1292.0], [77.4, 1292.0], [77.5, 1293.0], [77.6, 1294.0], [77.7, 1295.0], [77.8, 1296.0], [77.9, 1296.0], [78.0, 1297.0], [78.1, 1297.0], [78.2, 1298.0], [78.3, 1299.0], [78.4, 1300.0], [78.5, 1301.0], [78.6, 1303.0], [78.7, 1303.0], [78.8, 1306.0], [78.9, 1309.0], [79.0, 1311.0], [79.1, 1311.0], [79.2, 1312.0], [79.3, 1312.0], [79.4, 1314.0], [79.5, 1314.0], [79.6, 1317.0], [79.7, 1318.0], [79.8, 1320.0], [79.9, 1321.0], [80.0, 1322.0], [80.1, 1322.0], [80.2, 1324.0], [80.3, 1326.0], [80.4, 1328.0], [80.5, 1328.0], [80.6, 1329.0], [80.7, 1330.0], [80.8, 1330.0], [80.9, 1331.0], [81.0, 1332.0], [81.1, 1332.0], [81.2, 1333.0], [81.3, 1334.0], [81.4, 1334.0], [81.5, 1334.0], [81.6, 1338.0], [81.7, 1338.0], [81.8, 1341.0], [81.9, 1341.0], [82.0, 1344.0], [82.1, 1345.0], [82.2, 1347.0], [82.3, 1348.0], [82.4, 1348.0], [82.5, 1349.0], [82.6, 1350.0], [82.7, 1350.0], [82.8, 1350.0], [82.9, 1350.0], [83.0, 1350.0], [83.1, 1353.0], [83.2, 1353.0], [83.3, 1353.0], [83.4, 1356.0], [83.5, 1356.0], [83.6, 1356.0], [83.7, 1356.0], [83.8, 1356.0], [83.9, 1357.0], [84.0, 1357.0], [84.1, 1357.0], [84.2, 1358.0], [84.3, 1359.0], [84.4, 1360.0], [84.5, 1362.0], [84.6, 1362.0], [84.7, 1362.0], [84.8, 1366.0], [84.9, 1374.0], [85.0, 1375.0], [85.1, 1380.0], [85.2, 1381.0], [85.3, 1381.0], [85.4, 1381.0], [85.5, 1382.0], [85.6, 1383.0], [85.7, 1388.0], [85.8, 1391.0], [85.9, 1392.0], [86.0, 1394.0], [86.1, 1395.0], [86.2, 1395.0], [86.3, 1397.0], [86.4, 1398.0], [86.5, 1400.0], [86.6, 1401.0], [86.7, 1401.0], [86.8, 1401.0], [86.9, 1405.0], [87.0, 1405.0], [87.1, 1409.0], [87.2, 1409.0], [87.3, 1411.0], [87.4, 1412.0], [87.5, 1412.0], [87.6, 1413.0], [87.7, 1415.0], [87.8, 1418.0], [87.9, 1419.0], [88.0, 1419.0], [88.1, 1420.0], [88.2, 1422.0], [88.3, 1425.0], [88.4, 1426.0], [88.5, 1426.0], [88.6, 1427.0], [88.7, 1432.0], [88.8, 1436.0], [88.9, 1439.0], [89.0, 1440.0], [89.1, 1441.0], [89.2, 1443.0], [89.3, 1445.0], [89.4, 1445.0], [89.5, 1446.0], [89.6, 1448.0], [89.7, 1449.0], [89.8, 1451.0], [89.9, 1455.0], [90.0, 1456.0], [90.1, 1458.0], [90.2, 1460.0], [90.3, 1467.0], [90.4, 1467.0], [90.5, 1468.0], [90.6, 1469.0], [90.7, 1469.0], [90.8, 1472.0], [90.9, 1472.0], [91.0, 1475.0], [91.1, 1475.0], [91.2, 1476.0], [91.3, 1481.0], [91.4, 1482.0], [91.5, 1483.0], [91.6, 1488.0], [91.7, 1488.0], [91.8, 1488.0], [91.9, 1495.0], [92.0, 1495.0], [92.1, 1497.0], [92.2, 1500.0], [92.3, 1503.0], [92.4, 1506.0], [92.5, 1506.0], [92.6, 1507.0], [92.7, 1508.0], [92.8, 1509.0], [92.9, 1513.0], [93.0, 1513.0], [93.1, 1514.0], [93.2, 1519.0], [93.3, 1521.0], [93.4, 1521.0], [93.5, 1523.0], [93.6, 1524.0], [93.7, 1529.0], [93.8, 1529.0], [93.9, 1531.0], [94.0, 1531.0], [94.1, 1532.0], [94.2, 1537.0], [94.3, 1538.0], [94.4, 1540.0], [94.5, 1541.0], [94.6, 1544.0], [94.7, 1544.0], [94.8, 1545.0], [94.9, 1546.0], [95.0, 1550.0], [95.1, 1552.0], [95.2, 1555.0], [95.3, 1556.0], [95.4, 1561.0], [95.5, 1564.0], [95.6, 1565.0], [95.7, 1576.0], [95.8, 1576.0], [95.9, 1582.0], [96.0, 1582.0], [96.1, 1588.0], [96.2, 1590.0], [96.3, 1591.0], [96.4, 1597.0], [96.5, 1604.0], [96.6, 1606.0], [96.7, 1615.0], [96.8, 1626.0], [96.9, 1630.0], [97.0, 1643.0], [97.1, 1645.0], [97.2, 1646.0], [97.3, 1648.0], [97.4, 1648.0], [97.5, 1655.0], [97.6, 1657.0], [97.7, 1673.0], [97.8, 1683.0], [97.9, 1687.0], [98.0, 1688.0], [98.1, 1690.0], [98.2, 1692.0], [98.3, 1695.0], [98.4, 1723.0], [98.5, 1730.0], [98.6, 1743.0], [98.7, 1743.0], [98.8, 1752.0], [98.9, 1759.0], [99.0, 1868.0], [99.1, 1894.0], [99.2, 1909.0], [99.3, 1909.0], [99.4, 1921.0], [99.5, 1938.0], [99.6, 2091.0], [99.7, 2096.0], [99.8, 2776.0], [99.9, 3846.0], [100.0, 3846.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 368.0, "series": [{"data": [[1400.0, 2.0], [1500.0, 63.0], [1600.0, 260.0], [1700.0, 231.0], [1800.0, 125.0], [1900.0, 93.0], [2000.0, 60.0], [2100.0, 41.0], [2300.0, 12.0], [2200.0, 17.0], [2400.0, 9.0], [2500.0, 3.0], [2600.0, 3.0], [2700.0, 5.0], [2800.0, 3.0], [2900.0, 2.0], [3100.0, 2.0], [3300.0, 1.0], [3200.0, 3.0], [4000.0, 1.0], [4200.0, 1.0], [4800.0, 1.0], [5100.0, 1.0], [5200.0, 1.0], [5500.0, 3.0], [5700.0, 1.0], [5800.0, 1.0], [6100.0, 1.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[2200.0, 1.0], [600.0, 368.0], [2500.0, 1.0], [2600.0, 1.0], [700.0, 341.0], [2700.0, 1.0], [2800.0, 1.0], [800.0, 110.0], [900.0, 41.0], [1000.0, 24.0], [1100.0, 19.0], [1200.0, 5.0], [1300.0, 2.0], [1800.0, 1.0], [500.0, 15.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[2700.0, 1.0], [800.0, 5.0], [900.0, 135.0], [3800.0, 1.0], [1000.0, 254.0], [1100.0, 193.0], [1200.0, 138.0], [1300.0, 75.0], [1400.0, 52.0], [1500.0, 40.0], [1600.0, 18.0], [1700.0, 5.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 2.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1022.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1780.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1780.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1022.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.8018018018018, "minX": 1.70618406E12, "maxY": 25.0, "series": [{"data": [[1.70618418E12, 25.0], [1.70618412E12, 24.578616352201223], [1.70618424E12, 19.437647058823522], [1.70618406E12, 11.8018018018018]], "isOverall": false, "label": "25 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618424E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 671.0, "minX": 1.0, "maxY": 2010.3333333333333, "series": [{"data": [[2.0, 1614.0], [3.0, 1918.5], [4.0, 1756.0], [5.0, 1584.0], [6.0, 1763.2], [7.0, 1650.2], [8.0, 2010.3333333333333], [9.0, 1690.25], [10.0, 1629.8], [11.0, 1623.1666666666665], [12.0, 1715.111111111111], [13.0, 1622.8333333333335], [14.0, 1804.9999999999998], [15.0, 1676.5], [16.0, 1775.1666666666667], [1.0, 1609.0], [17.0, 1795.5499999999997], [18.0, 1865.857142857143], [19.0, 1669.5999999999997], [20.0, 1662.142857142857], [21.0, 1761.7647058823527], [22.0, 1814.4545454545455], [23.0, 1901.6153846153845], [24.0, 1813.3636363636363], [25.0, 1892.3852140077822]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[23.327695560253737, 1867.4059196617343]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[8.0, 700.5], [2.0, 671.0], [9.0, 722.0], [10.0, 677.0], [11.0, 733.2857142857143], [3.0, 700.5], [12.0, 716.3333333333334], [13.0, 684.0], [14.0, 681.0], [15.0, 693.3749999999999], [4.0, 674.0], [16.0, 740.8333333333333], [17.0, 706.6470588235293], [18.0, 713.1428571428572], [19.0, 697.0], [5.0, 672.0], [20.0, 689.2], [21.0, 710.4375], [22.0, 834.578947368421], [23.0, 850.875], [6.0, 762.8333333333334], [24.0, 738.8], [25.0, 764.9661898569578], [7.0, 772.5]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[23.512352309344784, 759.3931256713208]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 1029.3333333333333], [9.0, 971.5], [10.0, 988.75], [11.0, 1027.4444444444443], [12.0, 1087.3333333333335], [13.0, 1001.2], [14.0, 992.0], [15.0, 1028.375], [4.0, 1018.5], [16.0, 1054.9166666666667], [1.0, 963.0], [17.0, 1044.9166666666667], [18.0, 1131.222222222222], [19.0, 972.2727272727273], [5.0, 1108.0], [20.0, 1011.6], [21.0, 1168.5454545454545], [22.0, 1255.3333333333333], [23.0, 1237.636363636364], [6.0, 1252.75], [24.0, 1099.75], [25.0, 1199.5408560311284], [7.0, 1007.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[23.56108108108109, 1181.8270270270277]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2803.983333333333, "minX": 1.70618406E12, "maxY": 61578.88333333333, "series": [{"data": [[1.70618418E12, 28906.816666666666], [1.70618412E12, 27831.75], [1.70618424E12, 10582.983333333334], [1.70618406E12, 2803.983333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70618418E12, 61578.88333333333], [1.70618412E12, 59418.01666666667], [1.70618424E12, 22660.616666666665], [1.70618406E12, 5912.716666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618424E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 728.6052631578948, "minX": 1.70618406E12, "maxY": 1905.0962566844912, "series": [{"data": [[1.70618418E12, 1897.413157894737], [1.70618412E12, 1905.0962566844912], [1.70618424E12, 1726.4635761589404], [1.70618406E12, 1764.5609756097567]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618418E12, 757.3255208333329], [1.70618412E12, 771.8373983739834], [1.70618424E12, 740.6214285714279], [1.70618406E12, 728.6052631578948]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618418E12, 1198.6092544987148], [1.70618412E12, 1207.8945945945945], [1.70618424E12, 1097.4552238805975], [1.70618406E12, 1029.71875]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618424E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 728.5526315789474, "minX": 1.70618406E12, "maxY": 1905.0534759358284, "series": [{"data": [[1.70618418E12, 1897.3789473684212], [1.70618412E12, 1905.0534759358284], [1.70618424E12, 1726.4635761589404], [1.70618406E12, 1764.5121951219508]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618418E12, 757.2864583333333], [1.70618412E12, 771.8184281842816], [1.70618424E12, 740.6214285714279], [1.70618406E12, 728.5526315789474]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618418E12, 1198.5938303341902], [1.70618412E12, 1207.856756756756], [1.70618424E12, 1097.4402985074635], [1.70618406E12, 1029.625]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618424E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70618406E12, "maxY": 708.4842105263161, "series": [{"data": [[1.70618418E12, 708.4842105263161], [1.70618412E12, 699.4197860962568], [1.70618424E12, 612.2317880794706], [1.70618406E12, 663.7804878048779]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618418E12, 0.0], [1.70618412E12, 0.0], [1.70618424E12, 0.0], [1.70618406E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618418E12, 0.0], [1.70618412E12, 0.0], [1.70618424E12, 0.0], [1.70618406E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618424E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 560.0, "minX": 1.70618406E12, "maxY": 6120.0, "series": [{"data": [[1.70618418E12, 5537.0], [1.70618412E12, 6120.0], [1.70618424E12, 2219.0], [1.70618406E12, 2145.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70618418E12, 1908.6000000000001], [1.70618412E12, 1948.0], [1.70618424E12, 1809.4], [1.70618406E12, 1881.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70618418E12, 2839.4400000000005], [1.70618412E12, 2846.2399999999966], [1.70618424E12, 2077.6600000000008], [1.70618406E12, 2140.56]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70618418E12, 2076.3], [1.70618412E12, 2128.0999999999995], [1.70618424E12, 1899.8], [1.70618406E12, 2025.3999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70618418E12, 597.0], [1.70618412E12, 560.0], [1.70618424E12, 582.0], [1.70618406E12, 574.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70618418E12, 1156.0], [1.70618412E12, 1170.0], [1.70618424E12, 1071.0], [1.70618406E12, 1039.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618424E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 933.0, "minX": 1.0, "maxY": 1717.0, "series": [{"data": [[32.0, 1656.0], [3.0, 1007.5], [4.0, 1360.0], [5.0, 933.0], [6.0, 1232.0], [7.0, 1013.5], [8.0, 1081.5], [10.0, 1004.5], [11.0, 1077.0], [12.0, 1118.0], [13.0, 1038.0], [14.0, 1072.0], [15.0, 1166.0], [1.0, 1609.0], [16.0, 1157.5], [17.0, 1169.0], [18.0, 1145.0], [19.0, 1240.0], [20.0, 1133.0], [21.0, 1121.5], [22.0, 1247.0], [23.0, 1106.0], [24.0, 1030.5], [25.0, 1213.0], [26.0, 1717.0], [27.0, 1375.5], [28.0, 1450.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 933.0, "minX": 1.0, "maxY": 1717.0, "series": [{"data": [[32.0, 1656.0], [3.0, 1007.5], [4.0, 1360.0], [5.0, 933.0], [6.0, 1232.0], [7.0, 1013.5], [8.0, 1081.5], [10.0, 1004.0], [11.0, 1077.0], [12.0, 1118.0], [13.0, 1038.0], [14.0, 1072.0], [15.0, 1166.0], [1.0, 1609.0], [16.0, 1157.5], [17.0, 1169.0], [18.0, 1145.0], [19.0, 1240.0], [20.0, 1133.0], [21.0, 1121.5], [22.0, 1247.0], [23.0, 1106.0], [24.0, 1030.5], [25.0, 1213.0], [26.0, 1717.0], [27.0, 1375.5], [28.0, 1450.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 32.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.1166666666666667, "minX": 1.70618406E12, "maxY": 19.25, "series": [{"data": [[1.70618418E12, 19.25], [1.70618412E12, 18.666666666666668], [1.70618424E12, 6.666666666666667], [1.70618406E12, 2.1166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618424E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.85, "minX": 1.70618406E12, "maxY": 19.216666666666665, "series": [{"data": [[1.70618418E12, 19.216666666666665], [1.70618412E12, 18.55], [1.70618424E12, 7.083333333333333], [1.70618406E12, 1.85]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618424E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5333333333333333, "minX": 1.70618406E12, "maxY": 6.483333333333333, "series": [{"data": [[1.70618418E12, 6.483333333333333], [1.70618412E12, 6.166666666666667], [1.70618424E12, 2.2333333333333334], [1.70618406E12, 0.5333333333333333]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618418E12, 6.333333333333333], [1.70618412E12, 6.233333333333333], [1.70618424E12, 2.5166666666666666], [1.70618406E12, 0.6833333333333333]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618418E12, 6.4], [1.70618412E12, 6.15], [1.70618424E12, 2.3333333333333335], [1.70618406E12, 0.6333333333333333]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618424E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.85, "minX": 1.70618406E12, "maxY": 19.216666666666665, "series": [{"data": [[1.70618418E12, 19.216666666666665], [1.70618412E12, 18.55], [1.70618424E12, 7.083333333333333], [1.70618406E12, 1.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618424E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

