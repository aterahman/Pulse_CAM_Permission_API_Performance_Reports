/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 600.0, "minX": 0.0, "maxY": 4004.0, "series": [{"data": [[0.0, 1561.0], [0.1, 1561.0], [0.2, 1561.0], [0.3, 1561.0], [0.4, 1561.0], [0.5, 1563.0], [0.6, 1563.0], [0.7, 1563.0], [0.8, 1563.0], [0.9, 1571.0], [1.0, 1571.0], [1.1, 1571.0], [1.2, 1571.0], [1.3, 1571.0], [1.4, 1571.0], [1.5, 1571.0], [1.6, 1571.0], [1.7, 1574.0], [1.8, 1574.0], [1.9, 1574.0], [2.0, 1574.0], [2.1, 1580.0], [2.2, 1580.0], [2.3, 1580.0], [2.4, 1580.0], [2.5, 1585.0], [2.6, 1585.0], [2.7, 1585.0], [2.8, 1585.0], [2.9, 1585.0], [3.0, 1588.0], [3.1, 1588.0], [3.2, 1588.0], [3.3, 1588.0], [3.4, 1595.0], [3.5, 1595.0], [3.6, 1595.0], [3.7, 1595.0], [3.8, 1599.0], [3.9, 1599.0], [4.0, 1599.0], [4.1, 1599.0], [4.2, 1605.0], [4.3, 1605.0], [4.4, 1605.0], [4.5, 1605.0], [4.6, 1608.0], [4.7, 1608.0], [4.8, 1608.0], [4.9, 1608.0], [5.0, 1609.0], [5.1, 1609.0], [5.2, 1609.0], [5.3, 1609.0], [5.4, 1609.0], [5.5, 1614.0], [5.6, 1614.0], [5.7, 1614.0], [5.8, 1614.0], [5.9, 1619.0], [6.0, 1619.0], [6.1, 1619.0], [6.2, 1619.0], [6.3, 1620.0], [6.4, 1620.0], [6.5, 1620.0], [6.6, 1620.0], [6.7, 1621.0], [6.8, 1621.0], [6.9, 1621.0], [7.0, 1621.0], [7.1, 1621.0], [7.2, 1621.0], [7.3, 1621.0], [7.4, 1621.0], [7.5, 1621.0], [7.6, 1623.0], [7.7, 1623.0], [7.8, 1623.0], [7.9, 1623.0], [8.0, 1627.0], [8.1, 1627.0], [8.2, 1627.0], [8.3, 1627.0], [8.4, 1628.0], [8.5, 1628.0], [8.6, 1628.0], [8.7, 1628.0], [8.8, 1630.0], [8.9, 1630.0], [9.0, 1630.0], [9.1, 1630.0], [9.2, 1632.0], [9.3, 1632.0], [9.4, 1632.0], [9.5, 1632.0], [9.6, 1632.0], [9.7, 1632.0], [9.8, 1632.0], [9.9, 1632.0], [10.0, 1633.0], [10.1, 1633.0], [10.2, 1633.0], [10.3, 1633.0], [10.4, 1633.0], [10.5, 1633.0], [10.6, 1633.0], [10.7, 1633.0], [10.8, 1633.0], [10.9, 1634.0], [11.0, 1634.0], [11.1, 1634.0], [11.2, 1634.0], [11.3, 1634.0], [11.4, 1634.0], [11.5, 1634.0], [11.6, 1634.0], [11.7, 1635.0], [11.8, 1635.0], [11.9, 1635.0], [12.0, 1635.0], [12.1, 1636.0], [12.2, 1636.0], [12.3, 1636.0], [12.4, 1636.0], [12.5, 1636.0], [12.6, 1636.0], [12.7, 1636.0], [12.8, 1636.0], [12.9, 1636.0], [13.0, 1638.0], [13.1, 1638.0], [13.2, 1638.0], [13.3, 1638.0], [13.4, 1639.0], [13.5, 1639.0], [13.6, 1639.0], [13.7, 1639.0], [13.8, 1639.0], [13.9, 1639.0], [14.0, 1639.0], [14.1, 1639.0], [14.2, 1640.0], [14.3, 1640.0], [14.4, 1640.0], [14.5, 1640.0], [14.6, 1640.0], [14.7, 1640.0], [14.8, 1640.0], [14.9, 1640.0], [15.0, 1640.0], [15.1, 1641.0], [15.2, 1641.0], [15.3, 1641.0], [15.4, 1641.0], [15.5, 1641.0], [15.6, 1641.0], [15.7, 1641.0], [15.8, 1641.0], [15.9, 1641.0], [16.0, 1641.0], [16.1, 1641.0], [16.2, 1641.0], [16.3, 1644.0], [16.4, 1644.0], [16.5, 1644.0], [16.6, 1644.0], [16.7, 1645.0], [16.8, 1645.0], [16.9, 1645.0], [17.0, 1645.0], [17.1, 1645.0], [17.2, 1645.0], [17.3, 1645.0], [17.4, 1645.0], [17.5, 1647.0], [17.6, 1647.0], [17.7, 1647.0], [17.8, 1647.0], [17.9, 1647.0], [18.0, 1650.0], [18.1, 1650.0], [18.2, 1650.0], [18.3, 1650.0], [18.4, 1650.0], [18.5, 1650.0], [18.6, 1650.0], [18.7, 1650.0], [18.8, 1650.0], [18.9, 1650.0], [19.0, 1650.0], [19.1, 1650.0], [19.2, 1652.0], [19.3, 1652.0], [19.4, 1652.0], [19.5, 1652.0], [19.6, 1653.0], [19.7, 1653.0], [19.8, 1653.0], [19.9, 1653.0], [20.0, 1653.0], [20.1, 1654.0], [20.2, 1654.0], [20.3, 1654.0], [20.4, 1654.0], [20.5, 1657.0], [20.6, 1657.0], [20.7, 1657.0], [20.8, 1657.0], [20.9, 1658.0], [21.0, 1658.0], [21.1, 1658.0], [21.2, 1658.0], [21.3, 1658.0], [21.4, 1658.0], [21.5, 1658.0], [21.6, 1658.0], [21.7, 1658.0], [21.8, 1658.0], [21.9, 1658.0], [22.0, 1658.0], [22.1, 1659.0], [22.2, 1659.0], [22.3, 1659.0], [22.4, 1659.0], [22.5, 1659.0], [22.6, 1660.0], [22.7, 1660.0], [22.8, 1660.0], [22.9, 1660.0], [23.0, 1661.0], [23.1, 1661.0], [23.2, 1661.0], [23.3, 1661.0], [23.4, 1661.0], [23.5, 1661.0], [23.6, 1661.0], [23.7, 1661.0], [23.8, 1663.0], [23.9, 1663.0], [24.0, 1663.0], [24.1, 1663.0], [24.2, 1664.0], [24.3, 1664.0], [24.4, 1664.0], [24.5, 1664.0], [24.6, 1665.0], [24.7, 1665.0], [24.8, 1665.0], [24.9, 1665.0], [25.0, 1665.0], [25.1, 1666.0], [25.2, 1666.0], [25.3, 1666.0], [25.4, 1666.0], [25.5, 1667.0], [25.6, 1667.0], [25.7, 1667.0], [25.8, 1667.0], [25.9, 1670.0], [26.0, 1670.0], [26.1, 1670.0], [26.2, 1670.0], [26.3, 1671.0], [26.4, 1671.0], [26.5, 1671.0], [26.6, 1671.0], [26.7, 1671.0], [26.8, 1671.0], [26.9, 1671.0], [27.0, 1671.0], [27.1, 1673.0], [27.2, 1673.0], [27.3, 1673.0], [27.4, 1673.0], [27.5, 1673.0], [27.6, 1674.0], [27.7, 1674.0], [27.8, 1674.0], [27.9, 1674.0], [28.0, 1675.0], [28.1, 1675.0], [28.2, 1675.0], [28.3, 1675.0], [28.4, 1675.0], [28.5, 1675.0], [28.6, 1675.0], [28.7, 1675.0], [28.8, 1678.0], [28.9, 1678.0], [29.0, 1678.0], [29.1, 1678.0], [29.2, 1679.0], [29.3, 1679.0], [29.4, 1679.0], [29.5, 1679.0], [29.6, 1679.0], [29.7, 1679.0], [29.8, 1679.0], [29.9, 1679.0], [30.0, 1679.0], [30.1, 1681.0], [30.2, 1681.0], [30.3, 1681.0], [30.4, 1681.0], [30.5, 1682.0], [30.6, 1682.0], [30.7, 1682.0], [30.8, 1682.0], [30.9, 1683.0], [31.0, 1683.0], [31.1, 1683.0], [31.2, 1683.0], [31.3, 1686.0], [31.4, 1686.0], [31.5, 1686.0], [31.6, 1686.0], [31.7, 1686.0], [31.8, 1686.0], [31.9, 1686.0], [32.0, 1686.0], [32.1, 1689.0], [32.2, 1689.0], [32.3, 1689.0], [32.4, 1689.0], [32.5, 1689.0], [32.6, 1691.0], [32.7, 1691.0], [32.8, 1691.0], [32.9, 1691.0], [33.0, 1693.0], [33.1, 1693.0], [33.2, 1693.0], [33.3, 1693.0], [33.4, 1694.0], [33.5, 1694.0], [33.6, 1694.0], [33.7, 1694.0], [33.8, 1696.0], [33.9, 1696.0], [34.0, 1696.0], [34.1, 1696.0], [34.2, 1700.0], [34.3, 1700.0], [34.4, 1700.0], [34.5, 1700.0], [34.6, 1700.0], [34.7, 1700.0], [34.8, 1700.0], [34.9, 1700.0], [35.0, 1700.0], [35.1, 1701.0], [35.2, 1701.0], [35.3, 1701.0], [35.4, 1701.0], [35.5, 1703.0], [35.6, 1703.0], [35.7, 1703.0], [35.8, 1703.0], [35.9, 1704.0], [36.0, 1704.0], [36.1, 1704.0], [36.2, 1704.0], [36.3, 1705.0], [36.4, 1705.0], [36.5, 1705.0], [36.6, 1705.0], [36.7, 1706.0], [36.8, 1706.0], [36.9, 1706.0], [37.0, 1706.0], [37.1, 1707.0], [37.2, 1707.0], [37.3, 1707.0], [37.4, 1707.0], [37.5, 1707.0], [37.6, 1707.0], [37.7, 1707.0], [37.8, 1707.0], [37.9, 1707.0], [38.0, 1708.0], [38.1, 1708.0], [38.2, 1708.0], [38.3, 1708.0], [38.4, 1709.0], [38.5, 1709.0], [38.6, 1709.0], [38.7, 1709.0], [38.8, 1709.0], [38.9, 1709.0], [39.0, 1709.0], [39.1, 1709.0], [39.2, 1710.0], [39.3, 1710.0], [39.4, 1710.0], [39.5, 1710.0], [39.6, 1712.0], [39.7, 1712.0], [39.8, 1712.0], [39.9, 1712.0], [40.0, 1713.0], [40.1, 1713.0], [40.2, 1713.0], [40.3, 1713.0], [40.4, 1713.0], [40.5, 1716.0], [40.6, 1716.0], [40.7, 1716.0], [40.8, 1716.0], [40.9, 1716.0], [41.0, 1716.0], [41.1, 1716.0], [41.2, 1716.0], [41.3, 1716.0], [41.4, 1716.0], [41.5, 1716.0], [41.6, 1716.0], [41.7, 1716.0], [41.8, 1716.0], [41.9, 1716.0], [42.0, 1716.0], [42.1, 1718.0], [42.2, 1718.0], [42.3, 1718.0], [42.4, 1718.0], [42.5, 1726.0], [42.6, 1726.0], [42.7, 1726.0], [42.8, 1726.0], [42.9, 1726.0], [43.0, 1726.0], [43.1, 1726.0], [43.2, 1726.0], [43.3, 1726.0], [43.4, 1730.0], [43.5, 1730.0], [43.6, 1730.0], [43.7, 1730.0], [43.8, 1740.0], [43.9, 1740.0], [44.0, 1740.0], [44.1, 1740.0], [44.2, 1741.0], [44.3, 1741.0], [44.4, 1741.0], [44.5, 1741.0], [44.6, 1744.0], [44.7, 1744.0], [44.8, 1744.0], [44.9, 1744.0], [45.0, 1745.0], [45.1, 1745.0], [45.2, 1745.0], [45.3, 1745.0], [45.4, 1745.0], [45.5, 1745.0], [45.6, 1745.0], [45.7, 1745.0], [45.8, 1745.0], [45.9, 1748.0], [46.0, 1748.0], [46.1, 1748.0], [46.2, 1748.0], [46.3, 1749.0], [46.4, 1749.0], [46.5, 1749.0], [46.6, 1749.0], [46.7, 1750.0], [46.8, 1750.0], [46.9, 1750.0], [47.0, 1750.0], [47.1, 1751.0], [47.2, 1751.0], [47.3, 1751.0], [47.4, 1751.0], [47.5, 1752.0], [47.6, 1752.0], [47.7, 1752.0], [47.8, 1752.0], [47.9, 1752.0], [48.0, 1754.0], [48.1, 1754.0], [48.2, 1754.0], [48.3, 1754.0], [48.4, 1758.0], [48.5, 1758.0], [48.6, 1758.0], [48.7, 1758.0], [48.8, 1759.0], [48.9, 1759.0], [49.0, 1759.0], [49.1, 1759.0], [49.2, 1762.0], [49.3, 1762.0], [49.4, 1762.0], [49.5, 1762.0], [49.6, 1762.0], [49.7, 1762.0], [49.8, 1762.0], [49.9, 1762.0], [50.0, 1773.0], [50.1, 1773.0], [50.2, 1773.0], [50.3, 1773.0], [50.4, 1773.0], [50.5, 1776.0], [50.6, 1776.0], [50.7, 1776.0], [50.8, 1776.0], [50.9, 1778.0], [51.0, 1778.0], [51.1, 1778.0], [51.2, 1778.0], [51.3, 1782.0], [51.4, 1782.0], [51.5, 1782.0], [51.6, 1782.0], [51.7, 1783.0], [51.8, 1783.0], [51.9, 1783.0], [52.0, 1783.0], [52.1, 1784.0], [52.2, 1784.0], [52.3, 1784.0], [52.4, 1784.0], [52.5, 1784.0], [52.6, 1784.0], [52.7, 1784.0], [52.8, 1784.0], [52.9, 1784.0], [53.0, 1787.0], [53.1, 1787.0], [53.2, 1787.0], [53.3, 1787.0], [53.4, 1793.0], [53.5, 1793.0], [53.6, 1793.0], [53.7, 1793.0], [53.8, 1798.0], [53.9, 1798.0], [54.0, 1798.0], [54.1, 1798.0], [54.2, 1803.0], [54.3, 1803.0], [54.4, 1803.0], [54.5, 1803.0], [54.6, 1803.0], [54.7, 1803.0], [54.8, 1803.0], [54.9, 1803.0], [55.0, 1804.0], [55.1, 1804.0], [55.2, 1804.0], [55.3, 1804.0], [55.4, 1804.0], [55.5, 1808.0], [55.6, 1808.0], [55.7, 1808.0], [55.8, 1808.0], [55.9, 1810.0], [56.0, 1810.0], [56.1, 1810.0], [56.2, 1810.0], [56.3, 1812.0], [56.4, 1812.0], [56.5, 1812.0], [56.6, 1812.0], [56.7, 1813.0], [56.8, 1813.0], [56.9, 1813.0], [57.0, 1813.0], [57.1, 1819.0], [57.2, 1819.0], [57.3, 1819.0], [57.4, 1819.0], [57.5, 1824.0], [57.6, 1824.0], [57.7, 1824.0], [57.8, 1824.0], [57.9, 1824.0], [58.0, 1825.0], [58.1, 1825.0], [58.2, 1825.0], [58.3, 1825.0], [58.4, 1825.0], [58.5, 1825.0], [58.6, 1825.0], [58.7, 1825.0], [58.8, 1827.0], [58.9, 1827.0], [59.0, 1827.0], [59.1, 1827.0], [59.2, 1828.0], [59.3, 1828.0], [59.4, 1828.0], [59.5, 1828.0], [59.6, 1833.0], [59.7, 1833.0], [59.8, 1833.0], [59.9, 1833.0], [60.0, 1833.0], [60.1, 1833.0], [60.2, 1833.0], [60.3, 1833.0], [60.4, 1833.0], [60.5, 1834.0], [60.6, 1834.0], [60.7, 1834.0], [60.8, 1834.0], [60.9, 1834.0], [61.0, 1834.0], [61.1, 1834.0], [61.2, 1834.0], [61.3, 1835.0], [61.4, 1835.0], [61.5, 1835.0], [61.6, 1835.0], [61.7, 1838.0], [61.8, 1838.0], [61.9, 1838.0], [62.0, 1838.0], [62.1, 1839.0], [62.2, 1839.0], [62.3, 1839.0], [62.4, 1839.0], [62.5, 1846.0], [62.6, 1846.0], [62.7, 1846.0], [62.8, 1846.0], [62.9, 1846.0], [63.0, 1853.0], [63.1, 1853.0], [63.2, 1853.0], [63.3, 1853.0], [63.4, 1854.0], [63.5, 1854.0], [63.6, 1854.0], [63.7, 1854.0], [63.8, 1855.0], [63.9, 1855.0], [64.0, 1855.0], [64.1, 1855.0], [64.2, 1859.0], [64.3, 1859.0], [64.4, 1859.0], [64.5, 1859.0], [64.6, 1863.0], [64.7, 1863.0], [64.8, 1863.0], [64.9, 1863.0], [65.0, 1865.0], [65.1, 1865.0], [65.2, 1865.0], [65.3, 1865.0], [65.4, 1865.0], [65.5, 1867.0], [65.6, 1867.0], [65.7, 1867.0], [65.8, 1867.0], [65.9, 1870.0], [66.0, 1870.0], [66.1, 1870.0], [66.2, 1870.0], [66.3, 1870.0], [66.4, 1870.0], [66.5, 1870.0], [66.6, 1870.0], [66.7, 1870.0], [66.8, 1870.0], [66.9, 1870.0], [67.0, 1870.0], [67.1, 1872.0], [67.2, 1872.0], [67.3, 1872.0], [67.4, 1872.0], [67.5, 1873.0], [67.6, 1873.0], [67.7, 1873.0], [67.8, 1873.0], [67.9, 1873.0], [68.0, 1877.0], [68.1, 1877.0], [68.2, 1877.0], [68.3, 1877.0], [68.4, 1881.0], [68.5, 1881.0], [68.6, 1881.0], [68.7, 1881.0], [68.8, 1885.0], [68.9, 1885.0], [69.0, 1885.0], [69.1, 1885.0], [69.2, 1885.0], [69.3, 1885.0], [69.4, 1885.0], [69.5, 1885.0], [69.6, 1886.0], [69.7, 1886.0], [69.8, 1886.0], [69.9, 1886.0], [70.0, 1889.0], [70.1, 1889.0], [70.2, 1889.0], [70.3, 1889.0], [70.4, 1889.0], [70.5, 1891.0], [70.6, 1891.0], [70.7, 1891.0], [70.8, 1891.0], [70.9, 1898.0], [71.0, 1898.0], [71.1, 1898.0], [71.2, 1898.0], [71.3, 1900.0], [71.4, 1900.0], [71.5, 1900.0], [71.6, 1900.0], [71.7, 1901.0], [71.8, 1901.0], [71.9, 1901.0], [72.0, 1901.0], [72.1, 1910.0], [72.2, 1910.0], [72.3, 1910.0], [72.4, 1910.0], [72.5, 1913.0], [72.6, 1913.0], [72.7, 1913.0], [72.8, 1913.0], [72.9, 1913.0], [73.0, 1915.0], [73.1, 1915.0], [73.2, 1915.0], [73.3, 1915.0], [73.4, 1916.0], [73.5, 1916.0], [73.6, 1916.0], [73.7, 1916.0], [73.8, 1917.0], [73.9, 1917.0], [74.0, 1917.0], [74.1, 1917.0], [74.2, 1917.0], [74.3, 1917.0], [74.4, 1917.0], [74.5, 1917.0], [74.6, 1921.0], [74.7, 1921.0], [74.8, 1921.0], [74.9, 1921.0], [75.0, 1929.0], [75.1, 1929.0], [75.2, 1929.0], [75.3, 1929.0], [75.4, 1929.0], [75.5, 1935.0], [75.6, 1935.0], [75.7, 1935.0], [75.8, 1935.0], [75.9, 1938.0], [76.0, 1938.0], [76.1, 1938.0], [76.2, 1938.0], [76.3, 1954.0], [76.4, 1954.0], [76.5, 1954.0], [76.6, 1954.0], [76.7, 1954.0], [76.8, 1954.0], [76.9, 1954.0], [77.0, 1954.0], [77.1, 1966.0], [77.2, 1966.0], [77.3, 1966.0], [77.4, 1966.0], [77.5, 1966.0], [77.6, 1966.0], [77.7, 1966.0], [77.8, 1966.0], [77.9, 1966.0], [78.0, 1967.0], [78.1, 1967.0], [78.2, 1967.0], [78.3, 1967.0], [78.4, 1967.0], [78.5, 1967.0], [78.6, 1967.0], [78.7, 1967.0], [78.8, 1971.0], [78.9, 1971.0], [79.0, 1971.0], [79.1, 1971.0], [79.2, 1976.0], [79.3, 1976.0], [79.4, 1976.0], [79.5, 1976.0], [79.6, 1979.0], [79.7, 1979.0], [79.8, 1979.0], [79.9, 1979.0], [80.0, 1979.0], [80.1, 1982.0], [80.2, 1982.0], [80.3, 1982.0], [80.4, 1982.0], [80.5, 1982.0], [80.6, 1982.0], [80.7, 1982.0], [80.8, 1982.0], [80.9, 1987.0], [81.0, 1987.0], [81.1, 1987.0], [81.2, 1987.0], [81.3, 1987.0], [81.4, 1987.0], [81.5, 1987.0], [81.6, 1987.0], [81.7, 1989.0], [81.8, 1989.0], [81.9, 1989.0], [82.0, 1989.0], [82.1, 1990.0], [82.2, 1990.0], [82.3, 1990.0], [82.4, 1990.0], [82.5, 1990.0], [82.6, 1992.0], [82.7, 1992.0], [82.8, 1992.0], [82.9, 1992.0], [83.0, 1993.0], [83.1, 1993.0], [83.2, 1993.0], [83.3, 1993.0], [83.4, 2004.0], [83.5, 2004.0], [83.6, 2004.0], [83.7, 2004.0], [83.8, 2007.0], [83.9, 2007.0], [84.0, 2007.0], [84.1, 2007.0], [84.2, 2009.0], [84.3, 2009.0], [84.4, 2009.0], [84.5, 2009.0], [84.6, 2020.0], [84.7, 2020.0], [84.8, 2020.0], [84.9, 2020.0], [85.0, 2020.0], [85.1, 2026.0], [85.2, 2026.0], [85.3, 2026.0], [85.4, 2026.0], [85.5, 2034.0], [85.6, 2034.0], [85.7, 2034.0], [85.8, 2034.0], [85.9, 2037.0], [86.0, 2037.0], [86.1, 2037.0], [86.2, 2037.0], [86.3, 2038.0], [86.4, 2038.0], [86.5, 2038.0], [86.6, 2038.0], [86.7, 2040.0], [86.8, 2040.0], [86.9, 2040.0], [87.0, 2040.0], [87.1, 2051.0], [87.2, 2051.0], [87.3, 2051.0], [87.4, 2051.0], [87.5, 2051.0], [87.6, 2053.0], [87.7, 2053.0], [87.8, 2053.0], [87.9, 2053.0], [88.0, 2057.0], [88.1, 2057.0], [88.2, 2057.0], [88.3, 2057.0], [88.4, 2060.0], [88.5, 2060.0], [88.6, 2060.0], [88.7, 2060.0], [88.8, 2067.0], [88.9, 2067.0], [89.0, 2067.0], [89.1, 2067.0], [89.2, 2068.0], [89.3, 2068.0], [89.4, 2068.0], [89.5, 2068.0], [89.6, 2075.0], [89.7, 2075.0], [89.8, 2075.0], [89.9, 2075.0], [90.0, 2075.0], [90.1, 2082.0], [90.2, 2082.0], [90.3, 2082.0], [90.4, 2082.0], [90.5, 2082.0], [90.6, 2082.0], [90.7, 2082.0], [90.8, 2082.0], [90.9, 2131.0], [91.0, 2131.0], [91.1, 2131.0], [91.2, 2131.0], [91.3, 2136.0], [91.4, 2136.0], [91.5, 2136.0], [91.6, 2136.0], [91.7, 2146.0], [91.8, 2146.0], [91.9, 2146.0], [92.0, 2146.0], [92.1, 2183.0], [92.2, 2183.0], [92.3, 2183.0], [92.4, 2183.0], [92.5, 2183.0], [92.6, 2195.0], [92.7, 2195.0], [92.8, 2195.0], [92.9, 2195.0], [93.0, 2231.0], [93.1, 2231.0], [93.2, 2231.0], [93.3, 2231.0], [93.4, 2281.0], [93.5, 2281.0], [93.6, 2281.0], [93.7, 2281.0], [93.8, 2285.0], [93.9, 2285.0], [94.0, 2285.0], [94.1, 2285.0], [94.2, 2290.0], [94.3, 2290.0], [94.4, 2290.0], [94.5, 2290.0], [94.6, 2302.0], [94.7, 2302.0], [94.8, 2302.0], [94.9, 2302.0], [95.0, 2302.0], [95.1, 2330.0], [95.2, 2330.0], [95.3, 2330.0], [95.4, 2330.0], [95.5, 2354.0], [95.6, 2354.0], [95.7, 2354.0], [95.8, 2354.0], [95.9, 2428.0], [96.0, 2428.0], [96.1, 2428.0], [96.2, 2428.0], [96.3, 2444.0], [96.4, 2444.0], [96.5, 2444.0], [96.6, 2444.0], [96.7, 2454.0], [96.8, 2454.0], [96.9, 2454.0], [97.0, 2454.0], [97.1, 2455.0], [97.2, 2455.0], [97.3, 2455.0], [97.4, 2455.0], [97.5, 2455.0], [97.6, 2487.0], [97.7, 2487.0], [97.8, 2487.0], [97.9, 2487.0], [98.0, 2879.0], [98.1, 2879.0], [98.2, 2879.0], [98.3, 2879.0], [98.4, 3633.0], [98.5, 3633.0], [98.6, 3633.0], [98.7, 3633.0], [98.8, 3676.0], [98.9, 3676.0], [99.0, 3676.0], [99.1, 3676.0], [99.2, 3723.0], [99.3, 3723.0], [99.4, 3723.0], [99.5, 3723.0], [99.6, 4004.0], [99.7, 4004.0], [99.8, 4004.0], [99.9, 4004.0], [100.0, 4004.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 600.0], [0.1, 600.0], [0.2, 600.0], [0.3, 600.0], [0.4, 600.0], [0.5, 617.0], [0.6, 617.0], [0.7, 617.0], [0.8, 617.0], [0.9, 620.0], [1.0, 620.0], [1.1, 620.0], [1.2, 620.0], [1.3, 620.0], [1.4, 620.0], [1.5, 620.0], [1.6, 620.0], [1.7, 620.0], [1.8, 622.0], [1.9, 622.0], [2.0, 622.0], [2.1, 622.0], [2.2, 624.0], [2.3, 624.0], [2.4, 624.0], [2.5, 624.0], [2.6, 624.0], [2.7, 624.0], [2.8, 624.0], [2.9, 624.0], [3.0, 624.0], [3.1, 627.0], [3.2, 627.0], [3.3, 627.0], [3.4, 627.0], [3.5, 630.0], [3.6, 630.0], [3.7, 630.0], [3.8, 630.0], [3.9, 630.0], [4.0, 630.0], [4.1, 630.0], [4.2, 630.0], [4.3, 630.0], [4.4, 630.0], [4.5, 630.0], [4.6, 630.0], [4.7, 630.0], [4.8, 632.0], [4.9, 632.0], [5.0, 632.0], [5.1, 632.0], [5.2, 636.0], [5.3, 636.0], [5.4, 636.0], [5.5, 636.0], [5.6, 636.0], [5.7, 638.0], [5.8, 638.0], [5.9, 638.0], [6.0, 638.0], [6.1, 646.0], [6.2, 646.0], [6.3, 646.0], [6.4, 646.0], [6.5, 647.0], [6.6, 647.0], [6.7, 647.0], [6.8, 647.0], [6.9, 647.0], [7.0, 647.0], [7.1, 647.0], [7.2, 647.0], [7.3, 647.0], [7.4, 647.0], [7.5, 647.0], [7.6, 647.0], [7.7, 647.0], [7.8, 648.0], [7.9, 648.0], [8.0, 648.0], [8.1, 648.0], [8.2, 648.0], [8.3, 648.0], [8.4, 648.0], [8.5, 648.0], [8.6, 648.0], [8.7, 649.0], [8.8, 649.0], [8.9, 649.0], [9.0, 649.0], [9.1, 655.0], [9.2, 655.0], [9.3, 655.0], [9.4, 655.0], [9.5, 657.0], [9.6, 657.0], [9.7, 657.0], [9.8, 657.0], [9.9, 657.0], [10.0, 657.0], [10.1, 657.0], [10.2, 657.0], [10.3, 657.0], [10.4, 658.0], [10.5, 658.0], [10.6, 658.0], [10.7, 658.0], [10.8, 659.0], [10.9, 659.0], [11.0, 659.0], [11.1, 659.0], [11.2, 659.0], [11.3, 659.0], [11.4, 659.0], [11.5, 659.0], [11.6, 659.0], [11.7, 659.0], [11.8, 659.0], [11.9, 659.0], [12.0, 659.0], [12.1, 659.0], [12.2, 659.0], [12.3, 659.0], [12.4, 659.0], [12.5, 659.0], [12.6, 660.0], [12.7, 660.0], [12.8, 660.0], [12.9, 660.0], [13.0, 661.0], [13.1, 661.0], [13.2, 661.0], [13.3, 661.0], [13.4, 661.0], [13.5, 661.0], [13.6, 661.0], [13.7, 661.0], [13.8, 661.0], [13.9, 661.0], [14.0, 661.0], [14.1, 661.0], [14.2, 661.0], [14.3, 663.0], [14.4, 663.0], [14.5, 663.0], [14.6, 663.0], [14.7, 664.0], [14.8, 664.0], [14.9, 664.0], [15.0, 664.0], [15.1, 665.0], [15.2, 665.0], [15.3, 665.0], [15.4, 665.0], [15.5, 665.0], [15.6, 665.0], [15.7, 665.0], [15.8, 665.0], [15.9, 665.0], [16.0, 666.0], [16.1, 666.0], [16.2, 666.0], [16.3, 666.0], [16.4, 667.0], [16.5, 667.0], [16.6, 667.0], [16.7, 667.0], [16.8, 667.0], [16.9, 667.0], [17.0, 667.0], [17.1, 667.0], [17.2, 667.0], [17.3, 668.0], [17.4, 668.0], [17.5, 668.0], [17.6, 668.0], [17.7, 669.0], [17.8, 669.0], [17.9, 669.0], [18.0, 669.0], [18.1, 669.0], [18.2, 670.0], [18.3, 670.0], [18.4, 670.0], [18.5, 670.0], [18.6, 670.0], [18.7, 670.0], [18.8, 670.0], [18.9, 670.0], [19.0, 671.0], [19.1, 671.0], [19.2, 671.0], [19.3, 671.0], [19.4, 672.0], [19.5, 672.0], [19.6, 672.0], [19.7, 672.0], [19.8, 672.0], [19.9, 674.0], [20.0, 674.0], [20.1, 674.0], [20.2, 674.0], [20.3, 674.0], [20.4, 674.0], [20.5, 674.0], [20.6, 674.0], [20.7, 675.0], [20.8, 675.0], [20.9, 675.0], [21.0, 675.0], [21.1, 675.0], [21.2, 675.0], [21.3, 675.0], [21.4, 675.0], [21.5, 675.0], [21.6, 675.0], [21.7, 675.0], [21.8, 675.0], [21.9, 675.0], [22.0, 675.0], [22.1, 675.0], [22.2, 675.0], [22.3, 675.0], [22.4, 675.0], [22.5, 675.0], [22.6, 675.0], [22.7, 675.0], [22.8, 675.0], [22.9, 676.0], [23.0, 676.0], [23.1, 676.0], [23.2, 676.0], [23.3, 676.0], [23.4, 676.0], [23.5, 676.0], [23.6, 676.0], [23.7, 676.0], [23.8, 676.0], [23.9, 676.0], [24.0, 676.0], [24.1, 676.0], [24.2, 676.0], [24.3, 676.0], [24.4, 676.0], [24.5, 676.0], [24.6, 677.0], [24.7, 677.0], [24.8, 677.0], [24.9, 677.0], [25.0, 678.0], [25.1, 678.0], [25.2, 678.0], [25.3, 678.0], [25.4, 678.0], [25.5, 678.0], [25.6, 678.0], [25.7, 678.0], [25.8, 678.0], [25.9, 679.0], [26.0, 679.0], [26.1, 679.0], [26.2, 679.0], [26.3, 679.0], [26.4, 679.0], [26.5, 679.0], [26.6, 679.0], [26.7, 679.0], [26.8, 679.0], [26.9, 679.0], [27.0, 679.0], [27.1, 679.0], [27.2, 679.0], [27.3, 679.0], [27.4, 679.0], [27.5, 679.0], [27.6, 680.0], [27.7, 680.0], [27.8, 680.0], [27.9, 680.0], [28.0, 680.0], [28.1, 680.0], [28.2, 680.0], [28.3, 680.0], [28.4, 680.0], [28.5, 681.0], [28.6, 681.0], [28.7, 681.0], [28.8, 681.0], [28.9, 681.0], [29.0, 681.0], [29.1, 681.0], [29.2, 681.0], [29.3, 681.0], [29.4, 681.0], [29.5, 681.0], [29.6, 681.0], [29.7, 681.0], [29.8, 681.0], [29.9, 681.0], [30.0, 681.0], [30.1, 681.0], [30.2, 683.0], [30.3, 683.0], [30.4, 683.0], [30.5, 683.0], [30.6, 683.0], [30.7, 684.0], [30.8, 684.0], [30.9, 684.0], [31.0, 684.0], [31.1, 685.0], [31.2, 685.0], [31.3, 685.0], [31.4, 685.0], [31.5, 685.0], [31.6, 685.0], [31.7, 685.0], [31.8, 685.0], [31.9, 685.0], [32.0, 685.0], [32.1, 685.0], [32.2, 685.0], [32.3, 685.0], [32.4, 687.0], [32.5, 687.0], [32.6, 687.0], [32.7, 687.0], [32.8, 687.0], [32.9, 687.0], [33.0, 687.0], [33.1, 687.0], [33.2, 688.0], [33.3, 688.0], [33.4, 688.0], [33.5, 688.0], [33.6, 688.0], [33.7, 689.0], [33.8, 689.0], [33.9, 689.0], [34.0, 689.0], [34.1, 689.0], [34.2, 689.0], [34.3, 689.0], [34.4, 689.0], [34.5, 689.0], [34.6, 689.0], [34.7, 689.0], [34.8, 689.0], [34.9, 689.0], [35.0, 689.0], [35.1, 689.0], [35.2, 689.0], [35.3, 689.0], [35.4, 689.0], [35.5, 689.0], [35.6, 689.0], [35.7, 689.0], [35.8, 690.0], [35.9, 690.0], [36.0, 690.0], [36.1, 690.0], [36.2, 690.0], [36.3, 690.0], [36.4, 690.0], [36.5, 690.0], [36.6, 690.0], [36.7, 690.0], [36.8, 690.0], [36.9, 690.0], [37.0, 690.0], [37.1, 691.0], [37.2, 691.0], [37.3, 691.0], [37.4, 691.0], [37.5, 691.0], [37.6, 691.0], [37.7, 691.0], [37.8, 691.0], [37.9, 691.0], [38.0, 691.0], [38.1, 691.0], [38.2, 691.0], [38.3, 691.0], [38.4, 691.0], [38.5, 691.0], [38.6, 691.0], [38.7, 691.0], [38.8, 693.0], [38.9, 693.0], [39.0, 693.0], [39.1, 693.0], [39.2, 693.0], [39.3, 693.0], [39.4, 693.0], [39.5, 693.0], [39.6, 693.0], [39.7, 694.0], [39.8, 694.0], [39.9, 694.0], [40.0, 694.0], [40.1, 695.0], [40.2, 695.0], [40.3, 695.0], [40.4, 695.0], [40.5, 695.0], [40.6, 696.0], [40.7, 696.0], [40.8, 696.0], [40.9, 696.0], [41.0, 696.0], [41.1, 696.0], [41.2, 696.0], [41.3, 696.0], [41.4, 697.0], [41.5, 697.0], [41.6, 697.0], [41.7, 697.0], [41.8, 697.0], [41.9, 698.0], [42.0, 698.0], [42.1, 698.0], [42.2, 698.0], [42.3, 698.0], [42.4, 698.0], [42.5, 698.0], [42.6, 698.0], [42.7, 698.0], [42.8, 698.0], [42.9, 698.0], [43.0, 698.0], [43.1, 698.0], [43.2, 699.0], [43.3, 699.0], [43.4, 699.0], [43.5, 699.0], [43.6, 699.0], [43.7, 699.0], [43.8, 699.0], [43.9, 699.0], [44.0, 700.0], [44.1, 700.0], [44.2, 700.0], [44.3, 700.0], [44.4, 700.0], [44.5, 700.0], [44.6, 700.0], [44.7, 700.0], [44.8, 700.0], [44.9, 700.0], [45.0, 700.0], [45.1, 700.0], [45.2, 700.0], [45.3, 702.0], [45.4, 702.0], [45.5, 702.0], [45.6, 702.0], [45.7, 702.0], [45.8, 702.0], [45.9, 702.0], [46.0, 702.0], [46.1, 702.0], [46.2, 703.0], [46.3, 703.0], [46.4, 703.0], [46.5, 703.0], [46.6, 704.0], [46.7, 704.0], [46.8, 704.0], [46.9, 704.0], [47.0, 704.0], [47.1, 704.0], [47.2, 704.0], [47.3, 704.0], [47.4, 704.0], [47.5, 705.0], [47.6, 705.0], [47.7, 705.0], [47.8, 705.0], [47.9, 706.0], [48.0, 706.0], [48.1, 706.0], [48.2, 706.0], [48.3, 707.0], [48.4, 707.0], [48.5, 707.0], [48.6, 707.0], [48.7, 707.0], [48.8, 707.0], [48.9, 707.0], [49.0, 707.0], [49.1, 707.0], [49.2, 708.0], [49.3, 708.0], [49.4, 708.0], [49.5, 708.0], [49.6, 708.0], [49.7, 708.0], [49.8, 708.0], [49.9, 708.0], [50.0, 709.0], [50.1, 709.0], [50.2, 709.0], [50.3, 709.0], [50.4, 709.0], [50.5, 710.0], [50.6, 710.0], [50.7, 710.0], [50.8, 710.0], [50.9, 710.0], [51.0, 710.0], [51.1, 710.0], [51.2, 710.0], [51.3, 713.0], [51.4, 713.0], [51.5, 713.0], [51.6, 713.0], [51.7, 713.0], [51.8, 713.0], [51.9, 713.0], [52.0, 713.0], [52.1, 713.0], [52.2, 714.0], [52.3, 714.0], [52.4, 714.0], [52.5, 714.0], [52.6, 714.0], [52.7, 714.0], [52.8, 714.0], [52.9, 714.0], [53.0, 714.0], [53.1, 714.0], [53.2, 714.0], [53.3, 714.0], [53.4, 714.0], [53.5, 717.0], [53.6, 717.0], [53.7, 717.0], [53.8, 717.0], [53.9, 717.0], [54.0, 717.0], [54.1, 717.0], [54.2, 717.0], [54.3, 717.0], [54.4, 717.0], [54.5, 717.0], [54.6, 717.0], [54.7, 717.0], [54.8, 718.0], [54.9, 718.0], [55.0, 718.0], [55.1, 718.0], [55.2, 719.0], [55.3, 719.0], [55.4, 719.0], [55.5, 719.0], [55.6, 719.0], [55.7, 720.0], [55.8, 720.0], [55.9, 720.0], [56.0, 720.0], [56.1, 720.0], [56.2, 720.0], [56.3, 720.0], [56.4, 720.0], [56.5, 722.0], [56.6, 722.0], [56.7, 722.0], [56.8, 722.0], [56.9, 722.0], [57.0, 722.0], [57.1, 722.0], [57.2, 722.0], [57.3, 722.0], [57.4, 723.0], [57.5, 723.0], [57.6, 723.0], [57.7, 723.0], [57.8, 724.0], [57.9, 724.0], [58.0, 724.0], [58.1, 724.0], [58.2, 725.0], [58.3, 725.0], [58.4, 725.0], [58.5, 725.0], [58.6, 725.0], [58.7, 725.0], [58.8, 725.0], [58.9, 725.0], [59.0, 725.0], [59.1, 727.0], [59.2, 727.0], [59.3, 727.0], [59.4, 727.0], [59.5, 728.0], [59.6, 728.0], [59.7, 728.0], [59.8, 728.0], [59.9, 728.0], [60.0, 730.0], [60.1, 730.0], [60.2, 730.0], [60.3, 730.0], [60.4, 731.0], [60.5, 731.0], [60.6, 731.0], [60.7, 731.0], [60.8, 732.0], [60.9, 732.0], [61.0, 732.0], [61.1, 732.0], [61.2, 732.0], [61.3, 732.0], [61.4, 732.0], [61.5, 732.0], [61.6, 732.0], [61.7, 733.0], [61.8, 733.0], [61.9, 733.0], [62.0, 733.0], [62.1, 733.0], [62.2, 733.0], [62.3, 733.0], [62.4, 733.0], [62.5, 733.0], [62.6, 733.0], [62.7, 733.0], [62.8, 733.0], [62.9, 733.0], [63.0, 734.0], [63.1, 734.0], [63.2, 734.0], [63.3, 734.0], [63.4, 734.0], [63.5, 734.0], [63.6, 734.0], [63.7, 734.0], [63.8, 737.0], [63.9, 737.0], [64.0, 737.0], [64.1, 737.0], [64.2, 737.0], [64.3, 739.0], [64.4, 739.0], [64.5, 739.0], [64.6, 739.0], [64.7, 740.0], [64.8, 740.0], [64.9, 740.0], [65.0, 740.0], [65.1, 740.0], [65.2, 740.0], [65.3, 740.0], [65.4, 740.0], [65.5, 740.0], [65.6, 740.0], [65.7, 740.0], [65.8, 740.0], [65.9, 740.0], [66.0, 740.0], [66.1, 740.0], [66.2, 740.0], [66.3, 740.0], [66.4, 741.0], [66.5, 741.0], [66.6, 741.0], [66.7, 741.0], [66.8, 741.0], [66.9, 742.0], [67.0, 742.0], [67.1, 742.0], [67.2, 742.0], [67.3, 742.0], [67.4, 742.0], [67.5, 742.0], [67.6, 742.0], [67.7, 743.0], [67.8, 743.0], [67.9, 743.0], [68.0, 743.0], [68.1, 743.0], [68.2, 743.0], [68.3, 743.0], [68.4, 743.0], [68.5, 743.0], [68.6, 743.0], [68.7, 743.0], [68.8, 743.0], [68.9, 743.0], [69.0, 745.0], [69.1, 745.0], [69.2, 745.0], [69.3, 745.0], [69.4, 745.0], [69.5, 745.0], [69.6, 745.0], [69.7, 745.0], [69.8, 745.0], [69.9, 748.0], [70.0, 748.0], [70.1, 748.0], [70.2, 748.0], [70.3, 748.0], [70.4, 748.0], [70.5, 748.0], [70.6, 748.0], [70.7, 751.0], [70.8, 751.0], [70.9, 751.0], [71.0, 751.0], [71.1, 751.0], [71.2, 755.0], [71.3, 755.0], [71.4, 755.0], [71.5, 755.0], [71.6, 757.0], [71.7, 757.0], [71.8, 757.0], [71.9, 757.0], [72.0, 759.0], [72.1, 759.0], [72.2, 759.0], [72.3, 759.0], [72.4, 759.0], [72.5, 761.0], [72.6, 761.0], [72.7, 761.0], [72.8, 761.0], [72.9, 767.0], [73.0, 767.0], [73.1, 767.0], [73.2, 767.0], [73.3, 770.0], [73.4, 770.0], [73.5, 770.0], [73.6, 770.0], [73.7, 770.0], [73.8, 771.0], [73.9, 771.0], [74.0, 771.0], [74.1, 771.0], [74.2, 772.0], [74.3, 772.0], [74.4, 772.0], [74.5, 772.0], [74.6, 775.0], [74.7, 775.0], [74.8, 775.0], [74.9, 775.0], [75.0, 775.0], [75.1, 775.0], [75.2, 775.0], [75.3, 775.0], [75.4, 775.0], [75.5, 779.0], [75.6, 779.0], [75.7, 779.0], [75.8, 779.0], [75.9, 786.0], [76.0, 786.0], [76.1, 786.0], [76.2, 786.0], [76.3, 789.0], [76.4, 789.0], [76.5, 789.0], [76.6, 789.0], [76.7, 789.0], [76.8, 792.0], [76.9, 792.0], [77.0, 792.0], [77.1, 792.0], [77.2, 794.0], [77.3, 794.0], [77.4, 794.0], [77.5, 794.0], [77.6, 797.0], [77.7, 797.0], [77.8, 797.0], [77.9, 797.0], [78.0, 797.0], [78.1, 802.0], [78.2, 802.0], [78.3, 802.0], [78.4, 802.0], [78.5, 802.0], [78.6, 802.0], [78.7, 802.0], [78.8, 802.0], [78.9, 804.0], [79.0, 804.0], [79.1, 804.0], [79.2, 804.0], [79.3, 804.0], [79.4, 810.0], [79.5, 810.0], [79.6, 810.0], [79.7, 810.0], [79.8, 813.0], [79.9, 813.0], [80.0, 813.0], [80.1, 813.0], [80.2, 816.0], [80.3, 816.0], [80.4, 816.0], [80.5, 816.0], [80.6, 816.0], [80.7, 818.0], [80.8, 818.0], [80.9, 818.0], [81.0, 818.0], [81.1, 821.0], [81.2, 821.0], [81.3, 821.0], [81.4, 821.0], [81.5, 826.0], [81.6, 826.0], [81.7, 826.0], [81.8, 826.0], [81.9, 826.0], [82.0, 826.0], [82.1, 826.0], [82.2, 826.0], [82.3, 826.0], [82.4, 830.0], [82.5, 830.0], [82.6, 830.0], [82.7, 830.0], [82.8, 837.0], [82.9, 837.0], [83.0, 837.0], [83.1, 837.0], [83.2, 839.0], [83.3, 839.0], [83.4, 839.0], [83.5, 839.0], [83.6, 839.0], [83.7, 844.0], [83.8, 844.0], [83.9, 844.0], [84.0, 844.0], [84.1, 846.0], [84.2, 846.0], [84.3, 846.0], [84.4, 846.0], [84.5, 852.0], [84.6, 852.0], [84.7, 852.0], [84.8, 852.0], [84.9, 852.0], [85.0, 854.0], [85.1, 854.0], [85.2, 854.0], [85.3, 854.0], [85.4, 854.0], [85.5, 854.0], [85.6, 854.0], [85.7, 854.0], [85.8, 856.0], [85.9, 856.0], [86.0, 856.0], [86.1, 856.0], [86.2, 856.0], [86.3, 858.0], [86.4, 858.0], [86.5, 858.0], [86.6, 858.0], [86.7, 859.0], [86.8, 859.0], [86.9, 859.0], [87.0, 859.0], [87.1, 864.0], [87.2, 864.0], [87.3, 864.0], [87.4, 864.0], [87.5, 873.0], [87.6, 873.0], [87.7, 873.0], [87.8, 873.0], [87.9, 873.0], [88.0, 877.0], [88.1, 877.0], [88.2, 877.0], [88.3, 877.0], [88.4, 883.0], [88.5, 883.0], [88.6, 883.0], [88.7, 883.0], [88.8, 883.0], [88.9, 883.0], [89.0, 883.0], [89.1, 883.0], [89.2, 883.0], [89.3, 893.0], [89.4, 893.0], [89.5, 893.0], [89.6, 893.0], [89.7, 897.0], [89.8, 897.0], [89.9, 897.0], [90.0, 897.0], [90.1, 897.0], [90.2, 897.0], [90.3, 897.0], [90.4, 897.0], [90.5, 897.0], [90.6, 907.0], [90.7, 907.0], [90.8, 907.0], [90.9, 907.0], [91.0, 927.0], [91.1, 927.0], [91.2, 927.0], [91.3, 927.0], [91.4, 932.0], [91.5, 932.0], [91.6, 932.0], [91.7, 932.0], [91.8, 932.0], [91.9, 946.0], [92.0, 946.0], [92.1, 946.0], [92.2, 946.0], [92.3, 956.0], [92.4, 956.0], [92.5, 956.0], [92.6, 956.0], [92.7, 972.0], [92.8, 972.0], [92.9, 972.0], [93.0, 972.0], [93.1, 972.0], [93.2, 976.0], [93.3, 976.0], [93.4, 976.0], [93.5, 976.0], [93.6, 988.0], [93.7, 988.0], [93.8, 988.0], [93.9, 988.0], [94.0, 1021.0], [94.1, 1021.0], [94.2, 1021.0], [94.3, 1021.0], [94.4, 1089.0], [94.5, 1089.0], [94.6, 1089.0], [94.7, 1089.0], [94.8, 1089.0], [94.9, 1101.0], [95.0, 1101.0], [95.1, 1101.0], [95.2, 1101.0], [95.3, 1116.0], [95.4, 1116.0], [95.5, 1116.0], [95.6, 1116.0], [95.7, 1132.0], [95.8, 1132.0], [95.9, 1132.0], [96.0, 1132.0], [96.1, 1132.0], [96.2, 1170.0], [96.3, 1170.0], [96.4, 1170.0], [96.5, 1170.0], [96.6, 1222.0], [96.7, 1222.0], [96.8, 1222.0], [96.9, 1222.0], [97.0, 1261.0], [97.1, 1261.0], [97.2, 1261.0], [97.3, 1261.0], [97.4, 1261.0], [97.5, 1271.0], [97.6, 1271.0], [97.7, 1271.0], [97.8, 1271.0], [97.9, 1363.0], [98.0, 1363.0], [98.1, 1363.0], [98.2, 1363.0], [98.3, 1468.0], [98.4, 1468.0], [98.5, 1468.0], [98.6, 1468.0], [98.7, 1468.0], [98.8, 1469.0], [98.9, 1469.0], [99.0, 1469.0], [99.1, 1469.0], [99.2, 2297.0], [99.3, 2297.0], [99.4, 2297.0], [99.5, 2297.0], [99.6, 2382.0], [99.7, 2382.0], [99.8, 2382.0], [99.9, 2382.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 908.0], [0.1, 908.0], [0.2, 908.0], [0.3, 908.0], [0.4, 908.0], [0.5, 929.0], [0.6, 929.0], [0.7, 929.0], [0.8, 929.0], [0.9, 930.0], [1.0, 930.0], [1.1, 930.0], [1.2, 930.0], [1.3, 930.0], [1.4, 931.0], [1.5, 931.0], [1.6, 931.0], [1.7, 931.0], [1.8, 934.0], [1.9, 934.0], [2.0, 934.0], [2.1, 934.0], [2.2, 939.0], [2.3, 939.0], [2.4, 939.0], [2.5, 939.0], [2.6, 939.0], [2.7, 941.0], [2.8, 941.0], [2.9, 941.0], [3.0, 941.0], [3.1, 943.0], [3.2, 943.0], [3.3, 943.0], [3.4, 943.0], [3.5, 944.0], [3.6, 944.0], [3.7, 944.0], [3.8, 944.0], [3.9, 944.0], [4.0, 947.0], [4.1, 947.0], [4.2, 947.0], [4.3, 947.0], [4.4, 949.0], [4.5, 949.0], [4.6, 949.0], [4.7, 949.0], [4.8, 949.0], [4.9, 954.0], [5.0, 954.0], [5.1, 954.0], [5.2, 954.0], [5.3, 954.0], [5.4, 954.0], [5.5, 954.0], [5.6, 954.0], [5.7, 954.0], [5.8, 954.0], [5.9, 954.0], [6.0, 954.0], [6.1, 954.0], [6.2, 955.0], [6.3, 955.0], [6.4, 955.0], [6.5, 955.0], [6.6, 956.0], [6.7, 956.0], [6.8, 956.0], [6.9, 956.0], [7.0, 958.0], [7.1, 958.0], [7.2, 958.0], [7.3, 958.0], [7.4, 958.0], [7.5, 959.0], [7.6, 959.0], [7.7, 959.0], [7.8, 959.0], [7.9, 960.0], [8.0, 960.0], [8.1, 960.0], [8.2, 960.0], [8.3, 961.0], [8.4, 961.0], [8.5, 961.0], [8.6, 961.0], [8.7, 961.0], [8.8, 963.0], [8.9, 963.0], [9.0, 963.0], [9.1, 963.0], [9.2, 963.0], [9.3, 963.0], [9.4, 963.0], [9.5, 963.0], [9.6, 963.0], [9.7, 967.0], [9.8, 967.0], [9.9, 967.0], [10.0, 967.0], [10.1, 968.0], [10.2, 968.0], [10.3, 968.0], [10.4, 968.0], [10.5, 968.0], [10.6, 968.0], [10.7, 968.0], [10.8, 968.0], [10.9, 968.0], [11.0, 968.0], [11.1, 968.0], [11.2, 968.0], [11.3, 968.0], [11.4, 970.0], [11.5, 970.0], [11.6, 970.0], [11.7, 970.0], [11.8, 970.0], [11.9, 970.0], [12.0, 970.0], [12.1, 970.0], [12.2, 970.0], [12.3, 971.0], [12.4, 971.0], [12.5, 971.0], [12.6, 971.0], [12.7, 972.0], [12.8, 972.0], [12.9, 972.0], [13.0, 972.0], [13.1, 972.0], [13.2, 973.0], [13.3, 973.0], [13.4, 973.0], [13.5, 973.0], [13.6, 974.0], [13.7, 974.0], [13.8, 974.0], [13.9, 974.0], [14.0, 975.0], [14.1, 975.0], [14.2, 975.0], [14.3, 975.0], [14.4, 975.0], [14.5, 975.0], [14.6, 975.0], [14.7, 975.0], [14.8, 975.0], [14.9, 977.0], [15.0, 977.0], [15.1, 977.0], [15.2, 977.0], [15.3, 977.0], [15.4, 977.0], [15.5, 977.0], [15.6, 977.0], [15.7, 977.0], [15.8, 978.0], [15.9, 978.0], [16.0, 978.0], [16.1, 978.0], [16.2, 978.0], [16.3, 978.0], [16.4, 978.0], [16.5, 978.0], [16.6, 978.0], [16.7, 978.0], [16.8, 978.0], [16.9, 978.0], [17.0, 978.0], [17.1, 979.0], [17.2, 979.0], [17.3, 979.0], [17.4, 979.0], [17.5, 979.0], [17.6, 979.0], [17.7, 979.0], [17.8, 979.0], [17.9, 979.0], [18.0, 980.0], [18.1, 980.0], [18.2, 980.0], [18.3, 980.0], [18.4, 983.0], [18.5, 983.0], [18.6, 983.0], [18.7, 983.0], [18.8, 983.0], [18.9, 983.0], [19.0, 983.0], [19.1, 983.0], [19.2, 983.0], [19.3, 988.0], [19.4, 988.0], [19.5, 988.0], [19.6, 988.0], [19.7, 988.0], [19.8, 988.0], [19.9, 988.0], [20.0, 988.0], [20.1, 988.0], [20.2, 988.0], [20.3, 988.0], [20.4, 988.0], [20.5, 988.0], [20.6, 990.0], [20.7, 990.0], [20.8, 990.0], [20.9, 990.0], [21.0, 991.0], [21.1, 991.0], [21.2, 991.0], [21.3, 991.0], [21.4, 991.0], [21.5, 991.0], [21.6, 991.0], [21.7, 991.0], [21.8, 991.0], [21.9, 992.0], [22.0, 992.0], [22.1, 992.0], [22.2, 992.0], [22.3, 993.0], [22.4, 993.0], [22.5, 993.0], [22.6, 993.0], [22.7, 993.0], [22.8, 993.0], [22.9, 993.0], [23.0, 993.0], [23.1, 993.0], [23.2, 993.0], [23.3, 993.0], [23.4, 993.0], [23.5, 993.0], [23.6, 996.0], [23.7, 996.0], [23.8, 996.0], [23.9, 996.0], [24.0, 996.0], [24.1, 996.0], [24.2, 996.0], [24.3, 996.0], [24.4, 996.0], [24.5, 996.0], [24.6, 996.0], [24.7, 996.0], [24.8, 996.0], [24.9, 997.0], [25.0, 997.0], [25.1, 997.0], [25.2, 997.0], [25.3, 997.0], [25.4, 997.0], [25.5, 997.0], [25.6, 997.0], [25.7, 997.0], [25.8, 998.0], [25.9, 998.0], [26.0, 998.0], [26.1, 998.0], [26.2, 998.0], [26.3, 998.0], [26.4, 998.0], [26.5, 998.0], [26.6, 998.0], [26.7, 999.0], [26.8, 999.0], [26.9, 999.0], [27.0, 999.0], [27.1, 1000.0], [27.2, 1000.0], [27.3, 1000.0], [27.4, 1000.0], [27.5, 1000.0], [27.6, 1000.0], [27.7, 1000.0], [27.8, 1000.0], [27.9, 1000.0], [28.0, 1001.0], [28.1, 1001.0], [28.2, 1001.0], [28.3, 1001.0], [28.4, 1001.0], [28.5, 1001.0], [28.6, 1001.0], [28.7, 1001.0], [28.8, 1001.0], [28.9, 1001.0], [29.0, 1001.0], [29.1, 1001.0], [29.2, 1001.0], [29.3, 1004.0], [29.4, 1004.0], [29.5, 1004.0], [29.6, 1004.0], [29.7, 1004.0], [29.8, 1004.0], [29.9, 1004.0], [30.0, 1004.0], [30.1, 1004.0], [30.2, 1005.0], [30.3, 1005.0], [30.4, 1005.0], [30.5, 1005.0], [30.6, 1005.0], [30.7, 1005.0], [30.8, 1005.0], [30.9, 1005.0], [31.0, 1005.0], [31.1, 1006.0], [31.2, 1006.0], [31.3, 1006.0], [31.4, 1006.0], [31.5, 1007.0], [31.6, 1007.0], [31.7, 1007.0], [31.8, 1007.0], [31.9, 1008.0], [32.0, 1008.0], [32.1, 1008.0], [32.2, 1008.0], [32.3, 1008.0], [32.4, 1008.0], [32.5, 1008.0], [32.6, 1008.0], [32.7, 1008.0], [32.8, 1008.0], [32.9, 1008.0], [33.0, 1008.0], [33.1, 1008.0], [33.2, 1009.0], [33.3, 1009.0], [33.4, 1009.0], [33.5, 1009.0], [33.6, 1009.0], [33.7, 1010.0], [33.8, 1010.0], [33.9, 1010.0], [34.0, 1010.0], [34.1, 1010.0], [34.2, 1010.0], [34.3, 1010.0], [34.4, 1010.0], [34.5, 1010.0], [34.6, 1010.0], [34.7, 1010.0], [34.8, 1010.0], [34.9, 1010.0], [35.0, 1011.0], [35.1, 1011.0], [35.2, 1011.0], [35.3, 1011.0], [35.4, 1013.0], [35.5, 1013.0], [35.6, 1013.0], [35.7, 1013.0], [35.8, 1013.0], [35.9, 1016.0], [36.0, 1016.0], [36.1, 1016.0], [36.2, 1016.0], [36.3, 1016.0], [36.4, 1016.0], [36.5, 1016.0], [36.6, 1016.0], [36.7, 1018.0], [36.8, 1018.0], [36.9, 1018.0], [37.0, 1018.0], [37.1, 1018.0], [37.2, 1018.0], [37.3, 1018.0], [37.4, 1018.0], [37.5, 1018.0], [37.6, 1019.0], [37.7, 1019.0], [37.8, 1019.0], [37.9, 1019.0], [38.0, 1020.0], [38.1, 1020.0], [38.2, 1020.0], [38.3, 1020.0], [38.4, 1020.0], [38.5, 1021.0], [38.6, 1021.0], [38.7, 1021.0], [38.8, 1021.0], [38.9, 1022.0], [39.0, 1022.0], [39.1, 1022.0], [39.2, 1022.0], [39.3, 1022.0], [39.4, 1023.0], [39.5, 1023.0], [39.6, 1023.0], [39.7, 1023.0], [39.8, 1025.0], [39.9, 1025.0], [40.0, 1025.0], [40.1, 1025.0], [40.2, 1025.0], [40.3, 1025.0], [40.4, 1025.0], [40.5, 1025.0], [40.6, 1025.0], [40.7, 1026.0], [40.8, 1026.0], [40.9, 1026.0], [41.0, 1026.0], [41.1, 1026.0], [41.2, 1026.0], [41.3, 1026.0], [41.4, 1026.0], [41.5, 1028.0], [41.6, 1028.0], [41.7, 1028.0], [41.8, 1028.0], [41.9, 1028.0], [42.0, 1029.0], [42.1, 1029.0], [42.2, 1029.0], [42.3, 1029.0], [42.4, 1029.0], [42.5, 1029.0], [42.6, 1029.0], [42.7, 1029.0], [42.8, 1029.0], [42.9, 1029.0], [43.0, 1029.0], [43.1, 1029.0], [43.2, 1029.0], [43.3, 1030.0], [43.4, 1030.0], [43.5, 1030.0], [43.6, 1030.0], [43.7, 1031.0], [43.8, 1031.0], [43.9, 1031.0], [44.0, 1031.0], [44.1, 1031.0], [44.2, 1033.0], [44.3, 1033.0], [44.4, 1033.0], [44.5, 1033.0], [44.6, 1034.0], [44.7, 1034.0], [44.8, 1034.0], [44.9, 1034.0], [45.0, 1035.0], [45.1, 1035.0], [45.2, 1035.0], [45.3, 1035.0], [45.4, 1035.0], [45.5, 1035.0], [45.6, 1035.0], [45.7, 1035.0], [45.8, 1035.0], [45.9, 1035.0], [46.0, 1035.0], [46.1, 1035.0], [46.2, 1035.0], [46.3, 1038.0], [46.4, 1038.0], [46.5, 1038.0], [46.6, 1038.0], [46.7, 1038.0], [46.8, 1038.0], [46.9, 1038.0], [47.0, 1038.0], [47.1, 1038.0], [47.2, 1040.0], [47.3, 1040.0], [47.4, 1040.0], [47.5, 1040.0], [47.6, 1041.0], [47.7, 1041.0], [47.8, 1041.0], [47.9, 1041.0], [48.0, 1041.0], [48.1, 1042.0], [48.2, 1042.0], [48.3, 1042.0], [48.4, 1042.0], [48.5, 1043.0], [48.6, 1043.0], [48.7, 1043.0], [48.8, 1043.0], [48.9, 1043.0], [49.0, 1044.0], [49.1, 1044.0], [49.2, 1044.0], [49.3, 1044.0], [49.4, 1044.0], [49.5, 1044.0], [49.6, 1044.0], [49.7, 1044.0], [49.8, 1045.0], [49.9, 1045.0], [50.0, 1045.0], [50.1, 1045.0], [50.2, 1045.0], [50.3, 1045.0], [50.4, 1045.0], [50.5, 1045.0], [50.6, 1045.0], [50.7, 1049.0], [50.8, 1049.0], [50.9, 1049.0], [51.0, 1049.0], [51.1, 1051.0], [51.2, 1051.0], [51.3, 1051.0], [51.4, 1051.0], [51.5, 1051.0], [51.6, 1052.0], [51.7, 1052.0], [51.8, 1052.0], [51.9, 1052.0], [52.0, 1053.0], [52.1, 1053.0], [52.2, 1053.0], [52.3, 1053.0], [52.4, 1053.0], [52.5, 1054.0], [52.6, 1054.0], [52.7, 1054.0], [52.8, 1054.0], [52.9, 1055.0], [53.0, 1055.0], [53.1, 1055.0], [53.2, 1055.0], [53.3, 1056.0], [53.4, 1056.0], [53.5, 1056.0], [53.6, 1056.0], [53.7, 1056.0], [53.8, 1057.0], [53.9, 1057.0], [54.0, 1057.0], [54.1, 1057.0], [54.2, 1057.0], [54.3, 1057.0], [54.4, 1057.0], [54.5, 1057.0], [54.6, 1057.0], [54.7, 1057.0], [54.8, 1057.0], [54.9, 1057.0], [55.0, 1057.0], [55.1, 1059.0], [55.2, 1059.0], [55.3, 1059.0], [55.4, 1059.0], [55.5, 1059.0], [55.6, 1059.0], [55.7, 1059.0], [55.8, 1059.0], [55.9, 1059.0], [56.0, 1059.0], [56.1, 1059.0], [56.2, 1059.0], [56.3, 1059.0], [56.4, 1059.0], [56.5, 1059.0], [56.6, 1059.0], [56.7, 1059.0], [56.8, 1061.0], [56.9, 1061.0], [57.0, 1061.0], [57.1, 1061.0], [57.2, 1061.0], [57.3, 1062.0], [57.4, 1062.0], [57.5, 1062.0], [57.6, 1062.0], [57.7, 1062.0], [57.8, 1062.0], [57.9, 1062.0], [58.0, 1062.0], [58.1, 1064.0], [58.2, 1064.0], [58.3, 1064.0], [58.4, 1064.0], [58.5, 1064.0], [58.6, 1065.0], [58.7, 1065.0], [58.8, 1065.0], [58.9, 1065.0], [59.0, 1066.0], [59.1, 1066.0], [59.2, 1066.0], [59.3, 1066.0], [59.4, 1068.0], [59.5, 1068.0], [59.6, 1068.0], [59.7, 1068.0], [59.8, 1068.0], [59.9, 1068.0], [60.0, 1068.0], [60.1, 1068.0], [60.2, 1068.0], [60.3, 1070.0], [60.4, 1070.0], [60.5, 1070.0], [60.6, 1070.0], [60.7, 1071.0], [60.8, 1071.0], [60.9, 1071.0], [61.0, 1071.0], [61.1, 1071.0], [61.2, 1073.0], [61.3, 1073.0], [61.4, 1073.0], [61.5, 1073.0], [61.6, 1075.0], [61.7, 1075.0], [61.8, 1075.0], [61.9, 1075.0], [62.0, 1075.0], [62.1, 1076.0], [62.2, 1076.0], [62.3, 1076.0], [62.4, 1076.0], [62.5, 1078.0], [62.6, 1078.0], [62.7, 1078.0], [62.8, 1078.0], [62.9, 1078.0], [63.0, 1078.0], [63.1, 1078.0], [63.2, 1078.0], [63.3, 1078.0], [63.4, 1079.0], [63.5, 1079.0], [63.6, 1079.0], [63.7, 1079.0], [63.8, 1080.0], [63.9, 1080.0], [64.0, 1080.0], [64.1, 1080.0], [64.2, 1081.0], [64.3, 1081.0], [64.4, 1081.0], [64.5, 1081.0], [64.6, 1081.0], [64.7, 1083.0], [64.8, 1083.0], [64.9, 1083.0], [65.0, 1083.0], [65.1, 1085.0], [65.2, 1085.0], [65.3, 1085.0], [65.4, 1085.0], [65.5, 1085.0], [65.6, 1088.0], [65.7, 1088.0], [65.8, 1088.0], [65.9, 1088.0], [66.0, 1089.0], [66.1, 1089.0], [66.2, 1089.0], [66.3, 1089.0], [66.4, 1094.0], [66.5, 1094.0], [66.6, 1094.0], [66.7, 1094.0], [66.8, 1094.0], [66.9, 1094.0], [67.0, 1094.0], [67.1, 1094.0], [67.2, 1094.0], [67.3, 1095.0], [67.4, 1095.0], [67.5, 1095.0], [67.6, 1095.0], [67.7, 1097.0], [67.8, 1097.0], [67.9, 1097.0], [68.0, 1097.0], [68.1, 1097.0], [68.2, 1098.0], [68.3, 1098.0], [68.4, 1098.0], [68.5, 1098.0], [68.6, 1098.0], [68.7, 1098.0], [68.8, 1098.0], [68.9, 1098.0], [69.0, 1099.0], [69.1, 1099.0], [69.2, 1099.0], [69.3, 1099.0], [69.4, 1099.0], [69.5, 1100.0], [69.6, 1100.0], [69.7, 1100.0], [69.8, 1100.0], [69.9, 1100.0], [70.0, 1100.0], [70.1, 1100.0], [70.2, 1100.0], [70.3, 1100.0], [70.4, 1103.0], [70.5, 1103.0], [70.6, 1103.0], [70.7, 1103.0], [70.8, 1104.0], [70.9, 1104.0], [71.0, 1104.0], [71.1, 1104.0], [71.2, 1106.0], [71.3, 1106.0], [71.4, 1106.0], [71.5, 1106.0], [71.6, 1106.0], [71.7, 1106.0], [71.8, 1106.0], [71.9, 1106.0], [72.0, 1106.0], [72.1, 1110.0], [72.2, 1110.0], [72.3, 1110.0], [72.4, 1110.0], [72.5, 1110.0], [72.6, 1110.0], [72.7, 1110.0], [72.8, 1110.0], [72.9, 1110.0], [73.0, 1111.0], [73.1, 1111.0], [73.2, 1111.0], [73.3, 1111.0], [73.4, 1111.0], [73.5, 1111.0], [73.6, 1111.0], [73.7, 1111.0], [73.8, 1111.0], [73.9, 1111.0], [74.0, 1111.0], [74.1, 1111.0], [74.2, 1111.0], [74.3, 1117.0], [74.4, 1117.0], [74.5, 1117.0], [74.6, 1117.0], [74.7, 1122.0], [74.8, 1122.0], [74.9, 1122.0], [75.0, 1122.0], [75.1, 1122.0], [75.2, 1123.0], [75.3, 1123.0], [75.4, 1123.0], [75.5, 1123.0], [75.6, 1127.0], [75.7, 1127.0], [75.8, 1127.0], [75.9, 1127.0], [76.0, 1130.0], [76.1, 1130.0], [76.2, 1130.0], [76.3, 1130.0], [76.4, 1130.0], [76.5, 1131.0], [76.6, 1131.0], [76.7, 1131.0], [76.8, 1131.0], [76.9, 1132.0], [77.0, 1132.0], [77.1, 1132.0], [77.2, 1132.0], [77.3, 1134.0], [77.4, 1134.0], [77.5, 1134.0], [77.6, 1134.0], [77.7, 1134.0], [77.8, 1138.0], [77.9, 1138.0], [78.0, 1138.0], [78.1, 1138.0], [78.2, 1139.0], [78.3, 1139.0], [78.4, 1139.0], [78.5, 1139.0], [78.6, 1139.0], [78.7, 1139.0], [78.8, 1139.0], [78.9, 1139.0], [79.0, 1139.0], [79.1, 1142.0], [79.2, 1142.0], [79.3, 1142.0], [79.4, 1142.0], [79.5, 1145.0], [79.6, 1145.0], [79.7, 1145.0], [79.8, 1145.0], [79.9, 1145.0], [80.0, 1147.0], [80.1, 1147.0], [80.2, 1147.0], [80.3, 1147.0], [80.4, 1149.0], [80.5, 1149.0], [80.6, 1149.0], [80.7, 1149.0], [80.8, 1149.0], [80.9, 1149.0], [81.0, 1149.0], [81.1, 1149.0], [81.2, 1149.0], [81.3, 1150.0], [81.4, 1150.0], [81.5, 1150.0], [81.6, 1150.0], [81.7, 1152.0], [81.8, 1152.0], [81.9, 1152.0], [82.0, 1152.0], [82.1, 1157.0], [82.2, 1157.0], [82.3, 1157.0], [82.4, 1157.0], [82.5, 1157.0], [82.6, 1158.0], [82.7, 1158.0], [82.8, 1158.0], [82.9, 1158.0], [83.0, 1161.0], [83.1, 1161.0], [83.2, 1161.0], [83.3, 1161.0], [83.4, 1161.0], [83.5, 1163.0], [83.6, 1163.0], [83.7, 1163.0], [83.8, 1163.0], [83.9, 1168.0], [84.0, 1168.0], [84.1, 1168.0], [84.2, 1168.0], [84.3, 1168.0], [84.4, 1168.0], [84.5, 1168.0], [84.6, 1168.0], [84.7, 1168.0], [84.8, 1190.0], [84.9, 1190.0], [85.0, 1190.0], [85.1, 1190.0], [85.2, 1192.0], [85.3, 1192.0], [85.4, 1192.0], [85.5, 1192.0], [85.6, 1192.0], [85.7, 1192.0], [85.8, 1192.0], [85.9, 1192.0], [86.0, 1192.0], [86.1, 1194.0], [86.2, 1194.0], [86.3, 1194.0], [86.4, 1194.0], [86.5, 1197.0], [86.6, 1197.0], [86.7, 1197.0], [86.8, 1197.0], [86.9, 1202.0], [87.0, 1202.0], [87.1, 1202.0], [87.2, 1202.0], [87.3, 1202.0], [87.4, 1202.0], [87.5, 1202.0], [87.6, 1202.0], [87.7, 1202.0], [87.8, 1203.0], [87.9, 1203.0], [88.0, 1203.0], [88.1, 1203.0], [88.2, 1203.0], [88.3, 1206.0], [88.4, 1206.0], [88.5, 1206.0], [88.6, 1206.0], [88.7, 1206.0], [88.8, 1206.0], [88.9, 1206.0], [89.0, 1206.0], [89.1, 1210.0], [89.2, 1210.0], [89.3, 1210.0], [89.4, 1210.0], [89.5, 1210.0], [89.6, 1213.0], [89.7, 1213.0], [89.8, 1213.0], [89.9, 1213.0], [90.0, 1218.0], [90.1, 1218.0], [90.2, 1218.0], [90.3, 1218.0], [90.4, 1233.0], [90.5, 1233.0], [90.6, 1233.0], [90.7, 1233.0], [90.8, 1233.0], [90.9, 1242.0], [91.0, 1242.0], [91.1, 1242.0], [91.2, 1242.0], [91.3, 1247.0], [91.4, 1247.0], [91.5, 1247.0], [91.6, 1247.0], [91.7, 1247.0], [91.8, 1268.0], [91.9, 1268.0], [92.0, 1268.0], [92.1, 1268.0], [92.2, 1278.0], [92.3, 1278.0], [92.4, 1278.0], [92.5, 1278.0], [92.6, 1279.0], [92.7, 1279.0], [92.8, 1279.0], [92.9, 1279.0], [93.0, 1279.0], [93.1, 1287.0], [93.2, 1287.0], [93.3, 1287.0], [93.4, 1287.0], [93.5, 1288.0], [93.6, 1288.0], [93.7, 1288.0], [93.8, 1288.0], [93.9, 1291.0], [94.0, 1291.0], [94.1, 1291.0], [94.2, 1291.0], [94.3, 1291.0], [94.4, 1295.0], [94.5, 1295.0], [94.6, 1295.0], [94.7, 1295.0], [94.8, 1303.0], [94.9, 1303.0], [95.0, 1303.0], [95.1, 1303.0], [95.2, 1305.0], [95.3, 1305.0], [95.4, 1305.0], [95.5, 1305.0], [95.6, 1305.0], [95.7, 1316.0], [95.8, 1316.0], [95.9, 1316.0], [96.0, 1316.0], [96.1, 1320.0], [96.2, 1320.0], [96.3, 1320.0], [96.4, 1320.0], [96.5, 1320.0], [96.6, 1327.0], [96.7, 1327.0], [96.8, 1327.0], [96.9, 1327.0], [97.0, 1352.0], [97.1, 1352.0], [97.2, 1352.0], [97.3, 1352.0], [97.4, 1362.0], [97.5, 1362.0], [97.6, 1362.0], [97.7, 1362.0], [97.8, 1362.0], [97.9, 1389.0], [98.0, 1389.0], [98.1, 1389.0], [98.2, 1389.0], [98.3, 1393.0], [98.4, 1393.0], [98.5, 1393.0], [98.6, 1393.0], [98.7, 1444.0], [98.8, 1444.0], [98.9, 1444.0], [99.0, 1444.0], [99.1, 1444.0], [99.2, 1593.0], [99.3, 1593.0], [99.4, 1593.0], [99.5, 1593.0], [99.6, 1982.0], [99.7, 1982.0], [99.8, 1982.0], [99.9, 1982.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 102.0, "series": [{"data": [[2100.0, 5.0], [2200.0, 4.0], [2300.0, 3.0], [2400.0, 5.0], [2800.0, 1.0], [3700.0, 1.0], [3600.0, 2.0], [4000.0, 1.0], [1500.0, 10.0], [1600.0, 72.0], [1700.0, 48.0], [1800.0, 41.0], [1900.0, 29.0], [2000.0, 18.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1100.0, 4.0], [2200.0, 1.0], [2300.0, 1.0], [1200.0, 3.0], [600.0, 102.0], [1300.0, 1.0], [700.0, 79.0], [1400.0, 2.0], [800.0, 29.0], [900.0, 8.0], [1000.0, 2.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1100.0, 40.0], [1200.0, 18.0], [1300.0, 9.0], [1400.0, 1.0], [1500.0, 1.0], [900.0, 62.0], [1900.0, 1.0], [1000.0, 97.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 244.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 457.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 457.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 244.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.954838709677416, "minX": 1.7061921E12, "maxY": 14.098901098901102, "series": [{"data": [[1.70619216E12, 14.098901098901102], [1.7061921E12, 12.954838709677416]], "isOverall": false, "label": "15 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619216E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 646.0, "minX": 1.0, "maxY": 2330.0, "series": [{"data": [[8.0, 2058.0], [9.0, 2091.0], [10.0, 1689.0], [11.0, 1962.875], [3.0, 2217.6666666666665], [12.0, 2032.2857142857142], [13.0, 1783.25], [14.0, 1626.0], [15.0, 1828.1813186813195], [4.0, 1982.5], [1.0, 2330.0], [5.0, 2055.5], [6.0, 1877.4], [7.0, 1965.3333333333333]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[13.687500000000004, 1851.8]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[8.0, 851.0], [2.0, 661.0], [9.0, 752.0], [11.0, 978.3333333333335], [12.0, 699.4545454545454], [3.0, 646.0], [13.0, 699.6666666666666], [14.0, 668.6666666666666], [15.0, 758.9459459459463], [4.0, 897.0], [5.0, 1271.0], [6.0, 740.4], [7.0, 814.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[13.905172413793107, 766.1163793103447]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 990.0], [2.0, 1094.5], [9.0, 1063.5], [10.0, 1019.75], [11.0, 1027.875], [12.0, 1129.5], [13.0, 1054.888888888889], [14.0, 981.6666666666666], [15.0, 1082.5300546448086], [4.0, 1194.0], [5.0, 968.0], [6.0, 1043.5], [7.0, 1110.5]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[13.951965065502181, 1076.1091703056768]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 15.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3981.1833333333334, "minX": 1.7061921E12, "maxY": 29146.633333333335, "series": [{"data": [[1.70619216E12, 14107.833333333334], [1.7061921E12, 3981.1833333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70619216E12, 29146.633333333335], [1.7061921E12, 8261.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619216E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 749.3701657458561, "minX": 1.7061921E12, "maxY": 1916.160714285714, "series": [{"data": [[1.70619216E12, 1832.2119565217388], [1.7061921E12, 1916.160714285714]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619216E12, 749.3701657458561], [1.7061921E12, 825.5490196078432]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619216E12, 1077.8066298342535], [1.7061921E12, 1069.7083333333335]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619216E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 749.3204419889504, "minX": 1.7061921E12, "maxY": 1916.0714285714284, "series": [{"data": [[1.70619216E12, 1832.1304347826087], [1.7061921E12, 1916.0714285714284]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619216E12, 749.3204419889504], [1.7061921E12, 825.4509803921571]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619216E12, 1077.7458563535904], [1.7061921E12, 1069.5416666666667]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619216E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7061921E12, "maxY": 744.3571428571427, "series": [{"data": [[1.70619216E12, 680.4836956521743], [1.7061921E12, 744.3571428571427]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619216E12, 0.0], [1.7061921E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619216E12, 0.0], [1.7061921E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619216E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 600.0, "minX": 1.7061921E12, "maxY": 4004.0, "series": [{"data": [[1.70619216E12, 4004.0], [1.7061921E12, 3723.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70619216E12, 1885.3], [1.7061921E12, 2004.0000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70619216E12, 2283.4699999999975], [1.7061921E12, 3250.359999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70619216E12, 2000.1499999999996], [1.7061921E12, 2368.7999999999993]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70619216E12, 600.0], [1.7061921E12, 624.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70619216E12, 1062.5], [1.7061921E12, 1062.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619216E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 998.0, "minX": 1.0, "maxY": 2183.0, "series": [{"data": [[8.0, 1165.5], [9.0, 1011.5], [10.0, 1019.5], [11.0, 1068.0], [3.0, 1147.5], [12.0, 1059.0], [13.0, 1051.0], [14.0, 1047.5], [15.0, 1057.0], [1.0, 2183.0], [4.0, 999.0], [16.0, 1201.5], [17.0, 1111.0], [18.0, 998.5], [19.0, 998.0], [5.0, 1103.0], [6.0, 1095.0], [7.0, 1469.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 997.0, "minX": 1.0, "maxY": 2183.0, "series": [{"data": [[8.0, 1165.5], [9.0, 1011.5], [10.0, 1019.0], [11.0, 1068.0], [3.0, 1147.5], [12.0, 1059.0], [13.0, 1051.0], [14.0, 1047.5], [15.0, 1056.0], [1.0, 2183.0], [4.0, 998.5], [16.0, 1201.5], [17.0, 1111.0], [18.0, 998.5], [19.0, 997.0], [5.0, 1103.0], [6.0, 1095.0], [7.0, 1469.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 19.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.8333333333333335, "minX": 1.7061921E12, "maxY": 8.85, "series": [{"data": [[1.70619216E12, 8.85], [1.7061921E12, 2.8333333333333335]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619216E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.5833333333333335, "minX": 1.7061921E12, "maxY": 9.1, "series": [{"data": [[1.70619216E12, 9.1], [1.7061921E12, 2.5833333333333335]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619216E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8, "minX": 1.7061921E12, "maxY": 3.066666666666667, "series": [{"data": [[1.70619216E12, 3.0166666666666666], [1.7061921E12, 0.8]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70619216E12, 3.066666666666667], [1.7061921E12, 0.9333333333333333]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70619216E12, 3.0166666666666666], [1.7061921E12, 0.85]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619216E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.5833333333333335, "minX": 1.7061921E12, "maxY": 9.1, "series": [{"data": [[1.70619216E12, 9.1], [1.7061921E12, 2.5833333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619216E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

