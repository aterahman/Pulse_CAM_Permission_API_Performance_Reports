/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 596.0, "minX": 0.0, "maxY": 4772.0, "series": [{"data": [[0.0, 1539.0], [0.1, 1539.0], [0.2, 1548.0], [0.3, 1560.0], [0.4, 1574.0], [0.5, 1577.0], [0.6, 1579.0], [0.7, 1582.0], [0.8, 1582.0], [0.9, 1583.0], [1.0, 1585.0], [1.1, 1588.0], [1.2, 1589.0], [1.3, 1592.0], [1.4, 1592.0], [1.5, 1592.0], [1.6, 1593.0], [1.7, 1597.0], [1.8, 1598.0], [1.9, 1598.0], [2.0, 1598.0], [2.1, 1604.0], [2.2, 1604.0], [2.3, 1605.0], [2.4, 1609.0], [2.5, 1609.0], [2.6, 1613.0], [2.7, 1613.0], [2.8, 1615.0], [2.9, 1615.0], [3.0, 1616.0], [3.1, 1620.0], [3.2, 1622.0], [3.3, 1625.0], [3.4, 1626.0], [3.5, 1627.0], [3.6, 1627.0], [3.7, 1627.0], [3.8, 1627.0], [3.9, 1628.0], [4.0, 1629.0], [4.1, 1629.0], [4.2, 1630.0], [4.3, 1630.0], [4.4, 1630.0], [4.5, 1631.0], [4.6, 1631.0], [4.7, 1633.0], [4.8, 1634.0], [4.9, 1636.0], [5.0, 1639.0], [5.1, 1639.0], [5.2, 1643.0], [5.3, 1643.0], [5.4, 1643.0], [5.5, 1645.0], [5.6, 1645.0], [5.7, 1646.0], [5.8, 1646.0], [5.9, 1646.0], [6.0, 1647.0], [6.1, 1647.0], [6.2, 1649.0], [6.3, 1649.0], [6.4, 1649.0], [6.5, 1650.0], [6.6, 1650.0], [6.7, 1651.0], [6.8, 1651.0], [6.9, 1653.0], [7.0, 1654.0], [7.1, 1656.0], [7.2, 1656.0], [7.3, 1656.0], [7.4, 1659.0], [7.5, 1659.0], [7.6, 1662.0], [7.7, 1663.0], [7.8, 1665.0], [7.9, 1665.0], [8.0, 1665.0], [8.1, 1668.0], [8.2, 1669.0], [8.3, 1669.0], [8.4, 1670.0], [8.5, 1671.0], [8.6, 1674.0], [8.7, 1674.0], [8.8, 1674.0], [8.9, 1674.0], [9.0, 1675.0], [9.1, 1677.0], [9.2, 1678.0], [9.3, 1681.0], [9.4, 1681.0], [9.5, 1681.0], [9.6, 1682.0], [9.7, 1683.0], [9.8, 1683.0], [9.9, 1684.0], [10.0, 1684.0], [10.1, 1686.0], [10.2, 1686.0], [10.3, 1687.0], [10.4, 1688.0], [10.5, 1689.0], [10.6, 1689.0], [10.7, 1691.0], [10.8, 1692.0], [10.9, 1692.0], [11.0, 1693.0], [11.1, 1693.0], [11.2, 1693.0], [11.3, 1694.0], [11.4, 1694.0], [11.5, 1695.0], [11.6, 1695.0], [11.7, 1696.0], [11.8, 1696.0], [11.9, 1696.0], [12.0, 1698.0], [12.1, 1699.0], [12.2, 1699.0], [12.3, 1700.0], [12.4, 1700.0], [12.5, 1700.0], [12.6, 1701.0], [12.7, 1701.0], [12.8, 1701.0], [12.9, 1702.0], [13.0, 1702.0], [13.1, 1702.0], [13.2, 1703.0], [13.3, 1703.0], [13.4, 1704.0], [13.5, 1704.0], [13.6, 1704.0], [13.7, 1705.0], [13.8, 1705.0], [13.9, 1705.0], [14.0, 1705.0], [14.1, 1706.0], [14.2, 1706.0], [14.3, 1706.0], [14.4, 1706.0], [14.5, 1706.0], [14.6, 1707.0], [14.7, 1708.0], [14.8, 1708.0], [14.9, 1708.0], [15.0, 1708.0], [15.1, 1709.0], [15.2, 1709.0], [15.3, 1709.0], [15.4, 1710.0], [15.5, 1711.0], [15.6, 1711.0], [15.7, 1711.0], [15.8, 1711.0], [15.9, 1713.0], [16.0, 1713.0], [16.1, 1713.0], [16.2, 1713.0], [16.3, 1714.0], [16.4, 1716.0], [16.5, 1717.0], [16.6, 1718.0], [16.7, 1718.0], [16.8, 1719.0], [16.9, 1719.0], [17.0, 1721.0], [17.1, 1721.0], [17.2, 1722.0], [17.3, 1723.0], [17.4, 1723.0], [17.5, 1723.0], [17.6, 1723.0], [17.7, 1724.0], [17.8, 1724.0], [17.9, 1725.0], [18.0, 1726.0], [18.1, 1726.0], [18.2, 1726.0], [18.3, 1726.0], [18.4, 1727.0], [18.5, 1729.0], [18.6, 1729.0], [18.7, 1729.0], [18.8, 1730.0], [18.9, 1730.0], [19.0, 1733.0], [19.1, 1733.0], [19.2, 1733.0], [19.3, 1735.0], [19.4, 1736.0], [19.5, 1737.0], [19.6, 1737.0], [19.7, 1738.0], [19.8, 1738.0], [19.9, 1738.0], [20.0, 1740.0], [20.1, 1743.0], [20.2, 1743.0], [20.3, 1743.0], [20.4, 1744.0], [20.5, 1745.0], [20.6, 1745.0], [20.7, 1746.0], [20.8, 1748.0], [20.9, 1750.0], [21.0, 1751.0], [21.1, 1751.0], [21.2, 1751.0], [21.3, 1752.0], [21.4, 1752.0], [21.5, 1753.0], [21.6, 1753.0], [21.7, 1754.0], [21.8, 1754.0], [21.9, 1754.0], [22.0, 1754.0], [22.1, 1754.0], [22.2, 1754.0], [22.3, 1757.0], [22.4, 1758.0], [22.5, 1758.0], [22.6, 1758.0], [22.7, 1758.0], [22.8, 1759.0], [22.9, 1759.0], [23.0, 1759.0], [23.1, 1759.0], [23.2, 1759.0], [23.3, 1759.0], [23.4, 1759.0], [23.5, 1760.0], [23.6, 1760.0], [23.7, 1761.0], [23.8, 1761.0], [23.9, 1762.0], [24.0, 1762.0], [24.1, 1763.0], [24.2, 1763.0], [24.3, 1765.0], [24.4, 1767.0], [24.5, 1768.0], [24.6, 1770.0], [24.7, 1770.0], [24.8, 1770.0], [24.9, 1770.0], [25.0, 1771.0], [25.1, 1771.0], [25.2, 1772.0], [25.3, 1773.0], [25.4, 1773.0], [25.5, 1773.0], [25.6, 1774.0], [25.7, 1776.0], [25.8, 1777.0], [25.9, 1778.0], [26.0, 1779.0], [26.1, 1779.0], [26.2, 1779.0], [26.3, 1781.0], [26.4, 1783.0], [26.5, 1784.0], [26.6, 1785.0], [26.7, 1786.0], [26.8, 1788.0], [26.9, 1788.0], [27.0, 1788.0], [27.1, 1788.0], [27.2, 1788.0], [27.3, 1788.0], [27.4, 1789.0], [27.5, 1789.0], [27.6, 1789.0], [27.7, 1791.0], [27.8, 1792.0], [27.9, 1793.0], [28.0, 1793.0], [28.1, 1794.0], [28.2, 1794.0], [28.3, 1794.0], [28.4, 1794.0], [28.5, 1794.0], [28.6, 1795.0], [28.7, 1795.0], [28.8, 1796.0], [28.9, 1797.0], [29.0, 1797.0], [29.1, 1797.0], [29.2, 1798.0], [29.3, 1798.0], [29.4, 1799.0], [29.5, 1799.0], [29.6, 1799.0], [29.7, 1800.0], [29.8, 1800.0], [29.9, 1800.0], [30.0, 1800.0], [30.1, 1801.0], [30.2, 1801.0], [30.3, 1802.0], [30.4, 1804.0], [30.5, 1804.0], [30.6, 1806.0], [30.7, 1807.0], [30.8, 1808.0], [30.9, 1808.0], [31.0, 1808.0], [31.1, 1809.0], [31.2, 1809.0], [31.3, 1809.0], [31.4, 1810.0], [31.5, 1810.0], [31.6, 1812.0], [31.7, 1812.0], [31.8, 1813.0], [31.9, 1813.0], [32.0, 1814.0], [32.1, 1815.0], [32.2, 1816.0], [32.3, 1817.0], [32.4, 1817.0], [32.5, 1818.0], [32.6, 1819.0], [32.7, 1819.0], [32.8, 1819.0], [32.9, 1820.0], [33.0, 1821.0], [33.1, 1821.0], [33.2, 1822.0], [33.3, 1824.0], [33.4, 1824.0], [33.5, 1826.0], [33.6, 1826.0], [33.7, 1826.0], [33.8, 1826.0], [33.9, 1826.0], [34.0, 1827.0], [34.1, 1827.0], [34.2, 1827.0], [34.3, 1828.0], [34.4, 1828.0], [34.5, 1829.0], [34.6, 1829.0], [34.7, 1831.0], [34.8, 1831.0], [34.9, 1831.0], [35.0, 1832.0], [35.1, 1833.0], [35.2, 1834.0], [35.3, 1835.0], [35.4, 1835.0], [35.5, 1835.0], [35.6, 1835.0], [35.7, 1837.0], [35.8, 1838.0], [35.9, 1839.0], [36.0, 1841.0], [36.1, 1841.0], [36.2, 1842.0], [36.3, 1842.0], [36.4, 1842.0], [36.5, 1842.0], [36.6, 1843.0], [36.7, 1843.0], [36.8, 1845.0], [36.9, 1846.0], [37.0, 1846.0], [37.1, 1847.0], [37.2, 1847.0], [37.3, 1847.0], [37.4, 1848.0], [37.5, 1849.0], [37.6, 1850.0], [37.7, 1850.0], [37.8, 1851.0], [37.9, 1851.0], [38.0, 1851.0], [38.1, 1852.0], [38.2, 1852.0], [38.3, 1854.0], [38.4, 1855.0], [38.5, 1855.0], [38.6, 1855.0], [38.7, 1856.0], [38.8, 1856.0], [38.9, 1856.0], [39.0, 1860.0], [39.1, 1860.0], [39.2, 1860.0], [39.3, 1860.0], [39.4, 1860.0], [39.5, 1861.0], [39.6, 1861.0], [39.7, 1862.0], [39.8, 1862.0], [39.9, 1862.0], [40.0, 1862.0], [40.1, 1863.0], [40.2, 1863.0], [40.3, 1864.0], [40.4, 1864.0], [40.5, 1864.0], [40.6, 1864.0], [40.7, 1864.0], [40.8, 1864.0], [40.9, 1864.0], [41.0, 1865.0], [41.1, 1865.0], [41.2, 1867.0], [41.3, 1867.0], [41.4, 1867.0], [41.5, 1867.0], [41.6, 1867.0], [41.7, 1867.0], [41.8, 1870.0], [41.9, 1870.0], [42.0, 1871.0], [42.1, 1871.0], [42.2, 1871.0], [42.3, 1871.0], [42.4, 1872.0], [42.5, 1872.0], [42.6, 1872.0], [42.7, 1873.0], [42.8, 1873.0], [42.9, 1874.0], [43.0, 1874.0], [43.1, 1874.0], [43.2, 1874.0], [43.3, 1876.0], [43.4, 1876.0], [43.5, 1876.0], [43.6, 1876.0], [43.7, 1877.0], [43.8, 1879.0], [43.9, 1882.0], [44.0, 1882.0], [44.1, 1883.0], [44.2, 1884.0], [44.3, 1884.0], [44.4, 1884.0], [44.5, 1884.0], [44.6, 1887.0], [44.7, 1887.0], [44.8, 1888.0], [44.9, 1889.0], [45.0, 1889.0], [45.1, 1890.0], [45.2, 1891.0], [45.3, 1891.0], [45.4, 1892.0], [45.5, 1892.0], [45.6, 1893.0], [45.7, 1893.0], [45.8, 1894.0], [45.9, 1895.0], [46.0, 1896.0], [46.1, 1896.0], [46.2, 1897.0], [46.3, 1898.0], [46.4, 1898.0], [46.5, 1899.0], [46.6, 1899.0], [46.7, 1900.0], [46.8, 1901.0], [46.9, 1901.0], [47.0, 1901.0], [47.1, 1905.0], [47.2, 1905.0], [47.3, 1905.0], [47.4, 1906.0], [47.5, 1906.0], [47.6, 1906.0], [47.7, 1906.0], [47.8, 1906.0], [47.9, 1906.0], [48.0, 1908.0], [48.1, 1910.0], [48.2, 1910.0], [48.3, 1911.0], [48.4, 1911.0], [48.5, 1912.0], [48.6, 1912.0], [48.7, 1912.0], [48.8, 1913.0], [48.9, 1913.0], [49.0, 1914.0], [49.1, 1915.0], [49.2, 1915.0], [49.3, 1915.0], [49.4, 1915.0], [49.5, 1915.0], [49.6, 1916.0], [49.7, 1917.0], [49.8, 1917.0], [49.9, 1918.0], [50.0, 1918.0], [50.1, 1919.0], [50.2, 1919.0], [50.3, 1919.0], [50.4, 1920.0], [50.5, 1920.0], [50.6, 1920.0], [50.7, 1920.0], [50.8, 1920.0], [50.9, 1920.0], [51.0, 1921.0], [51.1, 1921.0], [51.2, 1921.0], [51.3, 1921.0], [51.4, 1923.0], [51.5, 1923.0], [51.6, 1923.0], [51.7, 1924.0], [51.8, 1925.0], [51.9, 1926.0], [52.0, 1926.0], [52.1, 1927.0], [52.2, 1927.0], [52.3, 1928.0], [52.4, 1928.0], [52.5, 1929.0], [52.6, 1932.0], [52.7, 1932.0], [52.8, 1933.0], [52.9, 1933.0], [53.0, 1934.0], [53.1, 1935.0], [53.2, 1936.0], [53.3, 1937.0], [53.4, 1939.0], [53.5, 1940.0], [53.6, 1942.0], [53.7, 1942.0], [53.8, 1943.0], [53.9, 1944.0], [54.0, 1945.0], [54.1, 1945.0], [54.2, 1947.0], [54.3, 1947.0], [54.4, 1947.0], [54.5, 1948.0], [54.6, 1948.0], [54.7, 1948.0], [54.8, 1948.0], [54.9, 1949.0], [55.0, 1951.0], [55.1, 1951.0], [55.2, 1952.0], [55.3, 1954.0], [55.4, 1954.0], [55.5, 1956.0], [55.6, 1956.0], [55.7, 1957.0], [55.8, 1957.0], [55.9, 1959.0], [56.0, 1961.0], [56.1, 1963.0], [56.2, 1963.0], [56.3, 1963.0], [56.4, 1964.0], [56.5, 1968.0], [56.6, 1968.0], [56.7, 1968.0], [56.8, 1969.0], [56.9, 1971.0], [57.0, 1972.0], [57.1, 1973.0], [57.2, 1973.0], [57.3, 1973.0], [57.4, 1976.0], [57.5, 1977.0], [57.6, 1977.0], [57.7, 1977.0], [57.8, 1979.0], [57.9, 1980.0], [58.0, 1980.0], [58.1, 1982.0], [58.2, 1984.0], [58.3, 1984.0], [58.4, 1985.0], [58.5, 1986.0], [58.6, 1986.0], [58.7, 1986.0], [58.8, 1987.0], [58.9, 1987.0], [59.0, 1987.0], [59.1, 1988.0], [59.2, 1988.0], [59.3, 1988.0], [59.4, 1989.0], [59.5, 1989.0], [59.6, 1990.0], [59.7, 1992.0], [59.8, 1992.0], [59.9, 1993.0], [60.0, 1993.0], [60.1, 1996.0], [60.2, 1996.0], [60.3, 1997.0], [60.4, 1997.0], [60.5, 1998.0], [60.6, 1999.0], [60.7, 2000.0], [60.8, 2000.0], [60.9, 2000.0], [61.0, 2002.0], [61.1, 2002.0], [61.2, 2003.0], [61.3, 2004.0], [61.4, 2005.0], [61.5, 2005.0], [61.6, 2005.0], [61.7, 2005.0], [61.8, 2006.0], [61.9, 2007.0], [62.0, 2007.0], [62.1, 2008.0], [62.2, 2009.0], [62.3, 2010.0], [62.4, 2010.0], [62.5, 2010.0], [62.6, 2012.0], [62.7, 2012.0], [62.8, 2012.0], [62.9, 2012.0], [63.0, 2014.0], [63.1, 2014.0], [63.2, 2014.0], [63.3, 2015.0], [63.4, 2015.0], [63.5, 2015.0], [63.6, 2016.0], [63.7, 2018.0], [63.8, 2018.0], [63.9, 2018.0], [64.0, 2018.0], [64.1, 2019.0], [64.2, 2020.0], [64.3, 2020.0], [64.4, 2021.0], [64.5, 2021.0], [64.6, 2022.0], [64.7, 2027.0], [64.8, 2027.0], [64.9, 2028.0], [65.0, 2029.0], [65.1, 2030.0], [65.2, 2030.0], [65.3, 2030.0], [65.4, 2031.0], [65.5, 2031.0], [65.6, 2032.0], [65.7, 2033.0], [65.8, 2033.0], [65.9, 2033.0], [66.0, 2033.0], [66.1, 2033.0], [66.2, 2034.0], [66.3, 2035.0], [66.4, 2035.0], [66.5, 2036.0], [66.6, 2037.0], [66.7, 2037.0], [66.8, 2039.0], [66.9, 2039.0], [67.0, 2040.0], [67.1, 2040.0], [67.2, 2042.0], [67.3, 2043.0], [67.4, 2043.0], [67.5, 2044.0], [67.6, 2044.0], [67.7, 2046.0], [67.8, 2048.0], [67.9, 2048.0], [68.0, 2048.0], [68.1, 2048.0], [68.2, 2048.0], [68.3, 2049.0], [68.4, 2049.0], [68.5, 2049.0], [68.6, 2051.0], [68.7, 2051.0], [68.8, 2052.0], [68.9, 2052.0], [69.0, 2053.0], [69.1, 2054.0], [69.2, 2055.0], [69.3, 2058.0], [69.4, 2058.0], [69.5, 2059.0], [69.6, 2059.0], [69.7, 2059.0], [69.8, 2060.0], [69.9, 2060.0], [70.0, 2060.0], [70.1, 2060.0], [70.2, 2061.0], [70.3, 2061.0], [70.4, 2062.0], [70.5, 2062.0], [70.6, 2062.0], [70.7, 2063.0], [70.8, 2064.0], [70.9, 2064.0], [71.0, 2064.0], [71.1, 2064.0], [71.2, 2065.0], [71.3, 2065.0], [71.4, 2066.0], [71.5, 2066.0], [71.6, 2067.0], [71.7, 2067.0], [71.8, 2067.0], [71.9, 2067.0], [72.0, 2068.0], [72.1, 2068.0], [72.2, 2068.0], [72.3, 2068.0], [72.4, 2068.0], [72.5, 2068.0], [72.6, 2069.0], [72.7, 2069.0], [72.8, 2073.0], [72.9, 2074.0], [73.0, 2076.0], [73.1, 2076.0], [73.2, 2076.0], [73.3, 2076.0], [73.4, 2077.0], [73.5, 2079.0], [73.6, 2079.0], [73.7, 2079.0], [73.8, 2079.0], [73.9, 2080.0], [74.0, 2080.0], [74.1, 2080.0], [74.2, 2080.0], [74.3, 2083.0], [74.4, 2083.0], [74.5, 2083.0], [74.6, 2086.0], [74.7, 2086.0], [74.8, 2088.0], [74.9, 2088.0], [75.0, 2089.0], [75.1, 2090.0], [75.2, 2090.0], [75.3, 2090.0], [75.4, 2090.0], [75.5, 2091.0], [75.6, 2094.0], [75.7, 2094.0], [75.8, 2095.0], [75.9, 2096.0], [76.0, 2097.0], [76.1, 2097.0], [76.2, 2097.0], [76.3, 2098.0], [76.4, 2099.0], [76.5, 2103.0], [76.6, 2104.0], [76.7, 2104.0], [76.8, 2105.0], [76.9, 2105.0], [77.0, 2106.0], [77.1, 2106.0], [77.2, 2110.0], [77.3, 2110.0], [77.4, 2113.0], [77.5, 2114.0], [77.6, 2114.0], [77.7, 2116.0], [77.8, 2117.0], [77.9, 2117.0], [78.0, 2117.0], [78.1, 2118.0], [78.2, 2119.0], [78.3, 2119.0], [78.4, 2120.0], [78.5, 2120.0], [78.6, 2121.0], [78.7, 2121.0], [78.8, 2122.0], [78.9, 2123.0], [79.0, 2123.0], [79.1, 2124.0], [79.2, 2124.0], [79.3, 2124.0], [79.4, 2125.0], [79.5, 2127.0], [79.6, 2127.0], [79.7, 2127.0], [79.8, 2127.0], [79.9, 2127.0], [80.0, 2129.0], [80.1, 2131.0], [80.2, 2132.0], [80.3, 2132.0], [80.4, 2132.0], [80.5, 2132.0], [80.6, 2135.0], [80.7, 2135.0], [80.8, 2136.0], [80.9, 2137.0], [81.0, 2139.0], [81.1, 2139.0], [81.2, 2139.0], [81.3, 2139.0], [81.4, 2140.0], [81.5, 2142.0], [81.6, 2142.0], [81.7, 2142.0], [81.8, 2143.0], [81.9, 2143.0], [82.0, 2144.0], [82.1, 2146.0], [82.2, 2146.0], [82.3, 2147.0], [82.4, 2149.0], [82.5, 2150.0], [82.6, 2151.0], [82.7, 2151.0], [82.8, 2153.0], [82.9, 2154.0], [83.0, 2160.0], [83.1, 2161.0], [83.2, 2165.0], [83.3, 2165.0], [83.4, 2165.0], [83.5, 2168.0], [83.6, 2172.0], [83.7, 2173.0], [83.8, 2175.0], [83.9, 2176.0], [84.0, 2176.0], [84.1, 2176.0], [84.2, 2180.0], [84.3, 2180.0], [84.4, 2181.0], [84.5, 2181.0], [84.6, 2187.0], [84.7, 2187.0], [84.8, 2187.0], [84.9, 2191.0], [85.0, 2192.0], [85.1, 2192.0], [85.2, 2193.0], [85.3, 2193.0], [85.4, 2194.0], [85.5, 2196.0], [85.6, 2196.0], [85.7, 2196.0], [85.8, 2197.0], [85.9, 2198.0], [86.0, 2198.0], [86.1, 2199.0], [86.2, 2200.0], [86.3, 2200.0], [86.4, 2200.0], [86.5, 2204.0], [86.6, 2205.0], [86.7, 2205.0], [86.8, 2206.0], [86.9, 2206.0], [87.0, 2206.0], [87.1, 2208.0], [87.2, 2208.0], [87.3, 2212.0], [87.4, 2213.0], [87.5, 2214.0], [87.6, 2214.0], [87.7, 2214.0], [87.8, 2215.0], [87.9, 2216.0], [88.0, 2216.0], [88.1, 2217.0], [88.2, 2217.0], [88.3, 2218.0], [88.4, 2219.0], [88.5, 2219.0], [88.6, 2219.0], [88.7, 2220.0], [88.8, 2222.0], [88.9, 2224.0], [89.0, 2224.0], [89.1, 2225.0], [89.2, 2225.0], [89.3, 2226.0], [89.4, 2233.0], [89.5, 2235.0], [89.6, 2238.0], [89.7, 2239.0], [89.8, 2240.0], [89.9, 2240.0], [90.0, 2248.0], [90.1, 2250.0], [90.2, 2253.0], [90.3, 2265.0], [90.4, 2269.0], [90.5, 2275.0], [90.6, 2275.0], [90.7, 2276.0], [90.8, 2284.0], [90.9, 2291.0], [91.0, 2291.0], [91.1, 2292.0], [91.2, 2293.0], [91.3, 2299.0], [91.4, 2299.0], [91.5, 2299.0], [91.6, 2311.0], [91.7, 2317.0], [91.8, 2322.0], [91.9, 2322.0], [92.0, 2329.0], [92.1, 2329.0], [92.2, 2330.0], [92.3, 2337.0], [92.4, 2337.0], [92.5, 2337.0], [92.6, 2338.0], [92.7, 2339.0], [92.8, 2339.0], [92.9, 2340.0], [93.0, 2342.0], [93.1, 2350.0], [93.2, 2351.0], [93.3, 2352.0], [93.4, 2353.0], [93.5, 2353.0], [93.6, 2354.0], [93.7, 2357.0], [93.8, 2366.0], [93.9, 2368.0], [94.0, 2368.0], [94.1, 2370.0], [94.2, 2372.0], [94.3, 2372.0], [94.4, 2372.0], [94.5, 2376.0], [94.6, 2377.0], [94.7, 2392.0], [94.8, 2409.0], [94.9, 2410.0], [95.0, 2410.0], [95.1, 2421.0], [95.2, 2424.0], [95.3, 2425.0], [95.4, 2429.0], [95.5, 2431.0], [95.6, 2435.0], [95.7, 2435.0], [95.8, 2436.0], [95.9, 2437.0], [96.0, 2439.0], [96.1, 2440.0], [96.2, 2469.0], [96.3, 2485.0], [96.4, 2485.0], [96.5, 2488.0], [96.6, 2489.0], [96.7, 2494.0], [96.8, 2504.0], [96.9, 2511.0], [97.0, 2512.0], [97.1, 2522.0], [97.2, 2522.0], [97.3, 2536.0], [97.4, 2563.0], [97.5, 2575.0], [97.6, 2589.0], [97.7, 2596.0], [97.8, 2599.0], [97.9, 2599.0], [98.0, 2611.0], [98.1, 2676.0], [98.2, 2680.0], [98.3, 2701.0], [98.4, 2719.0], [98.5, 2908.0], [98.6, 2908.0], [98.7, 2912.0], [98.8, 2912.0], [98.9, 3086.0], [99.0, 3187.0], [99.1, 3197.0], [99.2, 3206.0], [99.3, 3206.0], [99.4, 3232.0], [99.5, 3425.0], [99.6, 3579.0], [99.7, 4564.0], [99.8, 4603.0], [99.9, 4772.0], [100.0, 4772.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 596.0], [0.1, 596.0], [0.2, 607.0], [0.3, 608.0], [0.4, 614.0], [0.5, 616.0], [0.6, 616.0], [0.7, 616.0], [0.8, 618.0], [0.9, 618.0], [1.0, 620.0], [1.1, 620.0], [1.2, 624.0], [1.3, 625.0], [1.4, 625.0], [1.5, 626.0], [1.6, 627.0], [1.7, 628.0], [1.8, 629.0], [1.9, 632.0], [2.0, 632.0], [2.1, 632.0], [2.2, 632.0], [2.3, 633.0], [2.4, 633.0], [2.5, 634.0], [2.6, 634.0], [2.7, 634.0], [2.8, 634.0], [2.9, 635.0], [3.0, 636.0], [3.1, 636.0], [3.2, 638.0], [3.3, 638.0], [3.4, 638.0], [3.5, 640.0], [3.6, 640.0], [3.7, 641.0], [3.8, 642.0], [3.9, 643.0], [4.0, 643.0], [4.1, 644.0], [4.2, 645.0], [4.3, 645.0], [4.4, 645.0], [4.5, 645.0], [4.6, 646.0], [4.7, 646.0], [4.8, 647.0], [4.9, 647.0], [5.0, 648.0], [5.1, 648.0], [5.2, 648.0], [5.3, 648.0], [5.4, 648.0], [5.5, 648.0], [5.6, 648.0], [5.7, 650.0], [5.8, 651.0], [5.9, 651.0], [6.0, 651.0], [6.1, 652.0], [6.2, 653.0], [6.3, 654.0], [6.4, 655.0], [6.5, 655.0], [6.6, 655.0], [6.7, 655.0], [6.8, 655.0], [6.9, 656.0], [7.0, 657.0], [7.1, 657.0], [7.2, 657.0], [7.3, 657.0], [7.4, 657.0], [7.5, 658.0], [7.6, 658.0], [7.7, 659.0], [7.8, 659.0], [7.9, 659.0], [8.0, 660.0], [8.1, 660.0], [8.2, 660.0], [8.3, 661.0], [8.4, 661.0], [8.5, 662.0], [8.6, 662.0], [8.7, 662.0], [8.8, 662.0], [8.9, 663.0], [9.0, 663.0], [9.1, 663.0], [9.2, 663.0], [9.3, 663.0], [9.4, 663.0], [9.5, 664.0], [9.6, 664.0], [9.7, 664.0], [9.8, 665.0], [9.9, 665.0], [10.0, 665.0], [10.1, 665.0], [10.2, 666.0], [10.3, 666.0], [10.4, 666.0], [10.5, 667.0], [10.6, 667.0], [10.7, 667.0], [10.8, 667.0], [10.9, 667.0], [11.0, 668.0], [11.1, 668.0], [11.2, 668.0], [11.3, 668.0], [11.4, 668.0], [11.5, 668.0], [11.6, 668.0], [11.7, 668.0], [11.8, 668.0], [11.9, 668.0], [12.0, 669.0], [12.1, 669.0], [12.2, 669.0], [12.3, 669.0], [12.4, 669.0], [12.5, 669.0], [12.6, 669.0], [12.7, 669.0], [12.8, 669.0], [12.9, 670.0], [13.0, 670.0], [13.1, 670.0], [13.2, 670.0], [13.3, 671.0], [13.4, 671.0], [13.5, 671.0], [13.6, 671.0], [13.7, 672.0], [13.8, 672.0], [13.9, 672.0], [14.0, 672.0], [14.1, 673.0], [14.2, 673.0], [14.3, 674.0], [14.4, 674.0], [14.5, 674.0], [14.6, 674.0], [14.7, 674.0], [14.8, 674.0], [14.9, 675.0], [15.0, 675.0], [15.1, 675.0], [15.2, 675.0], [15.3, 675.0], [15.4, 675.0], [15.5, 675.0], [15.6, 675.0], [15.7, 675.0], [15.8, 675.0], [15.9, 675.0], [16.0, 676.0], [16.1, 676.0], [16.2, 676.0], [16.3, 676.0], [16.4, 676.0], [16.5, 676.0], [16.6, 677.0], [16.7, 677.0], [16.8, 677.0], [16.9, 678.0], [17.0, 678.0], [17.1, 678.0], [17.2, 678.0], [17.3, 678.0], [17.4, 678.0], [17.5, 679.0], [17.6, 680.0], [17.7, 680.0], [17.8, 680.0], [17.9, 680.0], [18.0, 680.0], [18.1, 681.0], [18.2, 681.0], [18.3, 682.0], [18.4, 682.0], [18.5, 682.0], [18.6, 682.0], [18.7, 682.0], [18.8, 682.0], [18.9, 682.0], [19.0, 682.0], [19.1, 682.0], [19.2, 683.0], [19.3, 683.0], [19.4, 683.0], [19.5, 683.0], [19.6, 683.0], [19.7, 683.0], [19.8, 683.0], [19.9, 683.0], [20.0, 684.0], [20.1, 684.0], [20.2, 684.0], [20.3, 684.0], [20.4, 684.0], [20.5, 685.0], [20.6, 685.0], [20.7, 685.0], [20.8, 685.0], [20.9, 686.0], [21.0, 686.0], [21.1, 686.0], [21.2, 686.0], [21.3, 687.0], [21.4, 688.0], [21.5, 688.0], [21.6, 689.0], [21.7, 689.0], [21.8, 689.0], [21.9, 689.0], [22.0, 689.0], [22.1, 689.0], [22.2, 689.0], [22.3, 689.0], [22.4, 689.0], [22.5, 689.0], [22.6, 690.0], [22.7, 690.0], [22.8, 690.0], [22.9, 690.0], [23.0, 691.0], [23.1, 691.0], [23.2, 692.0], [23.3, 692.0], [23.4, 692.0], [23.5, 692.0], [23.6, 693.0], [23.7, 693.0], [23.8, 693.0], [23.9, 693.0], [24.0, 694.0], [24.1, 695.0], [24.2, 695.0], [24.3, 695.0], [24.4, 695.0], [24.5, 696.0], [24.6, 696.0], [24.7, 696.0], [24.8, 697.0], [24.9, 697.0], [25.0, 697.0], [25.1, 697.0], [25.2, 697.0], [25.3, 697.0], [25.4, 698.0], [25.5, 698.0], [25.6, 698.0], [25.7, 698.0], [25.8, 698.0], [25.9, 698.0], [26.0, 698.0], [26.1, 699.0], [26.2, 699.0], [26.3, 699.0], [26.4, 699.0], [26.5, 699.0], [26.6, 699.0], [26.7, 700.0], [26.8, 700.0], [26.9, 700.0], [27.0, 700.0], [27.1, 700.0], [27.2, 700.0], [27.3, 700.0], [27.4, 701.0], [27.5, 701.0], [27.6, 701.0], [27.7, 701.0], [27.8, 701.0], [27.9, 701.0], [28.0, 701.0], [28.1, 701.0], [28.2, 701.0], [28.3, 701.0], [28.4, 702.0], [28.5, 702.0], [28.6, 702.0], [28.7, 702.0], [28.8, 702.0], [28.9, 703.0], [29.0, 703.0], [29.1, 703.0], [29.2, 703.0], [29.3, 703.0], [29.4, 703.0], [29.5, 703.0], [29.6, 704.0], [29.7, 704.0], [29.8, 704.0], [29.9, 704.0], [30.0, 705.0], [30.1, 705.0], [30.2, 705.0], [30.3, 705.0], [30.4, 705.0], [30.5, 706.0], [30.6, 706.0], [30.7, 706.0], [30.8, 707.0], [30.9, 707.0], [31.0, 707.0], [31.1, 708.0], [31.2, 708.0], [31.3, 708.0], [31.4, 708.0], [31.5, 708.0], [31.6, 708.0], [31.7, 708.0], [31.8, 708.0], [31.9, 708.0], [32.0, 709.0], [32.1, 709.0], [32.2, 709.0], [32.3, 709.0], [32.4, 709.0], [32.5, 709.0], [32.6, 710.0], [32.7, 710.0], [32.8, 710.0], [32.9, 710.0], [33.0, 710.0], [33.1, 710.0], [33.2, 710.0], [33.3, 710.0], [33.4, 711.0], [33.5, 712.0], [33.6, 712.0], [33.7, 712.0], [33.8, 712.0], [33.9, 713.0], [34.0, 713.0], [34.1, 713.0], [34.2, 714.0], [34.3, 714.0], [34.4, 714.0], [34.5, 714.0], [34.6, 714.0], [34.7, 714.0], [34.8, 715.0], [34.9, 715.0], [35.0, 715.0], [35.1, 716.0], [35.2, 716.0], [35.3, 716.0], [35.4, 716.0], [35.5, 716.0], [35.6, 716.0], [35.7, 717.0], [35.8, 717.0], [35.9, 717.0], [36.0, 718.0], [36.1, 719.0], [36.2, 719.0], [36.3, 719.0], [36.4, 719.0], [36.5, 719.0], [36.6, 719.0], [36.7, 720.0], [36.8, 720.0], [36.9, 720.0], [37.0, 720.0], [37.1, 721.0], [37.2, 721.0], [37.3, 721.0], [37.4, 722.0], [37.5, 722.0], [37.6, 722.0], [37.7, 723.0], [37.8, 723.0], [37.9, 724.0], [38.0, 724.0], [38.1, 724.0], [38.2, 724.0], [38.3, 724.0], [38.4, 724.0], [38.5, 724.0], [38.6, 724.0], [38.7, 725.0], [38.8, 725.0], [38.9, 725.0], [39.0, 726.0], [39.1, 726.0], [39.2, 727.0], [39.3, 727.0], [39.4, 727.0], [39.5, 727.0], [39.6, 728.0], [39.7, 728.0], [39.8, 728.0], [39.9, 728.0], [40.0, 728.0], [40.1, 729.0], [40.2, 729.0], [40.3, 729.0], [40.4, 729.0], [40.5, 729.0], [40.6, 729.0], [40.7, 730.0], [40.8, 730.0], [40.9, 730.0], [41.0, 731.0], [41.1, 731.0], [41.2, 731.0], [41.3, 732.0], [41.4, 733.0], [41.5, 733.0], [41.6, 733.0], [41.7, 733.0], [41.8, 733.0], [41.9, 733.0], [42.0, 734.0], [42.1, 734.0], [42.2, 734.0], [42.3, 734.0], [42.4, 734.0], [42.5, 734.0], [42.6, 734.0], [42.7, 734.0], [42.8, 734.0], [42.9, 735.0], [43.0, 735.0], [43.1, 735.0], [43.2, 735.0], [43.3, 735.0], [43.4, 736.0], [43.5, 736.0], [43.6, 737.0], [43.7, 737.0], [43.8, 737.0], [43.9, 737.0], [44.0, 738.0], [44.1, 738.0], [44.2, 739.0], [44.3, 739.0], [44.4, 739.0], [44.5, 740.0], [44.6, 740.0], [44.7, 740.0], [44.8, 740.0], [44.9, 740.0], [45.0, 741.0], [45.1, 741.0], [45.2, 742.0], [45.3, 742.0], [45.4, 742.0], [45.5, 742.0], [45.6, 742.0], [45.7, 742.0], [45.8, 742.0], [45.9, 743.0], [46.0, 743.0], [46.1, 743.0], [46.2, 743.0], [46.3, 744.0], [46.4, 744.0], [46.5, 744.0], [46.6, 744.0], [46.7, 744.0], [46.8, 744.0], [46.9, 744.0], [47.0, 744.0], [47.1, 744.0], [47.2, 744.0], [47.3, 745.0], [47.4, 745.0], [47.5, 745.0], [47.6, 745.0], [47.7, 746.0], [47.8, 746.0], [47.9, 747.0], [48.0, 748.0], [48.1, 748.0], [48.2, 749.0], [48.3, 749.0], [48.4, 749.0], [48.5, 750.0], [48.6, 750.0], [48.7, 750.0], [48.8, 750.0], [48.9, 751.0], [49.0, 752.0], [49.1, 752.0], [49.2, 753.0], [49.3, 754.0], [49.4, 754.0], [49.5, 754.0], [49.6, 754.0], [49.7, 755.0], [49.8, 756.0], [49.9, 756.0], [50.0, 756.0], [50.1, 756.0], [50.2, 757.0], [50.3, 757.0], [50.4, 757.0], [50.5, 758.0], [50.6, 758.0], [50.7, 758.0], [50.8, 758.0], [50.9, 759.0], [51.0, 759.0], [51.1, 759.0], [51.2, 759.0], [51.3, 760.0], [51.4, 760.0], [51.5, 760.0], [51.6, 760.0], [51.7, 761.0], [51.8, 761.0], [51.9, 761.0], [52.0, 761.0], [52.1, 761.0], [52.2, 761.0], [52.3, 762.0], [52.4, 762.0], [52.5, 763.0], [52.6, 763.0], [52.7, 763.0], [52.8, 763.0], [52.9, 763.0], [53.0, 764.0], [53.1, 764.0], [53.2, 764.0], [53.3, 764.0], [53.4, 764.0], [53.5, 764.0], [53.6, 764.0], [53.7, 764.0], [53.8, 765.0], [53.9, 765.0], [54.0, 765.0], [54.1, 765.0], [54.2, 765.0], [54.3, 765.0], [54.4, 766.0], [54.5, 766.0], [54.6, 767.0], [54.7, 767.0], [54.8, 767.0], [54.9, 767.0], [55.0, 768.0], [55.1, 768.0], [55.2, 768.0], [55.3, 768.0], [55.4, 769.0], [55.5, 769.0], [55.6, 769.0], [55.7, 769.0], [55.8, 770.0], [55.9, 770.0], [56.0, 770.0], [56.1, 770.0], [56.2, 770.0], [56.3, 771.0], [56.4, 771.0], [56.5, 771.0], [56.6, 771.0], [56.7, 771.0], [56.8, 772.0], [56.9, 772.0], [57.0, 773.0], [57.1, 773.0], [57.2, 775.0], [57.3, 775.0], [57.4, 775.0], [57.5, 776.0], [57.6, 776.0], [57.7, 777.0], [57.8, 779.0], [57.9, 779.0], [58.0, 779.0], [58.1, 780.0], [58.2, 781.0], [58.3, 781.0], [58.4, 781.0], [58.5, 782.0], [58.6, 782.0], [58.7, 782.0], [58.8, 782.0], [58.9, 782.0], [59.0, 782.0], [59.1, 782.0], [59.2, 783.0], [59.3, 783.0], [59.4, 783.0], [59.5, 783.0], [59.6, 783.0], [59.7, 783.0], [59.8, 784.0], [59.9, 784.0], [60.0, 784.0], [60.1, 785.0], [60.2, 786.0], [60.3, 786.0], [60.4, 787.0], [60.5, 787.0], [60.6, 787.0], [60.7, 788.0], [60.8, 788.0], [60.9, 788.0], [61.0, 788.0], [61.1, 790.0], [61.2, 790.0], [61.3, 792.0], [61.4, 792.0], [61.5, 793.0], [61.6, 793.0], [61.7, 793.0], [61.8, 793.0], [61.9, 793.0], [62.0, 793.0], [62.1, 794.0], [62.2, 794.0], [62.3, 794.0], [62.4, 795.0], [62.5, 795.0], [62.6, 795.0], [62.7, 795.0], [62.8, 796.0], [62.9, 796.0], [63.0, 796.0], [63.1, 797.0], [63.2, 797.0], [63.3, 797.0], [63.4, 797.0], [63.5, 798.0], [63.6, 798.0], [63.7, 799.0], [63.8, 800.0], [63.9, 800.0], [64.0, 800.0], [64.1, 801.0], [64.2, 801.0], [64.3, 802.0], [64.4, 802.0], [64.5, 802.0], [64.6, 803.0], [64.7, 803.0], [64.8, 804.0], [64.9, 804.0], [65.0, 804.0], [65.1, 804.0], [65.2, 804.0], [65.3, 805.0], [65.4, 806.0], [65.5, 807.0], [65.6, 807.0], [65.7, 807.0], [65.8, 807.0], [65.9, 808.0], [66.0, 809.0], [66.1, 810.0], [66.2, 810.0], [66.3, 811.0], [66.4, 811.0], [66.5, 811.0], [66.6, 811.0], [66.7, 812.0], [66.8, 812.0], [66.9, 812.0], [67.0, 812.0], [67.1, 813.0], [67.2, 813.0], [67.3, 813.0], [67.4, 813.0], [67.5, 813.0], [67.6, 814.0], [67.7, 816.0], [67.8, 816.0], [67.9, 816.0], [68.0, 816.0], [68.1, 816.0], [68.2, 816.0], [68.3, 817.0], [68.4, 817.0], [68.5, 817.0], [68.6, 817.0], [68.7, 817.0], [68.8, 818.0], [68.9, 819.0], [69.0, 820.0], [69.1, 820.0], [69.2, 820.0], [69.3, 821.0], [69.4, 822.0], [69.5, 824.0], [69.6, 825.0], [69.7, 825.0], [69.8, 825.0], [69.9, 825.0], [70.0, 825.0], [70.1, 826.0], [70.2, 826.0], [70.3, 827.0], [70.4, 827.0], [70.5, 827.0], [70.6, 827.0], [70.7, 827.0], [70.8, 828.0], [70.9, 829.0], [71.0, 829.0], [71.1, 829.0], [71.2, 829.0], [71.3, 830.0], [71.4, 830.0], [71.5, 830.0], [71.6, 832.0], [71.7, 832.0], [71.8, 832.0], [71.9, 833.0], [72.0, 834.0], [72.1, 835.0], [72.2, 835.0], [72.3, 835.0], [72.4, 835.0], [72.5, 836.0], [72.6, 836.0], [72.7, 836.0], [72.8, 836.0], [72.9, 836.0], [73.0, 836.0], [73.1, 836.0], [73.2, 836.0], [73.3, 837.0], [73.4, 839.0], [73.5, 839.0], [73.6, 840.0], [73.7, 840.0], [73.8, 841.0], [73.9, 841.0], [74.0, 841.0], [74.1, 842.0], [74.2, 842.0], [74.3, 842.0], [74.4, 842.0], [74.5, 843.0], [74.6, 844.0], [74.7, 845.0], [74.8, 845.0], [74.9, 846.0], [75.0, 848.0], [75.1, 848.0], [75.2, 848.0], [75.3, 849.0], [75.4, 849.0], [75.5, 849.0], [75.6, 849.0], [75.7, 849.0], [75.8, 851.0], [75.9, 851.0], [76.0, 851.0], [76.1, 852.0], [76.2, 852.0], [76.3, 853.0], [76.4, 853.0], [76.5, 854.0], [76.6, 854.0], [76.7, 855.0], [76.8, 857.0], [76.9, 858.0], [77.0, 858.0], [77.1, 858.0], [77.2, 861.0], [77.3, 861.0], [77.4, 861.0], [77.5, 862.0], [77.6, 865.0], [77.7, 865.0], [77.8, 866.0], [77.9, 866.0], [78.0, 867.0], [78.1, 867.0], [78.2, 867.0], [78.3, 867.0], [78.4, 867.0], [78.5, 868.0], [78.6, 868.0], [78.7, 869.0], [78.8, 869.0], [78.9, 870.0], [79.0, 870.0], [79.1, 870.0], [79.2, 871.0], [79.3, 872.0], [79.4, 872.0], [79.5, 872.0], [79.6, 874.0], [79.7, 874.0], [79.8, 874.0], [79.9, 875.0], [80.0, 875.0], [80.1, 877.0], [80.2, 877.0], [80.3, 877.0], [80.4, 878.0], [80.5, 878.0], [80.6, 878.0], [80.7, 879.0], [80.8, 880.0], [80.9, 880.0], [81.0, 880.0], [81.1, 881.0], [81.2, 882.0], [81.3, 882.0], [81.4, 882.0], [81.5, 883.0], [81.6, 883.0], [81.7, 883.0], [81.8, 883.0], [81.9, 883.0], [82.0, 884.0], [82.1, 884.0], [82.2, 885.0], [82.3, 885.0], [82.4, 885.0], [82.5, 885.0], [82.6, 886.0], [82.7, 886.0], [82.8, 887.0], [82.9, 887.0], [83.0, 890.0], [83.1, 890.0], [83.2, 891.0], [83.3, 891.0], [83.4, 893.0], [83.5, 893.0], [83.6, 893.0], [83.7, 893.0], [83.8, 893.0], [83.9, 893.0], [84.0, 893.0], [84.1, 895.0], [84.2, 895.0], [84.3, 895.0], [84.4, 896.0], [84.5, 896.0], [84.6, 897.0], [84.7, 897.0], [84.8, 898.0], [84.9, 898.0], [85.0, 900.0], [85.1, 903.0], [85.2, 904.0], [85.3, 905.0], [85.4, 906.0], [85.5, 906.0], [85.6, 906.0], [85.7, 906.0], [85.8, 908.0], [85.9, 910.0], [86.0, 910.0], [86.1, 910.0], [86.2, 910.0], [86.3, 911.0], [86.4, 911.0], [86.5, 912.0], [86.6, 913.0], [86.7, 914.0], [86.8, 917.0], [86.9, 917.0], [87.0, 917.0], [87.1, 917.0], [87.2, 919.0], [87.3, 920.0], [87.4, 922.0], [87.5, 922.0], [87.6, 922.0], [87.7, 922.0], [87.8, 923.0], [87.9, 923.0], [88.0, 925.0], [88.1, 926.0], [88.2, 926.0], [88.3, 926.0], [88.4, 927.0], [88.5, 930.0], [88.6, 932.0], [88.7, 932.0], [88.8, 933.0], [88.9, 933.0], [89.0, 934.0], [89.1, 936.0], [89.2, 940.0], [89.3, 940.0], [89.4, 940.0], [89.5, 940.0], [89.6, 948.0], [89.7, 950.0], [89.8, 951.0], [89.9, 952.0], [90.0, 952.0], [90.1, 953.0], [90.2, 953.0], [90.3, 954.0], [90.4, 954.0], [90.5, 956.0], [90.6, 958.0], [90.7, 960.0], [90.8, 960.0], [90.9, 960.0], [91.0, 964.0], [91.1, 964.0], [91.2, 965.0], [91.3, 966.0], [91.4, 968.0], [91.5, 968.0], [91.6, 971.0], [91.7, 973.0], [91.8, 973.0], [91.9, 977.0], [92.0, 982.0], [92.1, 984.0], [92.2, 984.0], [92.3, 985.0], [92.4, 990.0], [92.5, 992.0], [92.6, 993.0], [92.7, 994.0], [92.8, 994.0], [92.9, 994.0], [93.0, 996.0], [93.1, 997.0], [93.2, 1001.0], [93.3, 1005.0], [93.4, 1009.0], [93.5, 1009.0], [93.6, 1010.0], [93.7, 1010.0], [93.8, 1011.0], [93.9, 1014.0], [94.0, 1015.0], [94.1, 1015.0], [94.2, 1017.0], [94.3, 1018.0], [94.4, 1020.0], [94.5, 1028.0], [94.6, 1034.0], [94.7, 1037.0], [94.8, 1037.0], [94.9, 1040.0], [95.0, 1043.0], [95.1, 1043.0], [95.2, 1044.0], [95.3, 1046.0], [95.4, 1046.0], [95.5, 1048.0], [95.6, 1048.0], [95.7, 1049.0], [95.8, 1053.0], [95.9, 1057.0], [96.0, 1057.0], [96.1, 1057.0], [96.2, 1062.0], [96.3, 1064.0], [96.4, 1065.0], [96.5, 1072.0], [96.6, 1072.0], [96.7, 1073.0], [96.8, 1073.0], [96.9, 1079.0], [97.0, 1080.0], [97.1, 1087.0], [97.2, 1090.0], [97.3, 1091.0], [97.4, 1091.0], [97.5, 1098.0], [97.6, 1099.0], [97.7, 1100.0], [97.8, 1102.0], [97.9, 1109.0], [98.0, 1112.0], [98.1, 1112.0], [98.2, 1114.0], [98.3, 1117.0], [98.4, 1117.0], [98.5, 1119.0], [98.6, 1129.0], [98.7, 1129.0], [98.8, 1131.0], [98.9, 1137.0], [99.0, 1158.0], [99.1, 1158.0], [99.2, 1159.0], [99.3, 1172.0], [99.4, 1172.0], [99.5, 1181.0], [99.6, 1182.0], [99.7, 1182.0], [99.8, 2248.0], [99.9, 3562.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 885.0], [0.1, 885.0], [0.2, 900.0], [0.3, 915.0], [0.4, 918.0], [0.5, 918.0], [0.6, 925.0], [0.7, 925.0], [0.8, 927.0], [0.9, 931.0], [1.0, 932.0], [1.1, 934.0], [1.2, 935.0], [1.3, 935.0], [1.4, 935.0], [1.5, 936.0], [1.6, 939.0], [1.7, 941.0], [1.8, 941.0], [1.9, 948.0], [2.0, 948.0], [2.1, 949.0], [2.2, 949.0], [2.3, 949.0], [2.4, 949.0], [2.5, 950.0], [2.6, 950.0], [2.7, 951.0], [2.8, 951.0], [2.9, 953.0], [3.0, 954.0], [3.1, 955.0], [3.2, 955.0], [3.3, 956.0], [3.4, 956.0], [3.5, 960.0], [3.6, 962.0], [3.7, 962.0], [3.8, 963.0], [3.9, 963.0], [4.0, 964.0], [4.1, 965.0], [4.2, 965.0], [4.3, 967.0], [4.4, 967.0], [4.5, 967.0], [4.6, 967.0], [4.7, 968.0], [4.8, 969.0], [4.9, 970.0], [5.0, 970.0], [5.1, 970.0], [5.2, 972.0], [5.3, 974.0], [5.4, 974.0], [5.5, 975.0], [5.6, 976.0], [5.7, 977.0], [5.8, 977.0], [5.9, 981.0], [6.0, 982.0], [6.1, 984.0], [6.2, 984.0], [6.3, 986.0], [6.4, 986.0], [6.5, 986.0], [6.6, 987.0], [6.7, 987.0], [6.8, 989.0], [6.9, 989.0], [7.0, 990.0], [7.1, 990.0], [7.2, 991.0], [7.3, 991.0], [7.4, 991.0], [7.5, 991.0], [7.6, 993.0], [7.7, 993.0], [7.8, 993.0], [7.9, 993.0], [8.0, 994.0], [8.1, 994.0], [8.2, 995.0], [8.3, 995.0], [8.4, 995.0], [8.5, 995.0], [8.6, 996.0], [8.7, 999.0], [8.8, 1000.0], [8.9, 1000.0], [9.0, 1000.0], [9.1, 1001.0], [9.2, 1001.0], [9.3, 1002.0], [9.4, 1002.0], [9.5, 1003.0], [9.6, 1003.0], [9.7, 1004.0], [9.8, 1004.0], [9.9, 1006.0], [10.0, 1007.0], [10.1, 1007.0], [10.2, 1007.0], [10.3, 1007.0], [10.4, 1007.0], [10.5, 1008.0], [10.6, 1008.0], [10.7, 1008.0], [10.8, 1009.0], [10.9, 1009.0], [11.0, 1010.0], [11.1, 1010.0], [11.2, 1010.0], [11.3, 1010.0], [11.4, 1011.0], [11.5, 1011.0], [11.6, 1011.0], [11.7, 1014.0], [11.8, 1014.0], [11.9, 1014.0], [12.0, 1014.0], [12.1, 1015.0], [12.2, 1015.0], [12.3, 1016.0], [12.4, 1016.0], [12.5, 1017.0], [12.6, 1019.0], [12.7, 1019.0], [12.8, 1019.0], [12.9, 1019.0], [13.0, 1020.0], [13.1, 1020.0], [13.2, 1020.0], [13.3, 1020.0], [13.4, 1020.0], [13.5, 1021.0], [13.6, 1021.0], [13.7, 1021.0], [13.8, 1022.0], [13.9, 1023.0], [14.0, 1023.0], [14.1, 1023.0], [14.2, 1023.0], [14.3, 1024.0], [14.4, 1024.0], [14.5, 1024.0], [14.6, 1024.0], [14.7, 1024.0], [14.8, 1024.0], [14.9, 1025.0], [15.0, 1025.0], [15.1, 1026.0], [15.2, 1027.0], [15.3, 1027.0], [15.4, 1027.0], [15.5, 1028.0], [15.6, 1028.0], [15.7, 1029.0], [15.8, 1030.0], [15.9, 1031.0], [16.0, 1031.0], [16.1, 1032.0], [16.2, 1033.0], [16.3, 1033.0], [16.4, 1033.0], [16.5, 1034.0], [16.6, 1034.0], [16.7, 1034.0], [16.8, 1035.0], [16.9, 1035.0], [17.0, 1036.0], [17.1, 1036.0], [17.2, 1036.0], [17.3, 1036.0], [17.4, 1037.0], [17.5, 1037.0], [17.6, 1037.0], [17.7, 1037.0], [17.8, 1039.0], [17.9, 1039.0], [18.0, 1043.0], [18.1, 1043.0], [18.2, 1044.0], [18.3, 1044.0], [18.4, 1044.0], [18.5, 1044.0], [18.6, 1045.0], [18.7, 1045.0], [18.8, 1046.0], [18.9, 1048.0], [19.0, 1049.0], [19.1, 1050.0], [19.2, 1050.0], [19.3, 1050.0], [19.4, 1050.0], [19.5, 1050.0], [19.6, 1052.0], [19.7, 1052.0], [19.8, 1052.0], [19.9, 1052.0], [20.0, 1054.0], [20.1, 1054.0], [20.2, 1055.0], [20.3, 1056.0], [20.4, 1056.0], [20.5, 1057.0], [20.6, 1058.0], [20.7, 1059.0], [20.8, 1060.0], [20.9, 1061.0], [21.0, 1061.0], [21.1, 1061.0], [21.2, 1064.0], [21.3, 1064.0], [21.4, 1064.0], [21.5, 1065.0], [21.6, 1065.0], [21.7, 1065.0], [21.8, 1066.0], [21.9, 1068.0], [22.0, 1068.0], [22.1, 1070.0], [22.2, 1070.0], [22.3, 1070.0], [22.4, 1071.0], [22.5, 1071.0], [22.6, 1072.0], [22.7, 1072.0], [22.8, 1072.0], [22.9, 1072.0], [23.0, 1072.0], [23.1, 1072.0], [23.2, 1073.0], [23.3, 1074.0], [23.4, 1075.0], [23.5, 1075.0], [23.6, 1075.0], [23.7, 1076.0], [23.8, 1078.0], [23.9, 1079.0], [24.0, 1081.0], [24.1, 1082.0], [24.2, 1082.0], [24.3, 1082.0], [24.4, 1083.0], [24.5, 1083.0], [24.6, 1085.0], [24.7, 1087.0], [24.8, 1087.0], [24.9, 1087.0], [25.0, 1088.0], [25.1, 1089.0], [25.2, 1089.0], [25.3, 1089.0], [25.4, 1089.0], [25.5, 1089.0], [25.6, 1089.0], [25.7, 1090.0], [25.8, 1090.0], [25.9, 1091.0], [26.0, 1091.0], [26.1, 1091.0], [26.2, 1091.0], [26.3, 1092.0], [26.4, 1093.0], [26.5, 1095.0], [26.6, 1096.0], [26.7, 1096.0], [26.8, 1096.0], [26.9, 1097.0], [27.0, 1097.0], [27.1, 1098.0], [27.2, 1098.0], [27.3, 1098.0], [27.4, 1098.0], [27.5, 1098.0], [27.6, 1100.0], [27.7, 1100.0], [27.8, 1101.0], [27.9, 1102.0], [28.0, 1104.0], [28.1, 1104.0], [28.2, 1104.0], [28.3, 1105.0], [28.4, 1106.0], [28.5, 1108.0], [28.6, 1108.0], [28.7, 1108.0], [28.8, 1108.0], [28.9, 1108.0], [29.0, 1109.0], [29.1, 1109.0], [29.2, 1109.0], [29.3, 1109.0], [29.4, 1111.0], [29.5, 1111.0], [29.6, 1112.0], [29.7, 1112.0], [29.8, 1112.0], [29.9, 1112.0], [30.0, 1112.0], [30.1, 1114.0], [30.2, 1114.0], [30.3, 1115.0], [30.4, 1116.0], [30.5, 1116.0], [30.6, 1116.0], [30.7, 1117.0], [30.8, 1117.0], [30.9, 1118.0], [31.0, 1119.0], [31.1, 1119.0], [31.2, 1119.0], [31.3, 1119.0], [31.4, 1123.0], [31.5, 1123.0], [31.6, 1123.0], [31.7, 1124.0], [31.8, 1124.0], [31.9, 1124.0], [32.0, 1124.0], [32.1, 1126.0], [32.2, 1126.0], [32.3, 1127.0], [32.4, 1127.0], [32.5, 1127.0], [32.6, 1128.0], [32.7, 1129.0], [32.8, 1129.0], [32.9, 1130.0], [33.0, 1130.0], [33.1, 1131.0], [33.2, 1131.0], [33.3, 1131.0], [33.4, 1132.0], [33.5, 1133.0], [33.6, 1135.0], [33.7, 1136.0], [33.8, 1136.0], [33.9, 1136.0], [34.0, 1136.0], [34.1, 1138.0], [34.2, 1138.0], [34.3, 1139.0], [34.4, 1139.0], [34.5, 1139.0], [34.6, 1139.0], [34.7, 1140.0], [34.8, 1141.0], [34.9, 1142.0], [35.0, 1143.0], [35.1, 1143.0], [35.2, 1145.0], [35.3, 1145.0], [35.4, 1146.0], [35.5, 1147.0], [35.6, 1147.0], [35.7, 1147.0], [35.8, 1148.0], [35.9, 1149.0], [36.0, 1149.0], [36.1, 1151.0], [36.2, 1151.0], [36.3, 1152.0], [36.4, 1152.0], [36.5, 1153.0], [36.6, 1153.0], [36.7, 1154.0], [36.8, 1155.0], [36.9, 1157.0], [37.0, 1157.0], [37.1, 1159.0], [37.2, 1160.0], [37.3, 1160.0], [37.4, 1161.0], [37.5, 1162.0], [37.6, 1162.0], [37.7, 1162.0], [37.8, 1163.0], [37.9, 1164.0], [38.0, 1165.0], [38.1, 1166.0], [38.2, 1166.0], [38.3, 1166.0], [38.4, 1168.0], [38.5, 1168.0], [38.6, 1168.0], [38.7, 1169.0], [38.8, 1169.0], [38.9, 1169.0], [39.0, 1170.0], [39.1, 1170.0], [39.2, 1174.0], [39.3, 1174.0], [39.4, 1174.0], [39.5, 1174.0], [39.6, 1178.0], [39.7, 1180.0], [39.8, 1180.0], [39.9, 1181.0], [40.0, 1181.0], [40.1, 1181.0], [40.2, 1181.0], [40.3, 1182.0], [40.4, 1182.0], [40.5, 1183.0], [40.6, 1183.0], [40.7, 1183.0], [40.8, 1183.0], [40.9, 1183.0], [41.0, 1184.0], [41.1, 1184.0], [41.2, 1184.0], [41.3, 1184.0], [41.4, 1186.0], [41.5, 1186.0], [41.6, 1189.0], [41.7, 1192.0], [41.8, 1193.0], [41.9, 1194.0], [42.0, 1198.0], [42.1, 1198.0], [42.2, 1198.0], [42.3, 1198.0], [42.4, 1199.0], [42.5, 1199.0], [42.6, 1199.0], [42.7, 1199.0], [42.8, 1199.0], [42.9, 1200.0], [43.0, 1200.0], [43.1, 1200.0], [43.2, 1200.0], [43.3, 1201.0], [43.4, 1201.0], [43.5, 1202.0], [43.6, 1202.0], [43.7, 1202.0], [43.8, 1202.0], [43.9, 1202.0], [44.0, 1202.0], [44.1, 1202.0], [44.2, 1202.0], [44.3, 1203.0], [44.4, 1203.0], [44.5, 1204.0], [44.6, 1204.0], [44.7, 1204.0], [44.8, 1204.0], [44.9, 1204.0], [45.0, 1205.0], [45.1, 1206.0], [45.2, 1207.0], [45.3, 1207.0], [45.4, 1208.0], [45.5, 1208.0], [45.6, 1209.0], [45.7, 1210.0], [45.8, 1211.0], [45.9, 1211.0], [46.0, 1212.0], [46.1, 1212.0], [46.2, 1213.0], [46.3, 1213.0], [46.4, 1213.0], [46.5, 1213.0], [46.6, 1214.0], [46.7, 1215.0], [46.8, 1215.0], [46.9, 1215.0], [47.0, 1216.0], [47.1, 1217.0], [47.2, 1217.0], [47.3, 1218.0], [47.4, 1218.0], [47.5, 1218.0], [47.6, 1219.0], [47.7, 1219.0], [47.8, 1219.0], [47.9, 1219.0], [48.0, 1220.0], [48.1, 1220.0], [48.2, 1221.0], [48.3, 1221.0], [48.4, 1222.0], [48.5, 1222.0], [48.6, 1222.0], [48.7, 1223.0], [48.8, 1223.0], [48.9, 1224.0], [49.0, 1224.0], [49.1, 1224.0], [49.2, 1224.0], [49.3, 1225.0], [49.4, 1225.0], [49.5, 1226.0], [49.6, 1227.0], [49.7, 1227.0], [49.8, 1228.0], [49.9, 1228.0], [50.0, 1228.0], [50.1, 1228.0], [50.2, 1230.0], [50.3, 1232.0], [50.4, 1232.0], [50.5, 1232.0], [50.6, 1232.0], [50.7, 1233.0], [50.8, 1233.0], [50.9, 1233.0], [51.0, 1233.0], [51.1, 1235.0], [51.2, 1235.0], [51.3, 1238.0], [51.4, 1240.0], [51.5, 1241.0], [51.6, 1241.0], [51.7, 1242.0], [51.8, 1242.0], [51.9, 1244.0], [52.0, 1244.0], [52.1, 1245.0], [52.2, 1246.0], [52.3, 1246.0], [52.4, 1247.0], [52.5, 1247.0], [52.6, 1247.0], [52.7, 1248.0], [52.8, 1248.0], [52.9, 1248.0], [53.0, 1248.0], [53.1, 1248.0], [53.2, 1249.0], [53.3, 1249.0], [53.4, 1250.0], [53.5, 1250.0], [53.6, 1250.0], [53.7, 1250.0], [53.8, 1251.0], [53.9, 1251.0], [54.0, 1252.0], [54.1, 1254.0], [54.2, 1254.0], [54.3, 1255.0], [54.4, 1255.0], [54.5, 1256.0], [54.6, 1256.0], [54.7, 1256.0], [54.8, 1256.0], [54.9, 1257.0], [55.0, 1258.0], [55.1, 1258.0], [55.2, 1259.0], [55.3, 1261.0], [55.4, 1263.0], [55.5, 1263.0], [55.6, 1263.0], [55.7, 1264.0], [55.8, 1264.0], [55.9, 1264.0], [56.0, 1265.0], [56.1, 1265.0], [56.2, 1267.0], [56.3, 1268.0], [56.4, 1269.0], [56.5, 1272.0], [56.6, 1272.0], [56.7, 1272.0], [56.8, 1274.0], [56.9, 1274.0], [57.0, 1274.0], [57.1, 1274.0], [57.2, 1274.0], [57.3, 1275.0], [57.4, 1275.0], [57.5, 1276.0], [57.6, 1277.0], [57.7, 1278.0], [57.8, 1279.0], [57.9, 1280.0], [58.0, 1280.0], [58.1, 1282.0], [58.2, 1282.0], [58.3, 1283.0], [58.4, 1283.0], [58.5, 1283.0], [58.6, 1283.0], [58.7, 1285.0], [58.8, 1285.0], [58.9, 1286.0], [59.0, 1287.0], [59.1, 1289.0], [59.2, 1289.0], [59.3, 1289.0], [59.4, 1290.0], [59.5, 1291.0], [59.6, 1291.0], [59.7, 1291.0], [59.8, 1292.0], [59.9, 1292.0], [60.0, 1294.0], [60.1, 1294.0], [60.2, 1295.0], [60.3, 1295.0], [60.4, 1295.0], [60.5, 1297.0], [60.6, 1297.0], [60.7, 1297.0], [60.8, 1298.0], [60.9, 1298.0], [61.0, 1298.0], [61.1, 1299.0], [61.2, 1299.0], [61.3, 1300.0], [61.4, 1300.0], [61.5, 1301.0], [61.6, 1302.0], [61.7, 1302.0], [61.8, 1302.0], [61.9, 1303.0], [62.0, 1304.0], [62.1, 1305.0], [62.2, 1305.0], [62.3, 1305.0], [62.4, 1306.0], [62.5, 1306.0], [62.6, 1307.0], [62.7, 1307.0], [62.8, 1308.0], [62.9, 1308.0], [63.0, 1309.0], [63.1, 1309.0], [63.2, 1311.0], [63.3, 1311.0], [63.4, 1311.0], [63.5, 1312.0], [63.6, 1312.0], [63.7, 1312.0], [63.8, 1314.0], [63.9, 1314.0], [64.0, 1314.0], [64.1, 1314.0], [64.2, 1314.0], [64.3, 1315.0], [64.4, 1315.0], [64.5, 1315.0], [64.6, 1315.0], [64.7, 1317.0], [64.8, 1319.0], [64.9, 1319.0], [65.0, 1319.0], [65.1, 1320.0], [65.2, 1321.0], [65.3, 1322.0], [65.4, 1322.0], [65.5, 1322.0], [65.6, 1323.0], [65.7, 1323.0], [65.8, 1323.0], [65.9, 1323.0], [66.0, 1323.0], [66.1, 1325.0], [66.2, 1325.0], [66.3, 1325.0], [66.4, 1325.0], [66.5, 1330.0], [66.6, 1331.0], [66.7, 1331.0], [66.8, 1332.0], [66.9, 1332.0], [67.0, 1332.0], [67.1, 1332.0], [67.2, 1332.0], [67.3, 1333.0], [67.4, 1333.0], [67.5, 1333.0], [67.6, 1333.0], [67.7, 1334.0], [67.8, 1334.0], [67.9, 1336.0], [68.0, 1339.0], [68.1, 1339.0], [68.2, 1339.0], [68.3, 1341.0], [68.4, 1341.0], [68.5, 1342.0], [68.6, 1342.0], [68.7, 1344.0], [68.8, 1344.0], [68.9, 1344.0], [69.0, 1344.0], [69.1, 1345.0], [69.2, 1345.0], [69.3, 1347.0], [69.4, 1347.0], [69.5, 1347.0], [69.6, 1350.0], [69.7, 1350.0], [69.8, 1350.0], [69.9, 1352.0], [70.0, 1353.0], [70.1, 1353.0], [70.2, 1354.0], [70.3, 1354.0], [70.4, 1355.0], [70.5, 1356.0], [70.6, 1357.0], [70.7, 1358.0], [70.8, 1358.0], [70.9, 1358.0], [71.0, 1359.0], [71.1, 1359.0], [71.2, 1359.0], [71.3, 1359.0], [71.4, 1359.0], [71.5, 1360.0], [71.6, 1360.0], [71.7, 1361.0], [71.8, 1361.0], [71.9, 1361.0], [72.0, 1361.0], [72.1, 1361.0], [72.2, 1361.0], [72.3, 1361.0], [72.4, 1362.0], [72.5, 1362.0], [72.6, 1363.0], [72.7, 1363.0], [72.8, 1363.0], [72.9, 1364.0], [73.0, 1364.0], [73.1, 1367.0], [73.2, 1368.0], [73.3, 1368.0], [73.4, 1373.0], [73.5, 1373.0], [73.6, 1373.0], [73.7, 1373.0], [73.8, 1373.0], [73.9, 1373.0], [74.0, 1374.0], [74.1, 1374.0], [74.2, 1375.0], [74.3, 1375.0], [74.4, 1376.0], [74.5, 1376.0], [74.6, 1376.0], [74.7, 1377.0], [74.8, 1378.0], [74.9, 1378.0], [75.0, 1378.0], [75.1, 1379.0], [75.2, 1379.0], [75.3, 1381.0], [75.4, 1382.0], [75.5, 1382.0], [75.6, 1382.0], [75.7, 1384.0], [75.8, 1384.0], [75.9, 1386.0], [76.0, 1386.0], [76.1, 1387.0], [76.2, 1396.0], [76.3, 1397.0], [76.4, 1399.0], [76.5, 1399.0], [76.6, 1400.0], [76.7, 1401.0], [76.8, 1401.0], [76.9, 1402.0], [77.0, 1402.0], [77.1, 1402.0], [77.2, 1403.0], [77.3, 1404.0], [77.4, 1405.0], [77.5, 1405.0], [77.6, 1406.0], [77.7, 1407.0], [77.8, 1407.0], [77.9, 1408.0], [78.0, 1413.0], [78.1, 1413.0], [78.2, 1414.0], [78.3, 1417.0], [78.4, 1417.0], [78.5, 1417.0], [78.6, 1418.0], [78.7, 1418.0], [78.8, 1419.0], [78.9, 1419.0], [79.0, 1419.0], [79.1, 1419.0], [79.2, 1420.0], [79.3, 1420.0], [79.4, 1420.0], [79.5, 1421.0], [79.6, 1422.0], [79.7, 1422.0], [79.8, 1423.0], [79.9, 1424.0], [80.0, 1426.0], [80.1, 1428.0], [80.2, 1429.0], [80.3, 1429.0], [80.4, 1429.0], [80.5, 1429.0], [80.6, 1429.0], [80.7, 1431.0], [80.8, 1432.0], [80.9, 1432.0], [81.0, 1433.0], [81.1, 1434.0], [81.2, 1435.0], [81.3, 1436.0], [81.4, 1437.0], [81.5, 1438.0], [81.6, 1438.0], [81.7, 1439.0], [81.8, 1439.0], [81.9, 1440.0], [82.0, 1442.0], [82.1, 1442.0], [82.2, 1442.0], [82.3, 1443.0], [82.4, 1444.0], [82.5, 1444.0], [82.6, 1445.0], [82.7, 1445.0], [82.8, 1445.0], [82.9, 1445.0], [83.0, 1448.0], [83.1, 1448.0], [83.2, 1449.0], [83.3, 1450.0], [83.4, 1451.0], [83.5, 1451.0], [83.6, 1452.0], [83.7, 1452.0], [83.8, 1452.0], [83.9, 1453.0], [84.0, 1454.0], [84.1, 1454.0], [84.2, 1455.0], [84.3, 1457.0], [84.4, 1457.0], [84.5, 1459.0], [84.6, 1461.0], [84.7, 1462.0], [84.8, 1462.0], [84.9, 1463.0], [85.0, 1464.0], [85.1, 1464.0], [85.2, 1464.0], [85.3, 1467.0], [85.4, 1467.0], [85.5, 1469.0], [85.6, 1471.0], [85.7, 1471.0], [85.8, 1473.0], [85.9, 1474.0], [86.0, 1474.0], [86.1, 1477.0], [86.2, 1479.0], [86.3, 1479.0], [86.4, 1481.0], [86.5, 1484.0], [86.6, 1484.0], [86.7, 1484.0], [86.8, 1485.0], [86.9, 1486.0], [87.0, 1487.0], [87.1, 1487.0], [87.2, 1488.0], [87.3, 1488.0], [87.4, 1491.0], [87.5, 1492.0], [87.6, 1493.0], [87.7, 1495.0], [87.8, 1495.0], [87.9, 1495.0], [88.0, 1495.0], [88.1, 1496.0], [88.2, 1496.0], [88.3, 1498.0], [88.4, 1498.0], [88.5, 1499.0], [88.6, 1499.0], [88.7, 1499.0], [88.8, 1501.0], [88.9, 1501.0], [89.0, 1504.0], [89.1, 1504.0], [89.2, 1504.0], [89.3, 1505.0], [89.4, 1507.0], [89.5, 1512.0], [89.6, 1513.0], [89.7, 1514.0], [89.8, 1519.0], [89.9, 1519.0], [90.0, 1519.0], [90.1, 1522.0], [90.2, 1522.0], [90.3, 1522.0], [90.4, 1523.0], [90.5, 1523.0], [90.6, 1523.0], [90.7, 1526.0], [90.8, 1526.0], [90.9, 1530.0], [91.0, 1531.0], [91.1, 1531.0], [91.2, 1532.0], [91.3, 1533.0], [91.4, 1535.0], [91.5, 1539.0], [91.6, 1540.0], [91.7, 1541.0], [91.8, 1541.0], [91.9, 1542.0], [92.0, 1544.0], [92.1, 1544.0], [92.2, 1544.0], [92.3, 1545.0], [92.4, 1545.0], [92.5, 1555.0], [92.6, 1557.0], [92.7, 1557.0], [92.8, 1561.0], [92.9, 1562.0], [93.0, 1562.0], [93.1, 1563.0], [93.2, 1565.0], [93.3, 1565.0], [93.4, 1566.0], [93.5, 1566.0], [93.6, 1567.0], [93.7, 1567.0], [93.8, 1568.0], [93.9, 1570.0], [94.0, 1570.0], [94.1, 1570.0], [94.2, 1571.0], [94.3, 1571.0], [94.4, 1571.0], [94.5, 1572.0], [94.6, 1574.0], [94.7, 1575.0], [94.8, 1578.0], [94.9, 1579.0], [95.0, 1579.0], [95.1, 1580.0], [95.2, 1581.0], [95.3, 1581.0], [95.4, 1589.0], [95.5, 1590.0], [95.6, 1590.0], [95.7, 1590.0], [95.8, 1598.0], [95.9, 1599.0], [96.0, 1600.0], [96.1, 1605.0], [96.2, 1605.0], [96.3, 1608.0], [96.4, 1622.0], [96.5, 1623.0], [96.6, 1629.0], [96.7, 1630.0], [96.8, 1630.0], [96.9, 1630.0], [97.0, 1637.0], [97.1, 1643.0], [97.2, 1644.0], [97.3, 1650.0], [97.4, 1662.0], [97.5, 1662.0], [97.6, 1663.0], [97.7, 1665.0], [97.8, 1674.0], [97.9, 1678.0], [98.0, 1692.0], [98.1, 1692.0], [98.2, 1713.0], [98.3, 1722.0], [98.4, 1723.0], [98.5, 1730.0], [98.6, 1748.0], [98.7, 1755.0], [98.8, 1755.0], [98.9, 1818.0], [99.0, 1845.0], [99.1, 1862.0], [99.2, 1915.0], [99.3, 1996.0], [99.4, 1996.0], [99.5, 2080.0], [99.6, 2804.0], [99.7, 3361.0], [99.8, 4674.0], [99.9, 4762.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 315.0, "series": [{"data": [[2100.0, 84.0], [2200.0, 46.0], [2300.0, 28.0], [2400.0, 17.0], [2500.0, 10.0], [2600.0, 3.0], [2700.0, 2.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 2.0], [3200.0, 2.0], [3400.0, 1.0], [3500.0, 1.0], [4500.0, 1.0], [4600.0, 1.0], [4700.0, 1.0], [1500.0, 18.0], [1600.0, 88.0], [1700.0, 150.0], [1800.0, 146.0], [1900.0, 121.0], [2000.0, 136.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[2200.0, 1.0], [1100.0, 18.0], [600.0, 225.0], [700.0, 315.0], [800.0, 179.0], [3500.0, 1.0], [900.0, 70.0], [1000.0, 38.0], [500.0, 1.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[2800.0, 1.0], [800.0, 1.0], [3300.0, 1.0], [900.0, 73.0], [1000.0, 158.0], [1100.0, 129.0], [4600.0, 1.0], [1200.0, 155.0], [4700.0, 1.0], [1300.0, 129.0], [1400.0, 103.0], [1500.0, 61.0], [1600.0, 18.0], [1700.0, 6.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 1.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 959.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1594.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1594.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 959.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.339285714285714, "minX": 1.7061927E12, "maxY": 25.0, "series": [{"data": [[1.70619288E12, 18.05882352941177], [1.70619276E12, 24.890067502410798], [1.70619282E12, 25.0], [1.7061927E12, 14.339285714285714]], "isOverall": false, "label": "25 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619288E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 672.0, "minX": 1.0, "maxY": 2051.5833333333335, "series": [{"data": [[8.0, 1993.8333333333333], [2.0, 1671.0], [9.0, 1890.4], [10.0, 1893.5], [11.0, 1700.5], [3.0, 2017.5], [12.0, 1758.8], [13.0, 1781.75], [14.0, 1735.25], [15.0, 1890.7777777777778], [4.0, 1755.5], [16.0, 2010.142857142857], [17.0, 1970.4166666666665], [18.0, 1855.4444444444443], [19.0, 1761.8181818181818], [5.0, 1714.0], [20.0, 2048.6666666666665], [21.0, 2051.5833333333335], [22.0, 1975.6666666666667], [23.0, 1847.0], [6.0, 1697.2], [24.0, 1951.375], [25.0, 1985.3347578347593], [7.0, 1723.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[23.320185614849176, 1966.8619489559153]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[2.0, 932.0], [3.0, 803.5], [4.0, 700.0], [5.0, 672.0], [6.0, 716.3333333333334], [7.0, 683.8333333333334], [8.0, 903.0], [9.0, 709.0], [10.0, 751.0], [11.0, 678.5], [12.0, 719.7777777777778], [13.0, 740.625], [14.0, 732.4545454545455], [15.0, 827.0], [16.0, 804.75], [1.0, 682.0], [17.0, 769.5555555555555], [18.0, 731.7333333333332], [19.0, 728.0], [20.0, 691.8333333333334], [21.0, 787.3333333333334], [22.0, 832.0909090909091], [23.0, 815.0], [24.0, 727.2631578947368], [25.0, 796.2828571428571]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[23.449292452830193, 788.3962264150942]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 1172.5], [2.0, 956.0], [9.0, 1160.3999999999999], [10.0, 1058.75], [11.0, 1007.0], [12.0, 986.25], [13.0, 1049.5625], [14.0, 1255.5], [15.0, 1191.75], [4.0, 974.0], [16.0, 1083.3333333333333], [1.0, 991.0], [17.0, 1189.4736842105262], [18.0, 1128.0], [19.0, 981.125], [5.0, 987.0], [20.0, 1225.285714285714], [21.0, 1291.5384615384617], [22.0, 1349.5], [23.0, 1219.375], [6.0, 976.25], [24.0, 1159.7142857142858], [25.0, 1282.0226950354615], [7.0, 977.3333333333334]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[23.498220640569432, 1258.9561091340458]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4305.833333333333, "minX": 1.7061927E12, "maxY": 55652.7, "series": [{"data": [[1.70619288E12, 7812.816666666667], [1.70619276E12, 26993.683333333334], [1.70619282E12, 26916.85], [1.7061927E12, 4305.833333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70619288E12, 16308.1], [1.70619276E12, 55368.01666666667], [1.70619282E12, 55652.7], [1.7061927E12, 8949.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619288E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 752.490909090909, "minX": 1.7061927E12, "maxY": 1998.6271676300578, "series": [{"data": [[1.70619288E12, 1924.378378378378], [1.70619276E12, 1998.6271676300578], [1.70619282E12, 1967.4752186588928], [1.7061927E12, 1862.2580645161293]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619288E12, 769.3737373737371], [1.70619276E12, 802.8542857142857], [1.70619282E12, 784.9011627906978], [1.7061927E12, 752.490909090909]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619288E12, 1187.9166666666665], [1.70619276E12, 1294.4545454545453], [1.70619282E12, 1271.7323943661982], [1.7061927E12, 1066.3921568627452]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619288E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 752.4, "minX": 1.7061927E12, "maxY": 1998.572254335259, "series": [{"data": [[1.70619288E12, 1924.3513513513515], [1.70619276E12, 1998.572254335259], [1.70619282E12, 1967.4373177842574], [1.7061927E12, 1862.1612903225805]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619288E12, 769.3434343434345], [1.70619276E12, 802.8000000000003], [1.70619282E12, 784.8662790697665], [1.7061927E12, 752.4]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619288E12, 1187.8958333333335], [1.70619276E12, 1294.4164222873892], [1.70619282E12, 1271.6929577464794], [1.7061927E12, 1066.2549019607843]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619288E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7061927E12, "maxY": 741.1935483870968, "series": [{"data": [[1.70619288E12, 738.4954954954951], [1.70619276E12, 734.8468208092482], [1.70619282E12, 723.9446064139942], [1.7061927E12, 741.1935483870968]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619288E12, 0.0], [1.70619276E12, 0.0], [1.70619282E12, 0.0], [1.7061927E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619288E12, 0.0], [1.70619276E12, 0.0], [1.70619282E12, 0.0], [1.7061927E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619288E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 596.0, "minX": 1.7061927E12, "maxY": 4772.0, "series": [{"data": [[1.70619288E12, 2589.0], [1.70619276E12, 4772.0], [1.70619282E12, 4603.0], [1.7061927E12, 2431.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70619288E12, 2051.6], [1.70619276E12, 2124.0], [1.70619282E12, 2044.8000000000002], [1.7061927E12, 1994.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70619288E12, 2350.3900000000003], [1.70619276E12, 3019.879999999981], [1.70619282E12, 2503.6899999999987], [1.7061927E12, 2377.8700000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70619288E12, 2101.7999999999997], [1.70619276E12, 2226.6999999999994], [1.70619282E12, 2193.0], [1.7061927E12, 2090.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70619288E12, 632.0], [1.70619276E12, 607.0], [1.70619282E12, 596.0], [1.7061927E12, 624.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70619288E12, 1215.5], [1.70619276E12, 1261.0], [1.70619282E12, 1248.0], [1.7061927E12, 1036.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619288E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 819.0, "minX": 1.0, "maxY": 1434.0, "series": [{"data": [[2.0, 819.0], [3.0, 932.0], [4.0, 980.5], [5.0, 1370.5], [6.0, 990.5], [7.0, 918.0], [8.0, 1242.5], [9.0, 1070.0], [10.0, 1179.0], [11.0, 1005.5], [12.0, 1137.5], [13.0, 1274.5], [14.0, 1214.0], [15.0, 1285.0], [16.0, 1139.5], [1.0, 991.0], [17.0, 1134.5], [18.0, 1240.5], [19.0, 1354.5], [20.0, 1233.5], [21.0, 1222.0], [22.0, 1412.0], [23.0, 1434.0], [24.0, 1358.5], [25.0, 1348.5], [26.0, 1342.0], [27.0, 1157.0], [28.0, 1012.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 819.0, "minX": 1.0, "maxY": 1434.0, "series": [{"data": [[2.0, 819.0], [3.0, 932.0], [4.0, 980.5], [5.0, 1370.0], [6.0, 990.5], [7.0, 918.0], [8.0, 1242.5], [9.0, 1070.0], [10.0, 1179.0], [11.0, 1005.0], [12.0, 1137.5], [13.0, 1274.5], [14.0, 1214.0], [15.0, 1285.0], [16.0, 1139.0], [1.0, 991.0], [17.0, 1134.5], [18.0, 1240.0], [19.0, 1354.5], [20.0, 1233.5], [21.0, 1222.0], [22.0, 1412.0], [23.0, 1434.0], [24.0, 1358.5], [25.0, 1348.5], [26.0, 1342.0], [27.0, 1156.5], [28.0, 1012.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 28.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.15, "minX": 1.7061927E12, "maxY": 17.35, "series": [{"data": [[1.70619288E12, 4.716666666666667], [1.70619276E12, 17.35], [1.70619282E12, 17.333333333333332], [1.7061927E12, 3.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619288E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.8, "minX": 1.7061927E12, "maxY": 17.366666666666667, "series": [{"data": [[1.70619288E12, 5.1], [1.70619276E12, 17.283333333333335], [1.70619282E12, 17.366666666666667], [1.7061927E12, 2.8]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619288E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.7061927E12, "maxY": 5.916666666666667, "series": [{"data": [[1.70619288E12, 1.6], [1.70619276E12, 5.683333333333334], [1.70619282E12, 5.916666666666667], [1.7061927E12, 0.85]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70619288E12, 1.85], [1.70619276E12, 5.766666666666667], [1.70619282E12, 5.716666666666667], [1.7061927E12, 1.0333333333333334]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70619288E12, 1.65], [1.70619276E12, 5.833333333333333], [1.70619282E12, 5.733333333333333], [1.7061927E12, 0.9166666666666666]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619288E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.8, "minX": 1.7061927E12, "maxY": 17.366666666666667, "series": [{"data": [[1.70619288E12, 5.1], [1.70619276E12, 17.283333333333335], [1.70619282E12, 17.366666666666667], [1.7061927E12, 2.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619288E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

