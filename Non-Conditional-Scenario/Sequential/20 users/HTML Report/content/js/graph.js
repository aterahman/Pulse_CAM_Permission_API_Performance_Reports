/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 587.0, "minX": 0.0, "maxY": 4359.0, "series": [{"data": [[0.0, 1540.0], [0.1, 1540.0], [0.2, 1540.0], [0.3, 1552.0], [0.4, 1552.0], [0.5, 1559.0], [0.6, 1559.0], [0.7, 1559.0], [0.8, 1565.0], [0.9, 1565.0], [1.0, 1574.0], [1.1, 1574.0], [1.2, 1579.0], [1.3, 1579.0], [1.4, 1579.0], [1.5, 1582.0], [1.6, 1582.0], [1.7, 1585.0], [1.8, 1585.0], [1.9, 1585.0], [2.0, 1588.0], [2.1, 1588.0], [2.2, 1591.0], [2.3, 1591.0], [2.4, 1593.0], [2.5, 1593.0], [2.6, 1593.0], [2.7, 1594.0], [2.8, 1594.0], [2.9, 1597.0], [3.0, 1597.0], [3.1, 1597.0], [3.2, 1600.0], [3.3, 1600.0], [3.4, 1602.0], [3.5, 1602.0], [3.6, 1603.0], [3.7, 1603.0], [3.8, 1603.0], [3.9, 1603.0], [4.0, 1603.0], [4.1, 1604.0], [4.2, 1604.0], [4.3, 1604.0], [4.4, 1604.0], [4.5, 1604.0], [4.6, 1605.0], [4.7, 1605.0], [4.8, 1606.0], [4.9, 1606.0], [5.0, 1606.0], [5.1, 1608.0], [5.2, 1608.0], [5.3, 1609.0], [5.4, 1609.0], [5.5, 1609.0], [5.6, 1610.0], [5.7, 1610.0], [5.8, 1611.0], [5.9, 1611.0], [6.0, 1613.0], [6.1, 1613.0], [6.2, 1613.0], [6.3, 1613.0], [6.4, 1613.0], [6.5, 1613.0], [6.6, 1613.0], [6.7, 1613.0], [6.8, 1616.0], [6.9, 1616.0], [7.0, 1616.0], [7.1, 1616.0], [7.2, 1619.0], [7.3, 1619.0], [7.4, 1619.0], [7.5, 1623.0], [7.6, 1623.0], [7.7, 1623.0], [7.8, 1623.0], [7.9, 1623.0], [8.0, 1624.0], [8.1, 1624.0], [8.2, 1624.0], [8.3, 1624.0], [8.4, 1624.0], [8.5, 1624.0], [8.6, 1624.0], [8.7, 1625.0], [8.8, 1625.0], [8.9, 1626.0], [9.0, 1626.0], [9.1, 1626.0], [9.2, 1628.0], [9.3, 1628.0], [9.4, 1628.0], [9.5, 1628.0], [9.6, 1632.0], [9.7, 1632.0], [9.8, 1632.0], [9.9, 1633.0], [10.0, 1633.0], [10.1, 1633.0], [10.2, 1633.0], [10.3, 1633.0], [10.4, 1634.0], [10.5, 1634.0], [10.6, 1635.0], [10.7, 1635.0], [10.8, 1636.0], [10.9, 1636.0], [11.0, 1636.0], [11.1, 1637.0], [11.2, 1637.0], [11.3, 1638.0], [11.4, 1638.0], [11.5, 1638.0], [11.6, 1638.0], [11.7, 1638.0], [11.8, 1640.0], [11.9, 1640.0], [12.0, 1643.0], [12.1, 1643.0], [12.2, 1643.0], [12.3, 1643.0], [12.4, 1643.0], [12.5, 1644.0], [12.6, 1644.0], [12.7, 1644.0], [12.8, 1646.0], [12.9, 1646.0], [13.0, 1647.0], [13.1, 1647.0], [13.2, 1647.0], [13.3, 1647.0], [13.4, 1647.0], [13.5, 1647.0], [13.6, 1647.0], [13.7, 1648.0], [13.8, 1648.0], [13.9, 1648.0], [14.0, 1648.0], [14.1, 1648.0], [14.2, 1648.0], [14.3, 1648.0], [14.4, 1648.0], [14.5, 1648.0], [14.6, 1648.0], [14.7, 1649.0], [14.8, 1649.0], [14.9, 1650.0], [15.0, 1650.0], [15.1, 1650.0], [15.2, 1650.0], [15.3, 1650.0], [15.4, 1651.0], [15.5, 1651.0], [15.6, 1651.0], [15.7, 1651.0], [15.8, 1651.0], [15.9, 1651.0], [16.0, 1651.0], [16.1, 1655.0], [16.2, 1655.0], [16.3, 1655.0], [16.4, 1656.0], [16.5, 1656.0], [16.6, 1656.0], [16.7, 1656.0], [16.8, 1657.0], [16.9, 1657.0], [17.0, 1657.0], [17.1, 1657.0], [17.2, 1657.0], [17.3, 1658.0], [17.4, 1658.0], [17.5, 1658.0], [17.6, 1658.0], [17.7, 1658.0], [17.8, 1661.0], [17.9, 1661.0], [18.0, 1661.0], [18.1, 1661.0], [18.2, 1661.0], [18.3, 1662.0], [18.4, 1662.0], [18.5, 1662.0], [18.6, 1662.0], [18.7, 1662.0], [18.8, 1662.0], [18.9, 1662.0], [19.0, 1662.0], [19.1, 1662.0], [19.2, 1662.0], [19.3, 1662.0], [19.4, 1662.0], [19.5, 1665.0], [19.6, 1665.0], [19.7, 1665.0], [19.8, 1665.0], [19.9, 1665.0], [20.0, 1665.0], [20.1, 1665.0], [20.2, 1666.0], [20.3, 1666.0], [20.4, 1667.0], [20.5, 1667.0], [20.6, 1667.0], [20.7, 1667.0], [20.8, 1667.0], [20.9, 1668.0], [21.0, 1668.0], [21.1, 1668.0], [21.2, 1668.0], [21.3, 1668.0], [21.4, 1668.0], [21.5, 1668.0], [21.6, 1669.0], [21.7, 1669.0], [21.8, 1669.0], [21.9, 1669.0], [22.0, 1669.0], [22.1, 1669.0], [22.2, 1669.0], [22.3, 1669.0], [22.4, 1670.0], [22.5, 1670.0], [22.6, 1670.0], [22.7, 1670.0], [22.8, 1673.0], [22.9, 1673.0], [23.0, 1673.0], [23.1, 1673.0], [23.2, 1673.0], [23.3, 1675.0], [23.4, 1675.0], [23.5, 1675.0], [23.6, 1675.0], [23.7, 1675.0], [23.8, 1675.0], [23.9, 1675.0], [24.0, 1676.0], [24.1, 1676.0], [24.2, 1676.0], [24.3, 1676.0], [24.4, 1676.0], [24.5, 1677.0], [24.6, 1677.0], [24.7, 1677.0], [24.8, 1677.0], [24.9, 1677.0], [25.0, 1681.0], [25.1, 1681.0], [25.2, 1683.0], [25.3, 1683.0], [25.4, 1683.0], [25.5, 1683.0], [25.6, 1683.0], [25.7, 1683.0], [25.8, 1683.0], [25.9, 1683.0], [26.0, 1683.0], [26.1, 1683.0], [26.2, 1685.0], [26.3, 1685.0], [26.4, 1685.0], [26.5, 1685.0], [26.6, 1685.0], [26.7, 1685.0], [26.8, 1685.0], [26.9, 1686.0], [27.0, 1686.0], [27.1, 1687.0], [27.2, 1687.0], [27.3, 1687.0], [27.4, 1687.0], [27.5, 1687.0], [27.6, 1688.0], [27.7, 1688.0], [27.8, 1688.0], [27.9, 1690.0], [28.0, 1690.0], [28.1, 1692.0], [28.2, 1692.0], [28.3, 1694.0], [28.4, 1694.0], [28.5, 1694.0], [28.6, 1695.0], [28.7, 1695.0], [28.8, 1695.0], [28.9, 1695.0], [29.0, 1695.0], [29.1, 1696.0], [29.2, 1696.0], [29.3, 1696.0], [29.4, 1696.0], [29.5, 1697.0], [29.6, 1697.0], [29.7, 1697.0], [29.8, 1697.0], [29.9, 1697.0], [30.0, 1699.0], [30.1, 1699.0], [30.2, 1699.0], [30.3, 1699.0], [30.4, 1699.0], [30.5, 1701.0], [30.6, 1701.0], [30.7, 1702.0], [30.8, 1702.0], [30.9, 1702.0], [31.0, 1705.0], [31.1, 1705.0], [31.2, 1707.0], [31.3, 1707.0], [31.4, 1707.0], [31.5, 1708.0], [31.6, 1708.0], [31.7, 1709.0], [31.8, 1709.0], [31.9, 1709.0], [32.0, 1709.0], [32.1, 1709.0], [32.2, 1710.0], [32.3, 1710.0], [32.4, 1710.0], [32.5, 1710.0], [32.6, 1710.0], [32.7, 1712.0], [32.8, 1712.0], [32.9, 1715.0], [33.0, 1715.0], [33.1, 1716.0], [33.2, 1716.0], [33.3, 1716.0], [33.4, 1716.0], [33.5, 1716.0], [33.6, 1719.0], [33.7, 1719.0], [33.8, 1719.0], [33.9, 1720.0], [34.0, 1720.0], [34.1, 1721.0], [34.2, 1721.0], [34.3, 1721.0], [34.4, 1721.0], [34.5, 1721.0], [34.6, 1722.0], [34.7, 1722.0], [34.8, 1724.0], [34.9, 1724.0], [35.0, 1724.0], [35.1, 1725.0], [35.2, 1725.0], [35.3, 1725.0], [35.4, 1725.0], [35.5, 1727.0], [35.6, 1727.0], [35.7, 1727.0], [35.8, 1727.0], [35.9, 1727.0], [36.0, 1727.0], [36.1, 1727.0], [36.2, 1727.0], [36.3, 1727.0], [36.4, 1727.0], [36.5, 1727.0], [36.6, 1727.0], [36.7, 1727.0], [36.8, 1727.0], [36.9, 1727.0], [37.0, 1729.0], [37.1, 1729.0], [37.2, 1730.0], [37.3, 1730.0], [37.4, 1730.0], [37.5, 1731.0], [37.6, 1731.0], [37.7, 1731.0], [37.8, 1731.0], [37.9, 1731.0], [38.0, 1731.0], [38.1, 1731.0], [38.2, 1731.0], [38.3, 1731.0], [38.4, 1731.0], [38.5, 1731.0], [38.6, 1731.0], [38.7, 1733.0], [38.8, 1733.0], [38.9, 1734.0], [39.0, 1734.0], [39.1, 1736.0], [39.2, 1736.0], [39.3, 1736.0], [39.4, 1736.0], [39.5, 1736.0], [39.6, 1737.0], [39.7, 1737.0], [39.8, 1737.0], [39.9, 1738.0], [40.0, 1738.0], [40.1, 1740.0], [40.2, 1740.0], [40.3, 1740.0], [40.4, 1740.0], [40.5, 1740.0], [40.6, 1741.0], [40.7, 1741.0], [40.8, 1743.0], [40.9, 1743.0], [41.0, 1743.0], [41.1, 1744.0], [41.2, 1744.0], [41.3, 1745.0], [41.4, 1745.0], [41.5, 1745.0], [41.6, 1745.0], [41.7, 1745.0], [41.8, 1746.0], [41.9, 1746.0], [42.0, 1746.0], [42.1, 1746.0], [42.2, 1746.0], [42.3, 1748.0], [42.4, 1748.0], [42.5, 1749.0], [42.6, 1749.0], [42.7, 1749.0], [42.8, 1749.0], [42.9, 1749.0], [43.0, 1749.0], [43.1, 1749.0], [43.2, 1750.0], [43.3, 1750.0], [43.4, 1750.0], [43.5, 1751.0], [43.6, 1751.0], [43.7, 1751.0], [43.8, 1751.0], [43.9, 1752.0], [44.0, 1752.0], [44.1, 1752.0], [44.2, 1752.0], [44.3, 1752.0], [44.4, 1752.0], [44.5, 1752.0], [44.6, 1752.0], [44.7, 1752.0], [44.8, 1752.0], [44.9, 1756.0], [45.0, 1756.0], [45.1, 1758.0], [45.2, 1758.0], [45.3, 1758.0], [45.4, 1760.0], [45.5, 1760.0], [45.6, 1760.0], [45.7, 1760.0], [45.8, 1760.0], [45.9, 1762.0], [46.0, 1762.0], [46.1, 1762.0], [46.2, 1762.0], [46.3, 1764.0], [46.4, 1764.0], [46.5, 1764.0], [46.6, 1766.0], [46.7, 1766.0], [46.8, 1766.0], [46.9, 1766.0], [47.0, 1766.0], [47.1, 1768.0], [47.2, 1768.0], [47.3, 1769.0], [47.4, 1769.0], [47.5, 1772.0], [47.6, 1772.0], [47.7, 1772.0], [47.8, 1772.0], [47.9, 1772.0], [48.0, 1774.0], [48.1, 1774.0], [48.2, 1774.0], [48.3, 1775.0], [48.4, 1775.0], [48.5, 1777.0], [48.6, 1777.0], [48.7, 1779.0], [48.8, 1779.0], [48.9, 1779.0], [49.0, 1779.0], [49.1, 1779.0], [49.2, 1782.0], [49.3, 1782.0], [49.4, 1782.0], [49.5, 1784.0], [49.6, 1784.0], [49.7, 1785.0], [49.8, 1785.0], [49.9, 1785.0], [50.0, 1785.0], [50.1, 1785.0], [50.2, 1786.0], [50.3, 1786.0], [50.4, 1786.0], [50.5, 1786.0], [50.6, 1787.0], [50.7, 1787.0], [50.8, 1787.0], [50.9, 1787.0], [51.0, 1787.0], [51.1, 1788.0], [51.2, 1788.0], [51.3, 1788.0], [51.4, 1789.0], [51.5, 1789.0], [51.6, 1789.0], [51.7, 1789.0], [51.8, 1790.0], [51.9, 1790.0], [52.0, 1790.0], [52.1, 1792.0], [52.2, 1792.0], [52.3, 1792.0], [52.4, 1792.0], [52.5, 1792.0], [52.6, 1792.0], [52.7, 1792.0], [52.8, 1792.0], [52.9, 1792.0], [53.0, 1793.0], [53.1, 1793.0], [53.2, 1793.0], [53.3, 1795.0], [53.4, 1795.0], [53.5, 1798.0], [53.6, 1798.0], [53.7, 1798.0], [53.8, 1799.0], [53.9, 1799.0], [54.0, 1800.0], [54.1, 1800.0], [54.2, 1801.0], [54.3, 1801.0], [54.4, 1801.0], [54.5, 1801.0], [54.6, 1801.0], [54.7, 1802.0], [54.8, 1802.0], [54.9, 1802.0], [55.0, 1803.0], [55.1, 1803.0], [55.2, 1803.0], [55.3, 1803.0], [55.4, 1805.0], [55.5, 1805.0], [55.6, 1805.0], [55.7, 1807.0], [55.8, 1807.0], [55.9, 1808.0], [56.0, 1808.0], [56.1, 1808.0], [56.2, 1808.0], [56.3, 1808.0], [56.4, 1809.0], [56.5, 1809.0], [56.6, 1809.0], [56.7, 1809.0], [56.8, 1809.0], [56.9, 1811.0], [57.0, 1811.0], [57.1, 1812.0], [57.2, 1812.0], [57.3, 1812.0], [57.4, 1813.0], [57.5, 1813.0], [57.6, 1813.0], [57.7, 1813.0], [57.8, 1816.0], [57.9, 1816.0], [58.0, 1816.0], [58.1, 1816.0], [58.2, 1816.0], [58.3, 1817.0], [58.4, 1817.0], [58.5, 1817.0], [58.6, 1817.0], [58.7, 1817.0], [58.8, 1817.0], [58.9, 1817.0], [59.0, 1818.0], [59.1, 1818.0], [59.2, 1818.0], [59.3, 1818.0], [59.4, 1818.0], [59.5, 1819.0], [59.6, 1819.0], [59.7, 1819.0], [59.8, 1819.0], [59.9, 1819.0], [60.0, 1820.0], [60.1, 1820.0], [60.2, 1821.0], [60.3, 1821.0], [60.4, 1821.0], [60.5, 1821.0], [60.6, 1821.0], [60.7, 1822.0], [60.8, 1822.0], [60.9, 1822.0], [61.0, 1822.0], [61.1, 1822.0], [61.2, 1823.0], [61.3, 1823.0], [61.4, 1824.0], [61.5, 1824.0], [61.6, 1824.0], [61.7, 1826.0], [61.8, 1826.0], [61.9, 1827.0], [62.0, 1827.0], [62.1, 1827.0], [62.2, 1827.0], [62.3, 1827.0], [62.4, 1828.0], [62.5, 1828.0], [62.6, 1828.0], [62.7, 1828.0], [62.8, 1828.0], [62.9, 1834.0], [63.0, 1834.0], [63.1, 1835.0], [63.2, 1835.0], [63.3, 1835.0], [63.4, 1836.0], [63.5, 1836.0], [63.6, 1839.0], [63.7, 1839.0], [63.8, 1839.0], [63.9, 1839.0], [64.0, 1839.0], [64.1, 1843.0], [64.2, 1843.0], [64.3, 1847.0], [64.4, 1847.0], [64.5, 1847.0], [64.6, 1849.0], [64.7, 1849.0], [64.8, 1851.0], [64.9, 1851.0], [65.0, 1851.0], [65.1, 1851.0], [65.2, 1851.0], [65.3, 1852.0], [65.4, 1852.0], [65.5, 1852.0], [65.6, 1852.0], [65.7, 1852.0], [65.8, 1859.0], [65.9, 1859.0], [66.0, 1859.0], [66.1, 1859.0], [66.2, 1865.0], [66.3, 1865.0], [66.4, 1865.0], [66.5, 1866.0], [66.6, 1866.0], [66.7, 1868.0], [66.8, 1868.0], [66.9, 1868.0], [67.0, 1870.0], [67.1, 1870.0], [67.2, 1870.0], [67.3, 1870.0], [67.4, 1872.0], [67.5, 1872.0], [67.6, 1872.0], [67.7, 1877.0], [67.8, 1877.0], [67.9, 1877.0], [68.0, 1877.0], [68.1, 1877.0], [68.2, 1877.0], [68.3, 1877.0], [68.4, 1878.0], [68.5, 1878.0], [68.6, 1878.0], [68.7, 1878.0], [68.8, 1878.0], [68.9, 1883.0], [69.0, 1883.0], [69.1, 1885.0], [69.2, 1885.0], [69.3, 1885.0], [69.4, 1895.0], [69.5, 1895.0], [69.6, 1896.0], [69.7, 1896.0], [69.8, 1897.0], [69.9, 1897.0], [70.0, 1897.0], [70.1, 1897.0], [70.2, 1897.0], [70.3, 1898.0], [70.4, 1898.0], [70.5, 1898.0], [70.6, 1900.0], [70.7, 1900.0], [70.8, 1900.0], [70.9, 1900.0], [71.0, 1902.0], [71.1, 1902.0], [71.2, 1902.0], [71.3, 1903.0], [71.4, 1903.0], [71.5, 1905.0], [71.6, 1905.0], [71.7, 1905.0], [71.8, 1907.0], [71.9, 1907.0], [72.0, 1907.0], [72.1, 1907.0], [72.2, 1909.0], [72.3, 1909.0], [72.4, 1909.0], [72.5, 1910.0], [72.6, 1910.0], [72.7, 1911.0], [72.8, 1911.0], [72.9, 1911.0], [73.0, 1913.0], [73.1, 1913.0], [73.2, 1915.0], [73.3, 1915.0], [73.4, 1915.0], [73.5, 1915.0], [73.6, 1915.0], [73.7, 1917.0], [73.8, 1917.0], [73.9, 1917.0], [74.0, 1917.0], [74.1, 1917.0], [74.2, 1917.0], [74.3, 1917.0], [74.4, 1921.0], [74.5, 1921.0], [74.6, 1923.0], [74.7, 1923.0], [74.8, 1923.0], [74.9, 1925.0], [75.0, 1925.0], [75.1, 1926.0], [75.2, 1926.0], [75.3, 1929.0], [75.4, 1929.0], [75.5, 1929.0], [75.6, 1929.0], [75.7, 1929.0], [75.8, 1930.0], [75.9, 1930.0], [76.0, 1930.0], [76.1, 1930.0], [76.2, 1930.0], [76.3, 1930.0], [76.4, 1930.0], [76.5, 1931.0], [76.6, 1931.0], [76.7, 1931.0], [76.8, 1935.0], [76.9, 1935.0], [77.0, 1938.0], [77.1, 1938.0], [77.2, 1938.0], [77.3, 1938.0], [77.4, 1938.0], [77.5, 1939.0], [77.6, 1939.0], [77.7, 1939.0], [77.8, 1939.0], [77.9, 1939.0], [78.0, 1940.0], [78.1, 1940.0], [78.2, 1941.0], [78.3, 1941.0], [78.4, 1941.0], [78.5, 1942.0], [78.6, 1942.0], [78.7, 1943.0], [78.8, 1943.0], [78.9, 1943.0], [79.0, 1943.0], [79.1, 1943.0], [79.2, 1945.0], [79.3, 1945.0], [79.4, 1945.0], [79.5, 1945.0], [79.6, 1945.0], [79.7, 1947.0], [79.8, 1947.0], [79.9, 1949.0], [80.0, 1949.0], [80.1, 1950.0], [80.2, 1950.0], [80.3, 1950.0], [80.4, 1952.0], [80.5, 1952.0], [80.6, 1957.0], [80.7, 1957.0], [80.8, 1957.0], [80.9, 1957.0], [81.0, 1957.0], [81.1, 1958.0], [81.2, 1958.0], [81.3, 1962.0], [81.4, 1962.0], [81.5, 1962.0], [81.6, 1967.0], [81.7, 1967.0], [81.8, 1971.0], [81.9, 1971.0], [82.0, 1971.0], [82.1, 1972.0], [82.2, 1972.0], [82.3, 1972.0], [82.4, 1972.0], [82.5, 1973.0], [82.6, 1973.0], [82.7, 1973.0], [82.8, 1973.0], [82.9, 1973.0], [83.0, 1974.0], [83.1, 1974.0], [83.2, 1974.0], [83.3, 1975.0], [83.4, 1975.0], [83.5, 1977.0], [83.6, 1977.0], [83.7, 1978.0], [83.8, 1978.0], [83.9, 1978.0], [84.0, 1980.0], [84.1, 1980.0], [84.2, 1986.0], [84.3, 1986.0], [84.4, 1986.0], [84.5, 1986.0], [84.6, 1986.0], [84.7, 1987.0], [84.8, 1987.0], [84.9, 1988.0], [85.0, 1988.0], [85.1, 1988.0], [85.2, 1989.0], [85.3, 1989.0], [85.4, 1991.0], [85.5, 1991.0], [85.6, 1991.0], [85.7, 1994.0], [85.8, 1994.0], [85.9, 1995.0], [86.0, 1995.0], [86.1, 1998.0], [86.2, 1998.0], [86.3, 1998.0], [86.4, 1999.0], [86.5, 1999.0], [86.6, 1999.0], [86.7, 1999.0], [86.8, 1999.0], [86.9, 2001.0], [87.0, 2001.0], [87.1, 2001.0], [87.2, 2001.0], [87.3, 2002.0], [87.4, 2002.0], [87.5, 2002.0], [87.6, 2004.0], [87.7, 2004.0], [87.8, 2005.0], [87.9, 2005.0], [88.0, 2005.0], [88.1, 2007.0], [88.2, 2007.0], [88.3, 2011.0], [88.4, 2011.0], [88.5, 2020.0], [88.6, 2020.0], [88.7, 2020.0], [88.8, 2026.0], [88.9, 2026.0], [89.0, 2032.0], [89.1, 2032.0], [89.2, 2032.0], [89.3, 2032.0], [89.4, 2032.0], [89.5, 2033.0], [89.6, 2033.0], [89.7, 2036.0], [89.8, 2036.0], [89.9, 2036.0], [90.0, 2042.0], [90.1, 2042.0], [90.2, 2045.0], [90.3, 2045.0], [90.4, 2045.0], [90.5, 2053.0], [90.6, 2053.0], [90.7, 2054.0], [90.8, 2054.0], [90.9, 2071.0], [91.0, 2071.0], [91.1, 2071.0], [91.2, 2087.0], [91.3, 2087.0], [91.4, 2091.0], [91.5, 2091.0], [91.6, 2091.0], [91.7, 2091.0], [91.8, 2091.0], [91.9, 2097.0], [92.0, 2097.0], [92.1, 2106.0], [92.2, 2106.0], [92.3, 2106.0], [92.4, 2109.0], [92.5, 2109.0], [92.6, 2121.0], [92.7, 2121.0], [92.8, 2121.0], [92.9, 2121.0], [93.0, 2121.0], [93.1, 2121.0], [93.2, 2121.0], [93.3, 2129.0], [93.4, 2129.0], [93.5, 2129.0], [93.6, 2149.0], [93.7, 2149.0], [93.8, 2160.0], [93.9, 2160.0], [94.0, 2160.0], [94.1, 2170.0], [94.2, 2170.0], [94.3, 2172.0], [94.4, 2172.0], [94.5, 2185.0], [94.6, 2185.0], [94.7, 2185.0], [94.8, 2189.0], [94.9, 2189.0], [95.0, 2191.0], [95.1, 2191.0], [95.2, 2191.0], [95.3, 2194.0], [95.4, 2194.0], [95.5, 2204.0], [95.6, 2204.0], [95.7, 2211.0], [95.8, 2211.0], [95.9, 2211.0], [96.0, 2222.0], [96.1, 2222.0], [96.2, 2222.0], [96.3, 2222.0], [96.4, 2222.0], [96.5, 2225.0], [96.6, 2225.0], [96.7, 2266.0], [96.8, 2266.0], [96.9, 2295.0], [97.0, 2295.0], [97.1, 2295.0], [97.2, 2295.0], [97.3, 2295.0], [97.4, 2318.0], [97.5, 2318.0], [97.6, 2318.0], [97.7, 2320.0], [97.8, 2320.0], [97.9, 2358.0], [98.0, 2358.0], [98.1, 2359.0], [98.2, 2359.0], [98.3, 2359.0], [98.4, 2367.0], [98.5, 2367.0], [98.6, 2373.0], [98.7, 2373.0], [98.8, 2373.0], [98.9, 2381.0], [99.0, 2381.0], [99.1, 2386.0], [99.2, 2386.0], [99.3, 2565.0], [99.4, 2565.0], [99.5, 2565.0], [99.6, 2604.0], [99.7, 2604.0], [99.8, 4359.0], [99.9, 4359.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 587.0], [0.1, 587.0], [0.2, 587.0], [0.3, 593.0], [0.4, 593.0], [0.5, 617.0], [0.6, 617.0], [0.7, 617.0], [0.8, 619.0], [0.9, 619.0], [1.0, 626.0], [1.1, 626.0], [1.2, 626.0], [1.3, 629.0], [1.4, 629.0], [1.5, 629.0], [1.6, 629.0], [1.7, 629.0], [1.8, 630.0], [1.9, 630.0], [2.0, 631.0], [2.1, 631.0], [2.2, 631.0], [2.3, 631.0], [2.4, 631.0], [2.5, 632.0], [2.6, 632.0], [2.7, 632.0], [2.8, 632.0], [2.9, 632.0], [3.0, 636.0], [3.1, 636.0], [3.2, 637.0], [3.3, 637.0], [3.4, 637.0], [3.5, 638.0], [3.6, 638.0], [3.7, 639.0], [3.8, 639.0], [3.9, 639.0], [4.0, 639.0], [4.1, 639.0], [4.2, 640.0], [4.3, 640.0], [4.4, 640.0], [4.5, 642.0], [4.6, 642.0], [4.7, 644.0], [4.8, 644.0], [4.9, 644.0], [5.0, 644.0], [5.1, 644.0], [5.2, 647.0], [5.3, 647.0], [5.4, 647.0], [5.5, 647.0], [5.6, 647.0], [5.7, 649.0], [5.8, 649.0], [5.9, 650.0], [6.0, 650.0], [6.1, 650.0], [6.2, 650.0], [6.3, 650.0], [6.4, 651.0], [6.5, 651.0], [6.6, 651.0], [6.7, 651.0], [6.8, 651.0], [6.9, 652.0], [7.0, 652.0], [7.1, 652.0], [7.2, 652.0], [7.3, 652.0], [7.4, 653.0], [7.5, 653.0], [7.6, 653.0], [7.7, 653.0], [7.8, 653.0], [7.9, 654.0], [8.0, 654.0], [8.1, 654.0], [8.2, 654.0], [8.3, 654.0], [8.4, 655.0], [8.5, 655.0], [8.6, 655.0], [8.7, 655.0], [8.8, 655.0], [8.9, 657.0], [9.0, 657.0], [9.1, 657.0], [9.2, 657.0], [9.3, 657.0], [9.4, 658.0], [9.5, 658.0], [9.6, 658.0], [9.7, 658.0], [9.8, 658.0], [9.9, 659.0], [10.0, 659.0], [10.1, 659.0], [10.2, 659.0], [10.3, 659.0], [10.4, 659.0], [10.5, 659.0], [10.6, 659.0], [10.7, 659.0], [10.8, 659.0], [10.9, 660.0], [11.0, 660.0], [11.1, 660.0], [11.2, 660.0], [11.3, 660.0], [11.4, 660.0], [11.5, 660.0], [11.6, 660.0], [11.7, 660.0], [11.8, 661.0], [11.9, 661.0], [12.0, 661.0], [12.1, 661.0], [12.2, 661.0], [12.3, 661.0], [12.4, 661.0], [12.5, 661.0], [12.6, 661.0], [12.7, 661.0], [12.8, 662.0], [12.9, 662.0], [13.0, 662.0], [13.1, 662.0], [13.2, 662.0], [13.3, 662.0], [13.4, 662.0], [13.5, 662.0], [13.6, 662.0], [13.7, 662.0], [13.8, 662.0], [13.9, 662.0], [14.0, 662.0], [14.1, 662.0], [14.2, 662.0], [14.3, 663.0], [14.4, 663.0], [14.5, 663.0], [14.6, 663.0], [14.7, 663.0], [14.8, 663.0], [14.9, 663.0], [15.0, 663.0], [15.1, 663.0], [15.2, 663.0], [15.3, 663.0], [15.4, 663.0], [15.5, 663.0], [15.6, 663.0], [15.7, 663.0], [15.8, 665.0], [15.9, 665.0], [16.0, 666.0], [16.1, 666.0], [16.2, 666.0], [16.3, 666.0], [16.4, 666.0], [16.5, 666.0], [16.6, 666.0], [16.7, 666.0], [16.8, 667.0], [16.9, 667.0], [17.0, 669.0], [17.1, 669.0], [17.2, 669.0], [17.3, 669.0], [17.4, 669.0], [17.5, 670.0], [17.6, 670.0], [17.7, 670.0], [17.8, 670.0], [17.9, 670.0], [18.0, 670.0], [18.1, 670.0], [18.2, 671.0], [18.3, 671.0], [18.4, 671.0], [18.5, 672.0], [18.6, 672.0], [18.7, 672.0], [18.8, 672.0], [18.9, 672.0], [19.0, 672.0], [19.1, 672.0], [19.2, 673.0], [19.3, 673.0], [19.4, 673.0], [19.5, 673.0], [19.6, 673.0], [19.7, 673.0], [19.8, 673.0], [19.9, 673.0], [20.0, 674.0], [20.1, 674.0], [20.2, 675.0], [20.3, 675.0], [20.4, 676.0], [20.5, 676.0], [20.6, 676.0], [20.7, 676.0], [20.8, 676.0], [20.9, 676.0], [21.0, 676.0], [21.1, 676.0], [21.2, 677.0], [21.3, 677.0], [21.4, 678.0], [21.5, 678.0], [21.6, 678.0], [21.7, 678.0], [21.8, 678.0], [21.9, 678.0], [22.0, 678.0], [22.1, 678.0], [22.2, 679.0], [22.3, 679.0], [22.4, 679.0], [22.5, 679.0], [22.6, 679.0], [22.7, 680.0], [22.8, 680.0], [22.9, 680.0], [23.0, 680.0], [23.1, 681.0], [23.2, 681.0], [23.3, 681.0], [23.4, 681.0], [23.5, 681.0], [23.6, 681.0], [23.7, 681.0], [23.8, 681.0], [23.9, 681.0], [24.0, 681.0], [24.1, 681.0], [24.2, 681.0], [24.3, 681.0], [24.4, 682.0], [24.5, 682.0], [24.6, 682.0], [24.7, 682.0], [24.8, 682.0], [24.9, 682.0], [25.0, 682.0], [25.1, 682.0], [25.2, 682.0], [25.3, 682.0], [25.4, 684.0], [25.5, 684.0], [25.6, 684.0], [25.7, 684.0], [25.8, 684.0], [25.9, 684.0], [26.0, 684.0], [26.1, 684.0], [26.2, 684.0], [26.3, 684.0], [26.4, 684.0], [26.5, 684.0], [26.6, 685.0], [26.7, 685.0], [26.8, 685.0], [26.9, 685.0], [27.0, 685.0], [27.1, 685.0], [27.2, 685.0], [27.3, 685.0], [27.4, 685.0], [27.5, 685.0], [27.6, 686.0], [27.7, 686.0], [27.8, 686.0], [27.9, 686.0], [28.0, 686.0], [28.1, 687.0], [28.2, 687.0], [28.3, 687.0], [28.4, 687.0], [28.5, 687.0], [28.6, 687.0], [28.7, 687.0], [28.8, 687.0], [28.9, 687.0], [29.0, 687.0], [29.1, 687.0], [29.2, 687.0], [29.3, 689.0], [29.4, 689.0], [29.5, 689.0], [29.6, 689.0], [29.7, 689.0], [29.8, 690.0], [29.9, 690.0], [30.0, 690.0], [30.1, 690.0], [30.2, 690.0], [30.3, 691.0], [30.4, 691.0], [30.5, 692.0], [30.6, 692.0], [30.7, 692.0], [30.8, 692.0], [30.9, 692.0], [31.0, 693.0], [31.1, 693.0], [31.2, 693.0], [31.3, 693.0], [31.4, 693.0], [31.5, 694.0], [31.6, 694.0], [31.7, 694.0], [31.8, 694.0], [31.9, 694.0], [32.0, 694.0], [32.1, 694.0], [32.2, 694.0], [32.3, 694.0], [32.4, 694.0], [32.5, 694.0], [32.6, 694.0], [32.7, 694.0], [32.8, 694.0], [32.9, 694.0], [33.0, 695.0], [33.1, 695.0], [33.2, 696.0], [33.3, 696.0], [33.4, 696.0], [33.5, 696.0], [33.6, 696.0], [33.7, 697.0], [33.8, 697.0], [33.9, 697.0], [34.0, 697.0], [34.1, 697.0], [34.2, 697.0], [34.3, 697.0], [34.4, 698.0], [34.5, 698.0], [34.6, 698.0], [34.7, 698.0], [34.8, 698.0], [34.9, 699.0], [35.0, 699.0], [35.1, 699.0], [35.2, 700.0], [35.3, 700.0], [35.4, 700.0], [35.5, 700.0], [35.6, 700.0], [35.7, 701.0], [35.8, 701.0], [35.9, 701.0], [36.0, 701.0], [36.1, 701.0], [36.2, 701.0], [36.3, 701.0], [36.4, 701.0], [36.5, 701.0], [36.6, 701.0], [36.7, 702.0], [36.8, 702.0], [36.9, 702.0], [37.0, 702.0], [37.1, 702.0], [37.2, 702.0], [37.3, 702.0], [37.4, 702.0], [37.5, 702.0], [37.6, 702.0], [37.7, 702.0], [37.8, 702.0], [37.9, 702.0], [38.0, 702.0], [38.1, 702.0], [38.2, 702.0], [38.3, 702.0], [38.4, 703.0], [38.5, 703.0], [38.6, 703.0], [38.7, 703.0], [38.8, 703.0], [38.9, 704.0], [39.0, 704.0], [39.1, 704.0], [39.2, 704.0], [39.3, 704.0], [39.4, 704.0], [39.5, 704.0], [39.6, 705.0], [39.7, 705.0], [39.8, 705.0], [39.9, 705.0], [40.0, 705.0], [40.1, 706.0], [40.2, 706.0], [40.3, 706.0], [40.4, 706.0], [40.5, 706.0], [40.6, 706.0], [40.7, 706.0], [40.8, 707.0], [40.9, 707.0], [41.0, 707.0], [41.1, 707.0], [41.2, 707.0], [41.3, 708.0], [41.4, 708.0], [41.5, 708.0], [41.6, 708.0], [41.7, 708.0], [41.8, 708.0], [41.9, 708.0], [42.0, 708.0], [42.1, 709.0], [42.2, 709.0], [42.3, 709.0], [42.4, 709.0], [42.5, 709.0], [42.6, 709.0], [42.7, 709.0], [42.8, 710.0], [42.9, 710.0], [43.0, 710.0], [43.1, 710.0], [43.2, 710.0], [43.3, 710.0], [43.4, 710.0], [43.5, 710.0], [43.6, 710.0], [43.7, 710.0], [43.8, 711.0], [43.9, 711.0], [44.0, 711.0], [44.1, 711.0], [44.2, 711.0], [44.3, 712.0], [44.4, 712.0], [44.5, 712.0], [44.6, 712.0], [44.7, 712.0], [44.8, 712.0], [44.9, 712.0], [45.0, 713.0], [45.1, 713.0], [45.2, 713.0], [45.3, 714.0], [45.4, 714.0], [45.5, 714.0], [45.6, 714.0], [45.7, 714.0], [45.8, 714.0], [45.9, 714.0], [46.0, 714.0], [46.1, 714.0], [46.2, 714.0], [46.3, 714.0], [46.4, 714.0], [46.5, 715.0], [46.6, 715.0], [46.7, 715.0], [46.8, 715.0], [46.9, 715.0], [47.0, 715.0], [47.1, 715.0], [47.2, 716.0], [47.3, 716.0], [47.4, 716.0], [47.5, 716.0], [47.6, 716.0], [47.7, 717.0], [47.8, 717.0], [47.9, 717.0], [48.0, 717.0], [48.1, 717.0], [48.2, 717.0], [48.3, 717.0], [48.4, 717.0], [48.5, 718.0], [48.6, 718.0], [48.7, 719.0], [48.8, 719.0], [48.9, 720.0], [49.0, 720.0], [49.1, 720.0], [49.2, 720.0], [49.3, 720.0], [49.4, 721.0], [49.5, 721.0], [49.6, 721.0], [49.7, 721.0], [49.8, 721.0], [49.9, 722.0], [50.0, 722.0], [50.1, 722.0], [50.2, 723.0], [50.3, 723.0], [50.4, 724.0], [50.5, 724.0], [50.6, 724.0], [50.7, 724.0], [50.8, 724.0], [50.9, 725.0], [51.0, 725.0], [51.1, 725.0], [51.2, 725.0], [51.3, 725.0], [51.4, 725.0], [51.5, 725.0], [51.6, 729.0], [51.7, 729.0], [51.8, 729.0], [51.9, 730.0], [52.0, 730.0], [52.1, 731.0], [52.2, 731.0], [52.3, 731.0], [52.4, 733.0], [52.5, 733.0], [52.6, 733.0], [52.7, 733.0], [52.8, 733.0], [52.9, 733.0], [53.0, 733.0], [53.1, 734.0], [53.2, 734.0], [53.3, 734.0], [53.4, 734.0], [53.5, 734.0], [53.6, 734.0], [53.7, 734.0], [53.8, 734.0], [53.9, 734.0], [54.0, 734.0], [54.1, 735.0], [54.2, 735.0], [54.3, 735.0], [54.4, 735.0], [54.5, 735.0], [54.6, 735.0], [54.7, 735.0], [54.8, 736.0], [54.9, 736.0], [55.0, 736.0], [55.1, 736.0], [55.2, 736.0], [55.3, 737.0], [55.4, 737.0], [55.5, 737.0], [55.6, 737.0], [55.7, 737.0], [55.8, 738.0], [55.9, 738.0], [56.0, 738.0], [56.1, 738.0], [56.2, 738.0], [56.3, 738.0], [56.4, 738.0], [56.5, 738.0], [56.6, 739.0], [56.7, 739.0], [56.8, 740.0], [56.9, 740.0], [57.0, 740.0], [57.1, 740.0], [57.2, 740.0], [57.3, 740.0], [57.4, 740.0], [57.5, 740.0], [57.6, 740.0], [57.7, 740.0], [57.8, 740.0], [57.9, 740.0], [58.0, 741.0], [58.1, 741.0], [58.2, 741.0], [58.3, 741.0], [58.4, 741.0], [58.5, 741.0], [58.6, 741.0], [58.7, 741.0], [58.8, 741.0], [58.9, 741.0], [59.0, 742.0], [59.1, 742.0], [59.2, 742.0], [59.3, 742.0], [59.4, 742.0], [59.5, 742.0], [59.6, 742.0], [59.7, 742.0], [59.8, 743.0], [59.9, 743.0], [60.0, 743.0], [60.1, 743.0], [60.2, 743.0], [60.3, 743.0], [60.4, 743.0], [60.5, 743.0], [60.6, 743.0], [60.7, 744.0], [60.8, 744.0], [60.9, 744.0], [61.0, 745.0], [61.1, 745.0], [61.2, 745.0], [61.3, 745.0], [61.4, 745.0], [61.5, 747.0], [61.6, 747.0], [61.7, 749.0], [61.8, 749.0], [61.9, 749.0], [62.0, 749.0], [62.1, 749.0], [62.2, 750.0], [62.3, 750.0], [62.4, 750.0], [62.5, 751.0], [62.6, 751.0], [62.7, 752.0], [62.8, 752.0], [62.9, 752.0], [63.0, 752.0], [63.1, 752.0], [63.2, 752.0], [63.3, 752.0], [63.4, 753.0], [63.5, 753.0], [63.6, 753.0], [63.7, 753.0], [63.8, 753.0], [63.9, 754.0], [64.0, 754.0], [64.1, 754.0], [64.2, 754.0], [64.3, 754.0], [64.4, 754.0], [64.5, 754.0], [64.6, 754.0], [64.7, 754.0], [64.8, 754.0], [64.9, 755.0], [65.0, 755.0], [65.1, 755.0], [65.2, 756.0], [65.3, 756.0], [65.4, 757.0], [65.5, 757.0], [65.6, 757.0], [65.7, 758.0], [65.8, 758.0], [65.9, 759.0], [66.0, 759.0], [66.1, 759.0], [66.2, 759.0], [66.3, 759.0], [66.4, 760.0], [66.5, 760.0], [66.6, 763.0], [66.7, 763.0], [66.8, 763.0], [66.9, 763.0], [67.0, 763.0], [67.1, 764.0], [67.2, 764.0], [67.3, 764.0], [67.4, 764.0], [67.5, 764.0], [67.6, 764.0], [67.7, 764.0], [67.8, 764.0], [67.9, 765.0], [68.0, 765.0], [68.1, 766.0], [68.2, 766.0], [68.3, 766.0], [68.4, 767.0], [68.5, 767.0], [68.6, 768.0], [68.7, 768.0], [68.8, 768.0], [68.9, 768.0], [69.0, 768.0], [69.1, 770.0], [69.2, 770.0], [69.3, 770.0], [69.4, 770.0], [69.5, 770.0], [69.6, 770.0], [69.7, 770.0], [69.8, 770.0], [69.9, 770.0], [70.0, 770.0], [70.1, 771.0], [70.2, 771.0], [70.3, 772.0], [70.4, 772.0], [70.5, 772.0], [70.6, 773.0], [70.7, 773.0], [70.8, 773.0], [70.9, 773.0], [71.0, 773.0], [71.1, 775.0], [71.2, 775.0], [71.3, 775.0], [71.4, 775.0], [71.5, 777.0], [71.6, 777.0], [71.7, 777.0], [71.8, 777.0], [71.9, 777.0], [72.0, 777.0], [72.1, 777.0], [72.2, 777.0], [72.3, 777.0], [72.4, 777.0], [72.5, 778.0], [72.6, 778.0], [72.7, 778.0], [72.8, 778.0], [72.9, 778.0], [73.0, 779.0], [73.1, 779.0], [73.2, 779.0], [73.3, 779.0], [73.4, 779.0], [73.5, 780.0], [73.6, 780.0], [73.7, 780.0], [73.8, 780.0], [73.9, 780.0], [74.0, 781.0], [74.1, 781.0], [74.2, 781.0], [74.3, 783.0], [74.4, 783.0], [74.5, 784.0], [74.6, 784.0], [74.7, 785.0], [74.8, 785.0], [74.9, 785.0], [75.0, 785.0], [75.1, 785.0], [75.2, 786.0], [75.3, 786.0], [75.4, 786.0], [75.5, 787.0], [75.6, 787.0], [75.7, 790.0], [75.8, 790.0], [75.9, 790.0], [76.0, 791.0], [76.1, 791.0], [76.2, 793.0], [76.3, 793.0], [76.4, 793.0], [76.5, 794.0], [76.6, 794.0], [76.7, 795.0], [76.8, 795.0], [76.9, 795.0], [77.0, 795.0], [77.1, 795.0], [77.2, 796.0], [77.3, 796.0], [77.4, 800.0], [77.5, 800.0], [77.6, 800.0], [77.7, 800.0], [77.8, 800.0], [77.9, 803.0], [78.0, 803.0], [78.1, 803.0], [78.2, 807.0], [78.3, 807.0], [78.4, 807.0], [78.5, 807.0], [78.6, 807.0], [78.7, 808.0], [78.8, 808.0], [78.9, 813.0], [79.0, 813.0], [79.1, 813.0], [79.2, 814.0], [79.3, 814.0], [79.4, 814.0], [79.5, 814.0], [79.6, 814.0], [79.7, 820.0], [79.8, 820.0], [79.9, 822.0], [80.0, 822.0], [80.1, 823.0], [80.2, 823.0], [80.3, 823.0], [80.4, 823.0], [80.5, 823.0], [80.6, 831.0], [80.7, 831.0], [80.8, 831.0], [80.9, 832.0], [81.0, 832.0], [81.1, 833.0], [81.2, 833.0], [81.3, 833.0], [81.4, 843.0], [81.5, 843.0], [81.6, 844.0], [81.7, 844.0], [81.8, 844.0], [81.9, 845.0], [82.0, 845.0], [82.1, 848.0], [82.2, 848.0], [82.3, 848.0], [82.4, 850.0], [82.5, 850.0], [82.6, 851.0], [82.7, 851.0], [82.8, 851.0], [82.9, 852.0], [83.0, 852.0], [83.1, 856.0], [83.2, 856.0], [83.3, 858.0], [83.4, 858.0], [83.5, 858.0], [83.6, 863.0], [83.7, 863.0], [83.8, 863.0], [83.9, 863.0], [84.0, 863.0], [84.1, 864.0], [84.2, 864.0], [84.3, 873.0], [84.4, 873.0], [84.5, 873.0], [84.6, 881.0], [84.7, 881.0], [84.8, 881.0], [84.9, 881.0], [85.0, 881.0], [85.1, 883.0], [85.2, 883.0], [85.3, 883.0], [85.4, 883.0], [85.5, 883.0], [85.6, 892.0], [85.7, 892.0], [85.8, 894.0], [85.9, 894.0], [86.0, 894.0], [86.1, 894.0], [86.2, 894.0], [86.3, 894.0], [86.4, 894.0], [86.5, 896.0], [86.6, 896.0], [86.7, 896.0], [86.8, 900.0], [86.9, 900.0], [87.0, 903.0], [87.1, 903.0], [87.2, 903.0], [87.3, 910.0], [87.4, 910.0], [87.5, 910.0], [87.6, 910.0], [87.7, 910.0], [87.8, 912.0], [87.9, 912.0], [88.0, 914.0], [88.1, 914.0], [88.2, 914.0], [88.3, 918.0], [88.4, 918.0], [88.5, 920.0], [88.6, 920.0], [88.7, 920.0], [88.8, 920.0], [88.9, 920.0], [89.0, 924.0], [89.1, 924.0], [89.2, 925.0], [89.3, 925.0], [89.4, 925.0], [89.5, 928.0], [89.6, 928.0], [89.7, 933.0], [89.8, 933.0], [89.9, 933.0], [90.0, 934.0], [90.1, 934.0], [90.2, 937.0], [90.3, 937.0], [90.4, 937.0], [90.5, 939.0], [90.6, 939.0], [90.7, 939.0], [90.8, 939.0], [90.9, 939.0], [91.0, 947.0], [91.1, 947.0], [91.2, 955.0], [91.3, 955.0], [91.4, 955.0], [91.5, 956.0], [91.6, 956.0], [91.7, 957.0], [91.8, 957.0], [91.9, 958.0], [92.0, 958.0], [92.1, 958.0], [92.2, 959.0], [92.3, 959.0], [92.4, 960.0], [92.5, 960.0], [92.6, 960.0], [92.7, 963.0], [92.8, 963.0], [92.9, 965.0], [93.0, 965.0], [93.1, 965.0], [93.2, 965.0], [93.3, 965.0], [93.4, 966.0], [93.5, 966.0], [93.6, 966.0], [93.7, 967.0], [93.8, 967.0], [93.9, 968.0], [94.0, 968.0], [94.1, 968.0], [94.2, 969.0], [94.3, 969.0], [94.4, 972.0], [94.5, 972.0], [94.6, 980.0], [94.7, 980.0], [94.8, 980.0], [94.9, 991.0], [95.0, 991.0], [95.1, 1009.0], [95.2, 1009.0], [95.3, 1009.0], [95.4, 1020.0], [95.5, 1020.0], [95.6, 1022.0], [95.7, 1022.0], [95.8, 1022.0], [95.9, 1034.0], [96.0, 1034.0], [96.1, 1042.0], [96.2, 1042.0], [96.3, 1042.0], [96.4, 1052.0], [96.5, 1052.0], [96.6, 1054.0], [96.7, 1054.0], [96.8, 1054.0], [96.9, 1057.0], [97.0, 1057.0], [97.1, 1083.0], [97.2, 1083.0], [97.3, 1108.0], [97.4, 1108.0], [97.5, 1108.0], [97.6, 1112.0], [97.7, 1112.0], [97.8, 1113.0], [97.9, 1113.0], [98.0, 1113.0], [98.1, 1121.0], [98.2, 1121.0], [98.3, 1123.0], [98.4, 1123.0], [98.5, 1123.0], [98.6, 1155.0], [98.7, 1155.0], [98.8, 1163.0], [98.9, 1163.0], [99.0, 1163.0], [99.1, 1189.0], [99.2, 1189.0], [99.3, 1250.0], [99.4, 1250.0], [99.5, 1250.0], [99.6, 1393.0], [99.7, 1393.0], [99.8, 3592.0], [99.9, 3592.0], [100.0, 3592.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 895.0], [0.1, 895.0], [0.2, 895.0], [0.3, 915.0], [0.4, 915.0], [0.5, 921.0], [0.6, 921.0], [0.7, 921.0], [0.8, 921.0], [0.9, 921.0], [1.0, 924.0], [1.1, 924.0], [1.2, 924.0], [1.3, 924.0], [1.4, 924.0], [1.5, 935.0], [1.6, 935.0], [1.7, 935.0], [1.8, 936.0], [1.9, 936.0], [2.0, 940.0], [2.1, 940.0], [2.2, 940.0], [2.3, 941.0], [2.4, 941.0], [2.5, 944.0], [2.6, 944.0], [2.7, 944.0], [2.8, 945.0], [2.9, 945.0], [3.0, 945.0], [3.1, 945.0], [3.2, 945.0], [3.3, 947.0], [3.4, 947.0], [3.5, 951.0], [3.6, 951.0], [3.7, 951.0], [3.8, 951.0], [3.9, 951.0], [4.0, 952.0], [4.1, 952.0], [4.2, 952.0], [4.3, 954.0], [4.4, 954.0], [4.5, 954.0], [4.6, 954.0], [4.7, 954.0], [4.8, 955.0], [4.9, 955.0], [5.0, 956.0], [5.1, 956.0], [5.2, 956.0], [5.3, 956.0], [5.4, 956.0], [5.5, 956.0], [5.6, 956.0], [5.7, 956.0], [5.8, 957.0], [5.9, 957.0], [6.0, 957.0], [6.1, 957.0], [6.2, 957.0], [6.3, 957.0], [6.4, 957.0], [6.5, 957.0], [6.6, 957.0], [6.7, 958.0], [6.8, 958.0], [6.9, 958.0], [7.0, 960.0], [7.1, 960.0], [7.2, 961.0], [7.3, 961.0], [7.4, 961.0], [7.5, 962.0], [7.6, 962.0], [7.7, 963.0], [7.8, 963.0], [7.9, 963.0], [8.0, 964.0], [8.1, 964.0], [8.2, 964.0], [8.3, 964.0], [8.4, 964.0], [8.5, 965.0], [8.6, 965.0], [8.7, 965.0], [8.8, 965.0], [8.9, 965.0], [9.0, 965.0], [9.1, 965.0], [9.2, 965.0], [9.3, 965.0], [9.4, 965.0], [9.5, 966.0], [9.6, 966.0], [9.7, 967.0], [9.8, 967.0], [9.9, 967.0], [10.0, 967.0], [10.1, 967.0], [10.2, 967.0], [10.3, 967.0], [10.4, 967.0], [10.5, 968.0], [10.6, 968.0], [10.7, 969.0], [10.8, 969.0], [10.9, 969.0], [11.0, 971.0], [11.1, 971.0], [11.2, 971.0], [11.3, 971.0], [11.4, 971.0], [11.5, 972.0], [11.6, 972.0], [11.7, 973.0], [11.8, 973.0], [11.9, 973.0], [12.0, 973.0], [12.1, 973.0], [12.2, 974.0], [12.3, 974.0], [12.4, 974.0], [12.5, 975.0], [12.6, 975.0], [12.7, 975.0], [12.8, 975.0], [12.9, 975.0], [13.0, 975.0], [13.1, 975.0], [13.2, 976.0], [13.3, 976.0], [13.4, 977.0], [13.5, 977.0], [13.6, 977.0], [13.7, 978.0], [13.8, 978.0], [13.9, 978.0], [14.0, 978.0], [14.1, 978.0], [14.2, 980.0], [14.3, 980.0], [14.4, 980.0], [14.5, 980.0], [14.6, 980.0], [14.7, 981.0], [14.8, 981.0], [14.9, 983.0], [15.0, 983.0], [15.1, 983.0], [15.2, 983.0], [15.3, 983.0], [15.4, 983.0], [15.5, 983.0], [15.6, 983.0], [15.7, 984.0], [15.8, 984.0], [15.9, 986.0], [16.0, 986.0], [16.1, 986.0], [16.2, 986.0], [16.3, 986.0], [16.4, 988.0], [16.5, 988.0], [16.6, 988.0], [16.7, 988.0], [16.8, 988.0], [16.9, 990.0], [17.0, 990.0], [17.1, 990.0], [17.2, 992.0], [17.3, 992.0], [17.4, 992.0], [17.5, 992.0], [17.6, 992.0], [17.7, 992.0], [17.8, 992.0], [17.9, 994.0], [18.0, 994.0], [18.1, 994.0], [18.2, 995.0], [18.3, 995.0], [18.4, 995.0], [18.5, 995.0], [18.6, 995.0], [18.7, 997.0], [18.8, 997.0], [18.9, 997.0], [19.0, 997.0], [19.1, 997.0], [19.2, 997.0], [19.3, 997.0], [19.4, 998.0], [19.5, 998.0], [19.6, 998.0], [19.7, 998.0], [19.8, 998.0], [19.9, 999.0], [20.0, 999.0], [20.1, 1000.0], [20.2, 1000.0], [20.3, 1000.0], [20.4, 1001.0], [20.5, 1001.0], [20.6, 1003.0], [20.7, 1003.0], [20.8, 1003.0], [20.9, 1004.0], [21.0, 1004.0], [21.1, 1005.0], [21.2, 1005.0], [21.3, 1005.0], [21.4, 1005.0], [21.5, 1005.0], [21.6, 1007.0], [21.7, 1007.0], [21.8, 1007.0], [21.9, 1007.0], [22.0, 1007.0], [22.1, 1007.0], [22.2, 1007.0], [22.3, 1007.0], [22.4, 1007.0], [22.5, 1007.0], [22.6, 1008.0], [22.7, 1008.0], [22.8, 1008.0], [22.9, 1008.0], [23.0, 1008.0], [23.1, 1009.0], [23.2, 1009.0], [23.3, 1009.0], [23.4, 1009.0], [23.5, 1009.0], [23.6, 1011.0], [23.7, 1011.0], [23.8, 1011.0], [23.9, 1011.0], [24.0, 1011.0], [24.1, 1012.0], [24.2, 1012.0], [24.3, 1012.0], [24.4, 1012.0], [24.5, 1012.0], [24.6, 1012.0], [24.7, 1012.0], [24.8, 1012.0], [24.9, 1013.0], [25.0, 1013.0], [25.1, 1014.0], [25.2, 1014.0], [25.3, 1014.0], [25.4, 1015.0], [25.5, 1015.0], [25.6, 1015.0], [25.7, 1015.0], [25.8, 1015.0], [25.9, 1017.0], [26.0, 1017.0], [26.1, 1017.0], [26.2, 1017.0], [26.3, 1017.0], [26.4, 1017.0], [26.5, 1017.0], [26.6, 1017.0], [26.7, 1017.0], [26.8, 1018.0], [26.9, 1018.0], [27.0, 1018.0], [27.1, 1019.0], [27.2, 1019.0], [27.3, 1019.0], [27.4, 1019.0], [27.5, 1019.0], [27.6, 1020.0], [27.7, 1020.0], [27.8, 1020.0], [27.9, 1020.0], [28.0, 1020.0], [28.1, 1021.0], [28.2, 1021.0], [28.3, 1024.0], [28.4, 1024.0], [28.5, 1024.0], [28.6, 1025.0], [28.7, 1025.0], [28.8, 1027.0], [28.9, 1027.0], [29.0, 1027.0], [29.1, 1027.0], [29.2, 1027.0], [29.3, 1028.0], [29.4, 1028.0], [29.5, 1028.0], [29.6, 1028.0], [29.7, 1028.0], [29.8, 1031.0], [29.9, 1031.0], [30.0, 1031.0], [30.1, 1031.0], [30.2, 1031.0], [30.3, 1032.0], [30.4, 1032.0], [30.5, 1032.0], [30.6, 1032.0], [30.7, 1032.0], [30.8, 1033.0], [30.9, 1033.0], [31.0, 1033.0], [31.1, 1033.0], [31.2, 1033.0], [31.3, 1033.0], [31.4, 1033.0], [31.5, 1033.0], [31.6, 1033.0], [31.7, 1033.0], [31.8, 1034.0], [31.9, 1034.0], [32.0, 1034.0], [32.1, 1035.0], [32.2, 1035.0], [32.3, 1036.0], [32.4, 1036.0], [32.5, 1036.0], [32.6, 1036.0], [32.7, 1036.0], [32.8, 1037.0], [32.9, 1037.0], [33.0, 1037.0], [33.1, 1037.0], [33.2, 1037.0], [33.3, 1039.0], [33.4, 1039.0], [33.5, 1040.0], [33.6, 1040.0], [33.7, 1040.0], [33.8, 1040.0], [33.9, 1040.0], [34.0, 1041.0], [34.1, 1041.0], [34.2, 1041.0], [34.3, 1042.0], [34.4, 1042.0], [34.5, 1042.0], [34.6, 1042.0], [34.7, 1042.0], [34.8, 1043.0], [34.9, 1043.0], [35.0, 1045.0], [35.1, 1045.0], [35.2, 1045.0], [35.3, 1045.0], [35.4, 1045.0], [35.5, 1045.0], [35.6, 1045.0], [35.7, 1045.0], [35.8, 1046.0], [35.9, 1046.0], [36.0, 1047.0], [36.1, 1047.0], [36.2, 1047.0], [36.3, 1047.0], [36.4, 1047.0], [36.5, 1048.0], [36.6, 1048.0], [36.7, 1048.0], [36.8, 1049.0], [36.9, 1049.0], [37.0, 1049.0], [37.1, 1049.0], [37.2, 1049.0], [37.3, 1053.0], [37.4, 1053.0], [37.5, 1054.0], [37.6, 1054.0], [37.7, 1054.0], [37.8, 1054.0], [37.9, 1054.0], [38.0, 1054.0], [38.1, 1054.0], [38.2, 1054.0], [38.3, 1055.0], [38.4, 1055.0], [38.5, 1056.0], [38.6, 1056.0], [38.7, 1056.0], [38.8, 1056.0], [38.9, 1056.0], [39.0, 1057.0], [39.1, 1057.0], [39.2, 1057.0], [39.3, 1057.0], [39.4, 1057.0], [39.5, 1058.0], [39.6, 1058.0], [39.7, 1058.0], [39.8, 1059.0], [39.9, 1059.0], [40.0, 1059.0], [40.1, 1059.0], [40.2, 1060.0], [40.3, 1060.0], [40.4, 1060.0], [40.5, 1060.0], [40.6, 1060.0], [40.7, 1060.0], [40.8, 1060.0], [40.9, 1060.0], [41.0, 1062.0], [41.1, 1062.0], [41.2, 1062.0], [41.3, 1062.0], [41.4, 1062.0], [41.5, 1064.0], [41.6, 1064.0], [41.7, 1065.0], [41.8, 1065.0], [41.9, 1065.0], [42.0, 1065.0], [42.1, 1065.0], [42.2, 1066.0], [42.3, 1066.0], [42.4, 1066.0], [42.5, 1066.0], [42.6, 1066.0], [42.7, 1067.0], [42.8, 1067.0], [42.9, 1067.0], [43.0, 1067.0], [43.1, 1067.0], [43.2, 1067.0], [43.3, 1067.0], [43.4, 1067.0], [43.5, 1067.0], [43.6, 1067.0], [43.7, 1067.0], [43.8, 1067.0], [43.9, 1067.0], [44.0, 1068.0], [44.1, 1068.0], [44.2, 1069.0], [44.3, 1069.0], [44.4, 1069.0], [44.5, 1069.0], [44.6, 1069.0], [44.7, 1069.0], [44.8, 1069.0], [44.9, 1069.0], [45.0, 1070.0], [45.1, 1070.0], [45.2, 1071.0], [45.3, 1071.0], [45.4, 1071.0], [45.5, 1071.0], [45.6, 1071.0], [45.7, 1072.0], [45.8, 1072.0], [45.9, 1072.0], [46.0, 1072.0], [46.1, 1072.0], [46.2, 1073.0], [46.3, 1073.0], [46.4, 1073.0], [46.5, 1074.0], [46.6, 1074.0], [46.7, 1075.0], [46.8, 1075.0], [46.9, 1075.0], [47.0, 1075.0], [47.1, 1075.0], [47.2, 1076.0], [47.3, 1076.0], [47.4, 1077.0], [47.5, 1077.0], [47.6, 1077.0], [47.7, 1079.0], [47.8, 1079.0], [47.9, 1080.0], [48.0, 1080.0], [48.1, 1080.0], [48.2, 1082.0], [48.3, 1082.0], [48.4, 1083.0], [48.5, 1083.0], [48.6, 1083.0], [48.7, 1084.0], [48.8, 1084.0], [48.9, 1085.0], [49.0, 1085.0], [49.1, 1085.0], [49.2, 1085.0], [49.3, 1085.0], [49.4, 1086.0], [49.5, 1086.0], [49.6, 1086.0], [49.7, 1087.0], [49.8, 1087.0], [49.9, 1087.0], [50.0, 1087.0], [50.1, 1087.0], [50.2, 1088.0], [50.3, 1088.0], [50.4, 1089.0], [50.5, 1089.0], [50.6, 1089.0], [50.7, 1090.0], [50.8, 1090.0], [50.9, 1090.0], [51.0, 1090.0], [51.1, 1090.0], [51.2, 1092.0], [51.3, 1092.0], [51.4, 1093.0], [51.5, 1093.0], [51.6, 1093.0], [51.7, 1093.0], [51.8, 1093.0], [51.9, 1094.0], [52.0, 1094.0], [52.1, 1094.0], [52.2, 1094.0], [52.3, 1094.0], [52.4, 1094.0], [52.5, 1094.0], [52.6, 1094.0], [52.7, 1095.0], [52.8, 1095.0], [52.9, 1095.0], [53.0, 1095.0], [53.1, 1095.0], [53.2, 1096.0], [53.3, 1096.0], [53.4, 1098.0], [53.5, 1098.0], [53.6, 1099.0], [53.7, 1099.0], [53.8, 1099.0], [53.9, 1099.0], [54.0, 1099.0], [54.1, 1100.0], [54.2, 1100.0], [54.3, 1100.0], [54.4, 1101.0], [54.5, 1101.0], [54.6, 1106.0], [54.7, 1106.0], [54.8, 1106.0], [54.9, 1108.0], [55.0, 1108.0], [55.1, 1108.0], [55.2, 1108.0], [55.3, 1108.0], [55.4, 1109.0], [55.5, 1109.0], [55.6, 1109.0], [55.7, 1109.0], [55.8, 1109.0], [55.9, 1109.0], [56.0, 1109.0], [56.1, 1110.0], [56.2, 1110.0], [56.3, 1110.0], [56.4, 1111.0], [56.5, 1111.0], [56.6, 1111.0], [56.7, 1111.0], [56.8, 1111.0], [56.9, 1111.0], [57.0, 1111.0], [57.1, 1112.0], [57.2, 1112.0], [57.3, 1112.0], [57.4, 1114.0], [57.5, 1114.0], [57.6, 1114.0], [57.7, 1114.0], [57.8, 1114.0], [57.9, 1115.0], [58.0, 1115.0], [58.1, 1115.0], [58.2, 1115.0], [58.3, 1115.0], [58.4, 1116.0], [58.5, 1116.0], [58.6, 1117.0], [58.7, 1117.0], [58.8, 1117.0], [58.9, 1117.0], [59.0, 1117.0], [59.1, 1121.0], [59.2, 1121.0], [59.3, 1121.0], [59.4, 1121.0], [59.5, 1121.0], [59.6, 1122.0], [59.7, 1122.0], [59.8, 1122.0], [59.9, 1122.0], [60.0, 1122.0], [60.1, 1125.0], [60.2, 1125.0], [60.3, 1126.0], [60.4, 1126.0], [60.5, 1126.0], [60.6, 1126.0], [60.7, 1126.0], [60.8, 1127.0], [60.9, 1127.0], [61.0, 1127.0], [61.1, 1127.0], [61.2, 1127.0], [61.3, 1128.0], [61.4, 1128.0], [61.5, 1128.0], [61.6, 1129.0], [61.7, 1129.0], [61.8, 1129.0], [61.9, 1129.0], [62.0, 1129.0], [62.1, 1132.0], [62.2, 1132.0], [62.3, 1132.0], [62.4, 1132.0], [62.5, 1132.0], [62.6, 1132.0], [62.7, 1132.0], [62.8, 1133.0], [62.9, 1133.0], [63.0, 1133.0], [63.1, 1134.0], [63.2, 1134.0], [63.3, 1139.0], [63.4, 1139.0], [63.5, 1139.0], [63.6, 1139.0], [63.7, 1139.0], [63.8, 1139.0], [63.9, 1139.0], [64.0, 1139.0], [64.1, 1141.0], [64.2, 1141.0], [64.3, 1142.0], [64.4, 1142.0], [64.5, 1142.0], [64.6, 1142.0], [64.7, 1142.0], [64.8, 1142.0], [64.9, 1142.0], [65.0, 1142.0], [65.1, 1142.0], [65.2, 1142.0], [65.3, 1143.0], [65.4, 1143.0], [65.5, 1143.0], [65.6, 1143.0], [65.7, 1143.0], [65.8, 1144.0], [65.9, 1144.0], [66.0, 1144.0], [66.1, 1144.0], [66.2, 1144.0], [66.3, 1145.0], [66.4, 1145.0], [66.5, 1145.0], [66.6, 1145.0], [66.7, 1145.0], [66.8, 1147.0], [66.9, 1147.0], [67.0, 1149.0], [67.1, 1149.0], [67.2, 1149.0], [67.3, 1150.0], [67.4, 1150.0], [67.5, 1152.0], [67.6, 1152.0], [67.7, 1152.0], [67.8, 1153.0], [67.9, 1153.0], [68.0, 1153.0], [68.1, 1153.0], [68.2, 1153.0], [68.3, 1153.0], [68.4, 1153.0], [68.5, 1153.0], [68.6, 1153.0], [68.7, 1153.0], [68.8, 1154.0], [68.9, 1154.0], [69.0, 1155.0], [69.1, 1155.0], [69.2, 1155.0], [69.3, 1155.0], [69.4, 1155.0], [69.5, 1156.0], [69.6, 1156.0], [69.7, 1156.0], [69.8, 1156.0], [69.9, 1156.0], [70.0, 1156.0], [70.1, 1156.0], [70.2, 1156.0], [70.3, 1159.0], [70.4, 1159.0], [70.5, 1159.0], [70.6, 1159.0], [70.7, 1159.0], [70.8, 1159.0], [70.9, 1159.0], [71.0, 1160.0], [71.1, 1160.0], [71.2, 1160.0], [71.3, 1164.0], [71.4, 1164.0], [71.5, 1165.0], [71.6, 1165.0], [71.7, 1165.0], [71.8, 1165.0], [71.9, 1165.0], [72.0, 1166.0], [72.1, 1166.0], [72.2, 1166.0], [72.3, 1167.0], [72.4, 1167.0], [72.5, 1168.0], [72.6, 1168.0], [72.7, 1168.0], [72.8, 1168.0], [72.9, 1168.0], [73.0, 1168.0], [73.1, 1168.0], [73.2, 1168.0], [73.3, 1168.0], [73.4, 1168.0], [73.5, 1172.0], [73.6, 1172.0], [73.7, 1172.0], [73.8, 1172.0], [73.9, 1172.0], [74.0, 1175.0], [74.1, 1175.0], [74.2, 1176.0], [74.3, 1176.0], [74.4, 1176.0], [74.5, 1177.0], [74.6, 1177.0], [74.7, 1178.0], [74.8, 1178.0], [74.9, 1178.0], [75.0, 1179.0], [75.1, 1179.0], [75.2, 1179.0], [75.3, 1179.0], [75.4, 1179.0], [75.5, 1180.0], [75.6, 1180.0], [75.7, 1181.0], [75.8, 1181.0], [75.9, 1181.0], [76.0, 1182.0], [76.1, 1182.0], [76.2, 1183.0], [76.3, 1183.0], [76.4, 1183.0], [76.5, 1184.0], [76.6, 1184.0], [76.7, 1184.0], [76.8, 1184.0], [76.9, 1184.0], [77.0, 1187.0], [77.1, 1187.0], [77.2, 1187.0], [77.3, 1187.0], [77.4, 1187.0], [77.5, 1191.0], [77.6, 1191.0], [77.7, 1193.0], [77.8, 1193.0], [77.9, 1193.0], [78.0, 1194.0], [78.1, 1194.0], [78.2, 1196.0], [78.3, 1196.0], [78.4, 1196.0], [78.5, 1198.0], [78.6, 1198.0], [78.7, 1199.0], [78.8, 1199.0], [78.9, 1199.0], [79.0, 1200.0], [79.1, 1200.0], [79.2, 1201.0], [79.3, 1201.0], [79.4, 1201.0], [79.5, 1203.0], [79.6, 1203.0], [79.7, 1206.0], [79.8, 1206.0], [79.9, 1206.0], [80.0, 1211.0], [80.1, 1211.0], [80.2, 1212.0], [80.3, 1212.0], [80.4, 1214.0], [80.5, 1214.0], [80.6, 1214.0], [80.7, 1216.0], [80.8, 1216.0], [80.9, 1218.0], [81.0, 1218.0], [81.1, 1218.0], [81.2, 1219.0], [81.3, 1219.0], [81.4, 1219.0], [81.5, 1219.0], [81.6, 1219.0], [81.7, 1220.0], [81.8, 1220.0], [81.9, 1220.0], [82.0, 1220.0], [82.1, 1220.0], [82.2, 1222.0], [82.3, 1222.0], [82.4, 1224.0], [82.5, 1224.0], [82.6, 1224.0], [82.7, 1224.0], [82.8, 1224.0], [82.9, 1232.0], [83.0, 1232.0], [83.1, 1232.0], [83.2, 1233.0], [83.3, 1233.0], [83.4, 1234.0], [83.5, 1234.0], [83.6, 1234.0], [83.7, 1239.0], [83.8, 1239.0], [83.9, 1241.0], [84.0, 1241.0], [84.1, 1241.0], [84.2, 1241.0], [84.3, 1241.0], [84.4, 1245.0], [84.5, 1245.0], [84.6, 1245.0], [84.7, 1247.0], [84.8, 1247.0], [84.9, 1250.0], [85.0, 1250.0], [85.1, 1250.0], [85.2, 1252.0], [85.3, 1252.0], [85.4, 1253.0], [85.5, 1253.0], [85.6, 1253.0], [85.7, 1254.0], [85.8, 1254.0], [85.9, 1254.0], [86.0, 1254.0], [86.1, 1254.0], [86.2, 1256.0], [86.3, 1256.0], [86.4, 1256.0], [86.5, 1256.0], [86.6, 1256.0], [86.7, 1258.0], [86.8, 1258.0], [86.9, 1259.0], [87.0, 1259.0], [87.1, 1260.0], [87.2, 1260.0], [87.3, 1260.0], [87.4, 1261.0], [87.5, 1261.0], [87.6, 1261.0], [87.7, 1261.0], [87.8, 1261.0], [87.9, 1262.0], [88.0, 1262.0], [88.1, 1263.0], [88.2, 1263.0], [88.3, 1263.0], [88.4, 1264.0], [88.5, 1264.0], [88.6, 1266.0], [88.7, 1266.0], [88.8, 1266.0], [88.9, 1267.0], [89.0, 1267.0], [89.1, 1267.0], [89.2, 1267.0], [89.3, 1267.0], [89.4, 1276.0], [89.5, 1276.0], [89.6, 1276.0], [89.7, 1276.0], [89.8, 1276.0], [89.9, 1278.0], [90.0, 1278.0], [90.1, 1279.0], [90.2, 1279.0], [90.3, 1279.0], [90.4, 1280.0], [90.5, 1280.0], [90.6, 1281.0], [90.7, 1281.0], [90.8, 1281.0], [90.9, 1294.0], [91.0, 1294.0], [91.1, 1304.0], [91.2, 1304.0], [91.3, 1304.0], [91.4, 1304.0], [91.5, 1304.0], [91.6, 1307.0], [91.7, 1307.0], [91.8, 1307.0], [91.9, 1312.0], [92.0, 1312.0], [92.1, 1316.0], [92.2, 1316.0], [92.3, 1316.0], [92.4, 1318.0], [92.5, 1318.0], [92.6, 1319.0], [92.7, 1319.0], [92.8, 1319.0], [92.9, 1321.0], [93.0, 1321.0], [93.1, 1341.0], [93.2, 1341.0], [93.3, 1341.0], [93.4, 1349.0], [93.5, 1349.0], [93.6, 1354.0], [93.7, 1354.0], [93.8, 1354.0], [93.9, 1354.0], [94.0, 1354.0], [94.1, 1357.0], [94.2, 1357.0], [94.3, 1362.0], [94.4, 1362.0], [94.5, 1362.0], [94.6, 1369.0], [94.7, 1369.0], [94.8, 1369.0], [94.9, 1369.0], [95.0, 1369.0], [95.1, 1371.0], [95.2, 1371.0], [95.3, 1373.0], [95.4, 1373.0], [95.5, 1373.0], [95.6, 1375.0], [95.7, 1375.0], [95.8, 1377.0], [95.9, 1377.0], [96.0, 1377.0], [96.1, 1382.0], [96.2, 1382.0], [96.3, 1382.0], [96.4, 1382.0], [96.5, 1382.0], [96.6, 1389.0], [96.7, 1389.0], [96.8, 1398.0], [96.9, 1398.0], [97.0, 1398.0], [97.1, 1399.0], [97.2, 1399.0], [97.3, 1401.0], [97.4, 1401.0], [97.5, 1401.0], [97.6, 1403.0], [97.7, 1403.0], [97.8, 1407.0], [97.9, 1407.0], [98.0, 1407.0], [98.1, 1414.0], [98.2, 1414.0], [98.3, 1421.0], [98.4, 1421.0], [98.5, 1421.0], [98.6, 1457.0], [98.7, 1457.0], [98.8, 1465.0], [98.9, 1465.0], [99.0, 1465.0], [99.1, 1494.0], [99.2, 1494.0], [99.3, 1678.0], [99.4, 1678.0], [99.5, 1678.0], [99.6, 1840.0], [99.7, 1840.0], [99.8, 1888.0], [99.9, 1888.0], [100.0, 1888.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 172.0, "series": [{"data": [[2100.0, 14.0], [4300.0, 1.0], [2200.0, 8.0], [2300.0, 8.0], [2500.0, 1.0], [2600.0, 1.0], [1500.0, 13.0], [1600.0, 114.0], [1700.0, 98.0], [1800.0, 69.0], [1900.0, 68.0], [2000.0, 22.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1100.0, 8.0], [600.0, 141.0], [1200.0, 1.0], [1300.0, 1.0], [700.0, 172.0], [800.0, 38.0], [3500.0, 1.0], [900.0, 34.0], [1000.0, 9.0], [500.0, 2.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1100.0, 100.0], [1200.0, 49.0], [1300.0, 25.0], [1400.0, 8.0], [800.0, 1.0], [1600.0, 1.0], [900.0, 80.0], [1800.0, 2.0], [1000.0, 137.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 421.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 806.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 806.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 421.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.333333333333333, "minX": 1.70618718E12, "maxY": 19.16319444444441, "series": [{"data": [[1.70618724E12, 19.16319444444441], [1.7061873E12, 16.631884057971018], [1.70618718E12, 5.333333333333333]], "isOverall": false, "label": "20 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7061873E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 666.8, "minX": 1.0, "maxY": 2185.0, "series": [{"data": [[8.0, 1694.9999999999998], [2.0, 1633.0], [9.0, 1799.0], [10.0, 1788.7], [11.0, 1705.2], [3.0, 1816.0], [12.0, 1805.5], [13.0, 1740.6], [14.0, 1638.8571428571427], [15.0, 1714.25], [16.0, 1744.3636363636363], [4.0, 1851.5], [1.0, 2185.0], [17.0, 1740.6666666666667], [18.0, 1694.7142857142858], [19.0, 1817.0], [5.0, 2029.5], [20.0, 1848.2335526315785], [6.0, 1689.0], [7.0, 1656.3333333333333]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[18.091127098321344, 1824.7146282973615]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[8.0, 666.8], [9.0, 681.5], [10.0, 774.9999999999999], [11.0, 687.2499999999999], [3.0, 679.5], [12.0, 667.0], [13.0, 681.6666666666667], [14.0, 714.1111111111111], [15.0, 779.5], [4.0, 718.5], [16.0, 729.9999999999999], [17.0, 863.375], [18.0, 703.4285714285714], [19.0, 760.1666666666667], [5.0, 682.0], [20.0, 777.7109634551499], [6.0, 668.3333333333334], [7.0, 717.6666666666666]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[18.29975429975432, 765.4152334152334]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 1053.2], [9.0, 974.75], [10.0, 1076.6666666666665], [11.0, 979.6666666666667], [12.0, 1053.2], [3.0, 958.0], [13.0, 1039.5555555555557], [14.0, 1065.2222222222222], [15.0, 1063.75], [4.0, 936.0], [16.0, 996.25], [17.0, 1099.9230769230767], [18.0, 1044.6], [19.0, 1122.0666666666668], [5.0, 1123.5], [20.0, 1130.6039603960385], [6.0, 979.75], [7.0, 1266.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[18.35980148883376, 1112.5930521091814]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 465.5, "minX": 1.70618718E12, "maxY": 46121.8, "series": [{"data": [[1.70618724E12, 22712.866666666665], [1.7061873E12, 8889.133333333333], [1.70618718E12, 465.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70618724E12, 46121.8], [1.7061873E12, 18411.683333333334], [1.70618718E12, 954.1666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7061873E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 704.1666666666666, "minX": 1.70618718E12, "maxY": 1837.4322033898304, "series": [{"data": [[1.70618724E12, 1820.154639175259], [1.7061873E12, 1837.4322033898304], [1.70618718E12, 1803.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618724E12, 762.5395189003432], [1.7061873E12, 776.3636363636361], [1.70618718E12, 704.1666666666666]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618724E12, 1108.1702127659578], [1.7061873E12, 1125.7863247863252], [1.70618718E12, 1038.5]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7061873E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 704.1666666666666, "minX": 1.70618718E12, "maxY": 1837.389830508475, "series": [{"data": [[1.70618724E12, 1820.1065292096225], [1.7061873E12, 1837.389830508475], [1.70618718E12, 1803.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618724E12, 762.4879725085909], [1.7061873E12, 776.3090909090912], [1.70618718E12, 704.1666666666666]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618724E12, 1108.120567375887], [1.7061873E12, 1125.7350427350427], [1.70618718E12, 1038.25]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7061873E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70618718E12, "maxY": 715.0084745762712, "series": [{"data": [[1.70618724E12, 680.0927835051546], [1.7061873E12, 715.0084745762712], [1.70618718E12, 661.625]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618724E12, 0.0], [1.7061873E12, 0.0], [1.70618718E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618724E12, 0.0], [1.7061873E12, 0.0], [1.70618718E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7061873E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 587.0, "minX": 1.70618718E12, "maxY": 4359.0, "series": [{"data": [[1.70618724E12, 4359.0], [1.7061873E12, 2604.0], [1.70618718E12, 2149.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70618724E12, 1898.5], [1.7061873E12, 1909.8000000000004], [1.70618718E12, 2078.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70618724E12, 2223.05], [1.7061873E12, 2377.32], [1.70618718E12, 2149.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70618724E12, 1992.75], [1.7061873E12, 1987.1], [1.70618718E12, 2149.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70618724E12, 587.0], [1.7061873E12, 593.0], [1.70618718E12, 653.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70618724E12, 1084.5], [1.7061873E12, 1132.0], [1.70618718E12, 1123.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7061873E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 798.5, "minX": 1.0, "maxY": 1801.0, "series": [{"data": [[2.0, 1260.5], [8.0, 1023.0], [9.0, 1017.0], [10.0, 1007.0], [11.0, 1035.0], [3.0, 992.0], [12.0, 1152.5], [13.0, 1121.5], [14.0, 1145.0], [15.0, 1073.5], [16.0, 1076.0], [4.0, 798.5], [1.0, 1585.5], [17.0, 1172.5], [18.0, 1020.5], [19.0, 1064.0], [5.0, 995.0], [20.0, 863.5], [21.0, 1696.0], [22.0, 1014.5], [6.0, 1162.5], [7.0, 1801.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 798.0, "minX": 1.0, "maxY": 1801.0, "series": [{"data": [[2.0, 1260.0], [8.0, 1023.0], [9.0, 1017.0], [10.0, 1007.0], [11.0, 1035.0], [3.0, 992.0], [12.0, 1152.5], [13.0, 1121.5], [14.0, 1145.0], [15.0, 1073.5], [16.0, 1076.0], [4.0, 798.0], [1.0, 1585.5], [17.0, 1172.5], [18.0, 1020.5], [19.0, 1064.0], [5.0, 995.0], [20.0, 863.5], [21.0, 1696.0], [22.0, 1014.5], [6.0, 1162.5], [7.0, 1801.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.70618718E12, "maxY": 14.5, "series": [{"data": [[1.70618724E12, 14.5], [1.7061873E12, 5.533333333333333], [1.70618718E12, 0.4166666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7061873E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.70618718E12, "maxY": 14.4, "series": [{"data": [[1.70618724E12, 14.4], [1.7061873E12, 5.75], [1.70618718E12, 0.3]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7061873E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.70618718E12, "maxY": 4.85, "series": [{"data": [[1.70618724E12, 4.7], [1.7061873E12, 1.95], [1.70618718E12, 0.06666666666666667]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618724E12, 4.85], [1.7061873E12, 1.9666666666666666], [1.70618718E12, 0.13333333333333333]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618724E12, 4.85], [1.7061873E12, 1.8333333333333333], [1.70618718E12, 0.1]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7061873E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3, "minX": 1.70618718E12, "maxY": 14.4, "series": [{"data": [[1.70618724E12, 14.4], [1.7061873E12, 5.75], [1.70618718E12, 0.3]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7061873E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

