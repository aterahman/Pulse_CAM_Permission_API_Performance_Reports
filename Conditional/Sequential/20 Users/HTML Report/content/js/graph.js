/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 628.0, "minX": 0.0, "maxY": 4066.0, "series": [{"data": [[0.0, 1577.0], [0.1, 1577.0], [0.2, 1577.0], [0.3, 1582.0], [0.4, 1582.0], [0.5, 1582.0], [0.6, 1585.0], [0.7, 1585.0], [0.8, 1587.0], [0.9, 1587.0], [1.0, 1587.0], [1.1, 1591.0], [1.2, 1591.0], [1.3, 1591.0], [1.4, 1591.0], [1.5, 1591.0], [1.6, 1591.0], [1.7, 1591.0], [1.8, 1591.0], [1.9, 1591.0], [2.0, 1591.0], [2.1, 1595.0], [2.2, 1595.0], [2.3, 1601.0], [2.4, 1601.0], [2.5, 1601.0], [2.6, 1602.0], [2.7, 1602.0], [2.8, 1602.0], [2.9, 1602.0], [3.0, 1602.0], [3.1, 1603.0], [3.2, 1603.0], [3.3, 1605.0], [3.4, 1605.0], [3.5, 1605.0], [3.6, 1608.0], [3.7, 1608.0], [3.8, 1608.0], [3.9, 1608.0], [4.0, 1608.0], [4.1, 1610.0], [4.2, 1610.0], [4.3, 1614.0], [4.4, 1614.0], [4.5, 1614.0], [4.6, 1615.0], [4.7, 1615.0], [4.8, 1618.0], [4.9, 1618.0], [5.0, 1618.0], [5.1, 1618.0], [5.2, 1618.0], [5.3, 1621.0], [5.4, 1621.0], [5.5, 1621.0], [5.6, 1623.0], [5.7, 1623.0], [5.8, 1627.0], [5.9, 1627.0], [6.0, 1627.0], [6.1, 1630.0], [6.2, 1630.0], [6.3, 1630.0], [6.4, 1630.0], [6.5, 1630.0], [6.6, 1631.0], [6.7, 1631.0], [6.8, 1631.0], [6.9, 1631.0], [7.0, 1631.0], [7.1, 1632.0], [7.2, 1632.0], [7.3, 1632.0], [7.4, 1632.0], [7.5, 1632.0], [7.6, 1635.0], [7.7, 1635.0], [7.8, 1635.0], [7.9, 1635.0], [8.0, 1635.0], [8.1, 1636.0], [8.2, 1636.0], [8.3, 1636.0], [8.4, 1637.0], [8.5, 1637.0], [8.6, 1638.0], [8.7, 1638.0], [8.8, 1638.0], [8.9, 1642.0], [9.0, 1642.0], [9.1, 1646.0], [9.2, 1646.0], [9.3, 1646.0], [9.4, 1646.0], [9.5, 1646.0], [9.6, 1646.0], [9.7, 1646.0], [9.8, 1646.0], [9.9, 1647.0], [10.0, 1647.0], [10.1, 1647.0], [10.2, 1647.0], [10.3, 1647.0], [10.4, 1650.0], [10.5, 1650.0], [10.6, 1650.0], [10.7, 1650.0], [10.8, 1650.0], [10.9, 1652.0], [11.0, 1652.0], [11.1, 1653.0], [11.2, 1653.0], [11.3, 1653.0], [11.4, 1655.0], [11.5, 1655.0], [11.6, 1656.0], [11.7, 1656.0], [11.8, 1656.0], [11.9, 1658.0], [12.0, 1658.0], [12.1, 1661.0], [12.2, 1661.0], [12.3, 1661.0], [12.4, 1661.0], [12.5, 1661.0], [12.6, 1663.0], [12.7, 1663.0], [12.8, 1663.0], [12.9, 1663.0], [13.0, 1663.0], [13.1, 1665.0], [13.2, 1665.0], [13.3, 1665.0], [13.4, 1667.0], [13.5, 1667.0], [13.6, 1667.0], [13.7, 1668.0], [13.8, 1668.0], [13.9, 1668.0], [14.0, 1668.0], [14.1, 1668.0], [14.2, 1669.0], [14.3, 1669.0], [14.4, 1676.0], [14.5, 1676.0], [14.6, 1676.0], [14.7, 1676.0], [14.8, 1676.0], [14.9, 1677.0], [15.0, 1677.0], [15.1, 1677.0], [15.2, 1681.0], [15.3, 1681.0], [15.4, 1682.0], [15.5, 1682.0], [15.6, 1682.0], [15.7, 1684.0], [15.8, 1684.0], [15.9, 1686.0], [16.0, 1686.0], [16.1, 1686.0], [16.2, 1689.0], [16.3, 1689.0], [16.4, 1690.0], [16.5, 1690.0], [16.6, 1690.0], [16.7, 1691.0], [16.8, 1691.0], [16.9, 1692.0], [17.0, 1692.0], [17.1, 1692.0], [17.2, 1693.0], [17.3, 1693.0], [17.4, 1693.0], [17.5, 1693.0], [17.6, 1693.0], [17.7, 1694.0], [17.8, 1694.0], [17.9, 1695.0], [18.0, 1695.0], [18.1, 1695.0], [18.2, 1697.0], [18.3, 1697.0], [18.4, 1699.0], [18.5, 1699.0], [18.6, 1699.0], [18.7, 1699.0], [18.8, 1699.0], [18.9, 1700.0], [19.0, 1700.0], [19.1, 1700.0], [19.2, 1700.0], [19.3, 1700.0], [19.4, 1703.0], [19.5, 1703.0], [19.6, 1703.0], [19.7, 1703.0], [19.8, 1703.0], [19.9, 1707.0], [20.0, 1707.0], [20.1, 1707.0], [20.2, 1708.0], [20.3, 1708.0], [20.4, 1708.0], [20.5, 1710.0], [20.6, 1710.0], [20.7, 1712.0], [20.8, 1712.0], [20.9, 1712.0], [21.0, 1712.0], [21.1, 1712.0], [21.2, 1712.0], [21.3, 1712.0], [21.4, 1712.0], [21.5, 1713.0], [21.6, 1713.0], [21.7, 1715.0], [21.8, 1715.0], [21.9, 1715.0], [22.0, 1716.0], [22.1, 1716.0], [22.2, 1716.0], [22.3, 1716.0], [22.4, 1716.0], [22.5, 1716.0], [22.6, 1716.0], [22.7, 1717.0], [22.8, 1717.0], [22.9, 1717.0], [23.0, 1718.0], [23.1, 1718.0], [23.2, 1718.0], [23.3, 1718.0], [23.4, 1718.0], [23.5, 1721.0], [23.6, 1721.0], [23.7, 1721.0], [23.8, 1721.0], [23.9, 1721.0], [24.0, 1722.0], [24.1, 1722.0], [24.2, 1723.0], [24.3, 1723.0], [24.4, 1723.0], [24.5, 1724.0], [24.6, 1724.0], [24.7, 1724.0], [24.8, 1724.0], [24.9, 1724.0], [25.0, 1727.0], [25.1, 1727.0], [25.2, 1729.0], [25.3, 1729.0], [25.4, 1729.0], [25.5, 1729.0], [25.6, 1729.0], [25.7, 1730.0], [25.8, 1730.0], [25.9, 1730.0], [26.0, 1731.0], [26.1, 1731.0], [26.2, 1732.0], [26.3, 1732.0], [26.4, 1732.0], [26.5, 1732.0], [26.6, 1732.0], [26.7, 1732.0], [26.8, 1733.0], [26.9, 1733.0], [27.0, 1735.0], [27.1, 1735.0], [27.2, 1735.0], [27.3, 1735.0], [27.4, 1735.0], [27.5, 1736.0], [27.6, 1736.0], [27.7, 1736.0], [27.8, 1738.0], [27.9, 1738.0], [28.0, 1739.0], [28.1, 1739.0], [28.2, 1739.0], [28.3, 1745.0], [28.4, 1745.0], [28.5, 1747.0], [28.6, 1747.0], [28.7, 1747.0], [28.8, 1750.0], [28.9, 1750.0], [29.0, 1754.0], [29.1, 1754.0], [29.2, 1754.0], [29.3, 1758.0], [29.4, 1758.0], [29.5, 1760.0], [29.6, 1760.0], [29.7, 1760.0], [29.8, 1764.0], [29.9, 1764.0], [30.0, 1764.0], [30.1, 1764.0], [30.2, 1764.0], [30.3, 1765.0], [30.4, 1765.0], [30.5, 1765.0], [30.6, 1765.0], [30.7, 1765.0], [30.8, 1765.0], [30.9, 1765.0], [31.0, 1771.0], [31.1, 1771.0], [31.2, 1771.0], [31.3, 1772.0], [31.4, 1772.0], [31.5, 1772.0], [31.6, 1772.0], [31.7, 1772.0], [31.8, 1780.0], [31.9, 1780.0], [32.0, 1781.0], [32.1, 1781.0], [32.2, 1781.0], [32.3, 1781.0], [32.4, 1781.0], [32.5, 1782.0], [32.6, 1782.0], [32.7, 1782.0], [32.8, 1783.0], [32.9, 1783.0], [33.0, 1783.0], [33.1, 1783.0], [33.2, 1783.0], [33.3, 1785.0], [33.4, 1785.0], [33.5, 1785.0], [33.6, 1785.0], [33.7, 1785.0], [33.8, 1786.0], [33.9, 1786.0], [34.0, 1786.0], [34.1, 1793.0], [34.2, 1793.0], [34.3, 1793.0], [34.4, 1793.0], [34.5, 1793.0], [34.6, 1795.0], [34.7, 1795.0], [34.8, 1797.0], [34.9, 1797.0], [35.0, 1797.0], [35.1, 1798.0], [35.2, 1798.0], [35.3, 1799.0], [35.4, 1799.0], [35.5, 1799.0], [35.6, 1801.0], [35.7, 1801.0], [35.8, 1801.0], [35.9, 1801.0], [36.0, 1801.0], [36.1, 1802.0], [36.2, 1802.0], [36.3, 1803.0], [36.4, 1803.0], [36.5, 1803.0], [36.6, 1803.0], [36.7, 1803.0], [36.8, 1804.0], [36.9, 1804.0], [37.0, 1804.0], [37.1, 1806.0], [37.2, 1806.0], [37.3, 1806.0], [37.4, 1806.0], [37.5, 1806.0], [37.6, 1806.0], [37.7, 1806.0], [37.8, 1809.0], [37.9, 1809.0], [38.0, 1809.0], [38.1, 1813.0], [38.2, 1813.0], [38.3, 1821.0], [38.4, 1821.0], [38.5, 1821.0], [38.6, 1822.0], [38.7, 1822.0], [38.8, 1822.0], [38.9, 1822.0], [39.0, 1822.0], [39.1, 1823.0], [39.2, 1823.0], [39.3, 1828.0], [39.4, 1828.0], [39.5, 1828.0], [39.6, 1829.0], [39.7, 1829.0], [39.8, 1831.0], [39.9, 1831.0], [40.0, 1831.0], [40.1, 1831.0], [40.2, 1831.0], [40.3, 1831.0], [40.4, 1838.0], [40.5, 1838.0], [40.6, 1840.0], [40.7, 1840.0], [40.8, 1840.0], [40.9, 1841.0], [41.0, 1841.0], [41.1, 1841.0], [41.2, 1841.0], [41.3, 1841.0], [41.4, 1843.0], [41.5, 1843.0], [41.6, 1844.0], [41.7, 1844.0], [41.8, 1844.0], [41.9, 1845.0], [42.0, 1845.0], [42.1, 1845.0], [42.2, 1845.0], [42.3, 1845.0], [42.4, 1846.0], [42.5, 1846.0], [42.6, 1846.0], [42.7, 1846.0], [42.8, 1846.0], [42.9, 1846.0], [43.0, 1846.0], [43.1, 1847.0], [43.2, 1847.0], [43.3, 1847.0], [43.4, 1849.0], [43.5, 1849.0], [43.6, 1852.0], [43.7, 1852.0], [43.8, 1852.0], [43.9, 1852.0], [44.0, 1852.0], [44.1, 1852.0], [44.2, 1852.0], [44.3, 1852.0], [44.4, 1853.0], [44.5, 1853.0], [44.6, 1855.0], [44.7, 1855.0], [44.8, 1855.0], [44.9, 1858.0], [45.0, 1858.0], [45.1, 1858.0], [45.2, 1858.0], [45.3, 1858.0], [45.4, 1860.0], [45.5, 1860.0], [45.6, 1860.0], [45.7, 1860.0], [45.8, 1860.0], [45.9, 1862.0], [46.0, 1862.0], [46.1, 1864.0], [46.2, 1864.0], [46.3, 1864.0], [46.4, 1864.0], [46.5, 1864.0], [46.6, 1865.0], [46.7, 1865.0], [46.8, 1865.0], [46.9, 1865.0], [47.0, 1865.0], [47.1, 1865.0], [47.2, 1866.0], [47.3, 1866.0], [47.4, 1867.0], [47.5, 1867.0], [47.6, 1867.0], [47.7, 1867.0], [47.8, 1867.0], [47.9, 1868.0], [48.0, 1868.0], [48.1, 1868.0], [48.2, 1869.0], [48.3, 1869.0], [48.4, 1869.0], [48.5, 1869.0], [48.6, 1869.0], [48.7, 1871.0], [48.8, 1871.0], [48.9, 1872.0], [49.0, 1872.0], [49.1, 1872.0], [49.2, 1873.0], [49.3, 1873.0], [49.4, 1875.0], [49.5, 1875.0], [49.6, 1875.0], [49.7, 1876.0], [49.8, 1876.0], [49.9, 1877.0], [50.0, 1877.0], [50.1, 1877.0], [50.2, 1879.0], [50.3, 1879.0], [50.4, 1880.0], [50.5, 1880.0], [50.6, 1880.0], [50.7, 1880.0], [50.8, 1880.0], [50.9, 1880.0], [51.0, 1880.0], [51.1, 1880.0], [51.2, 1881.0], [51.3, 1881.0], [51.4, 1881.0], [51.5, 1881.0], [51.6, 1881.0], [51.7, 1881.0], [51.8, 1881.0], [51.9, 1883.0], [52.0, 1883.0], [52.1, 1883.0], [52.2, 1884.0], [52.3, 1884.0], [52.4, 1887.0], [52.5, 1887.0], [52.6, 1887.0], [52.7, 1888.0], [52.8, 1888.0], [52.9, 1889.0], [53.0, 1889.0], [53.1, 1889.0], [53.2, 1890.0], [53.3, 1890.0], [53.4, 1890.0], [53.5, 1891.0], [53.6, 1891.0], [53.7, 1891.0], [53.8, 1891.0], [53.9, 1891.0], [54.0, 1892.0], [54.1, 1892.0], [54.2, 1893.0], [54.3, 1893.0], [54.4, 1893.0], [54.5, 1893.0], [54.6, 1893.0], [54.7, 1893.0], [54.8, 1893.0], [54.9, 1893.0], [55.0, 1895.0], [55.1, 1895.0], [55.2, 1895.0], [55.3, 1895.0], [55.4, 1895.0], [55.5, 1896.0], [55.6, 1896.0], [55.7, 1897.0], [55.8, 1897.0], [55.9, 1897.0], [56.0, 1901.0], [56.1, 1901.0], [56.2, 1903.0], [56.3, 1903.0], [56.4, 1903.0], [56.5, 1905.0], [56.6, 1905.0], [56.7, 1909.0], [56.8, 1909.0], [56.9, 1909.0], [57.0, 1909.0], [57.1, 1909.0], [57.2, 1910.0], [57.3, 1910.0], [57.4, 1910.0], [57.5, 1911.0], [57.6, 1911.0], [57.7, 1911.0], [57.8, 1911.0], [57.9, 1911.0], [58.0, 1911.0], [58.1, 1911.0], [58.2, 1913.0], [58.3, 1913.0], [58.4, 1913.0], [58.5, 1915.0], [58.6, 1915.0], [58.7, 1915.0], [58.8, 1915.0], [58.9, 1915.0], [59.0, 1916.0], [59.1, 1916.0], [59.2, 1916.0], [59.3, 1916.0], [59.4, 1916.0], [59.5, 1916.0], [59.6, 1916.0], [59.7, 1917.0], [59.8, 1917.0], [59.9, 1917.0], [60.0, 1918.0], [60.1, 1918.0], [60.2, 1918.0], [60.3, 1919.0], [60.4, 1919.0], [60.5, 1919.0], [60.6, 1919.0], [60.7, 1919.0], [60.8, 1922.0], [60.9, 1922.0], [61.0, 1923.0], [61.1, 1923.0], [61.2, 1923.0], [61.3, 1923.0], [61.4, 1923.0], [61.5, 1927.0], [61.6, 1927.0], [61.7, 1927.0], [61.8, 1929.0], [61.9, 1929.0], [62.0, 1935.0], [62.1, 1935.0], [62.2, 1935.0], [62.3, 1938.0], [62.4, 1938.0], [62.5, 1939.0], [62.6, 1939.0], [62.7, 1939.0], [62.8, 1939.0], [62.9, 1939.0], [63.0, 1943.0], [63.1, 1943.0], [63.2, 1943.0], [63.3, 1943.0], [63.4, 1943.0], [63.5, 1943.0], [63.6, 1943.0], [63.7, 1943.0], [63.8, 1945.0], [63.9, 1945.0], [64.0, 1946.0], [64.1, 1946.0], [64.2, 1946.0], [64.3, 1946.0], [64.4, 1946.0], [64.5, 1949.0], [64.6, 1949.0], [64.7, 1949.0], [64.8, 1949.0], [64.9, 1949.0], [65.0, 1950.0], [65.1, 1950.0], [65.2, 1950.0], [65.3, 1955.0], [65.4, 1955.0], [65.5, 1963.0], [65.6, 1963.0], [65.7, 1963.0], [65.8, 1965.0], [65.9, 1965.0], [66.0, 1965.0], [66.1, 1965.0], [66.2, 1965.0], [66.3, 1966.0], [66.4, 1966.0], [66.5, 1966.0], [66.6, 1966.0], [66.7, 1966.0], [66.8, 1969.0], [66.9, 1969.0], [67.0, 1969.0], [67.1, 1971.0], [67.2, 1971.0], [67.3, 1971.0], [67.4, 1971.0], [67.5, 1971.0], [67.6, 1975.0], [67.7, 1975.0], [67.8, 1977.0], [67.9, 1977.0], [68.0, 1977.0], [68.1, 1979.0], [68.2, 1979.0], [68.3, 1980.0], [68.4, 1980.0], [68.5, 1980.0], [68.6, 1981.0], [68.7, 1981.0], [68.8, 1981.0], [68.9, 1981.0], [69.0, 1981.0], [69.1, 1984.0], [69.2, 1984.0], [69.3, 1985.0], [69.4, 1985.0], [69.5, 1985.0], [69.6, 1988.0], [69.7, 1988.0], [69.8, 1989.0], [69.9, 1989.0], [70.0, 1989.0], [70.1, 1990.0], [70.2, 1990.0], [70.3, 1992.0], [70.4, 1992.0], [70.5, 1992.0], [70.6, 1993.0], [70.7, 1993.0], [70.8, 1996.0], [70.9, 1996.0], [71.0, 1996.0], [71.1, 1997.0], [71.2, 1997.0], [71.3, 1999.0], [71.4, 1999.0], [71.5, 1999.0], [71.6, 2005.0], [71.7, 2005.0], [71.8, 2008.0], [71.9, 2008.0], [72.0, 2008.0], [72.1, 2009.0], [72.2, 2009.0], [72.3, 2009.0], [72.4, 2009.0], [72.5, 2009.0], [72.6, 2009.0], [72.7, 2009.0], [72.8, 2009.0], [72.9, 2009.0], [73.0, 2009.0], [73.1, 2010.0], [73.2, 2010.0], [73.3, 2010.0], [73.4, 2010.0], [73.5, 2010.0], [73.6, 2011.0], [73.7, 2011.0], [73.8, 2011.0], [73.9, 2021.0], [74.0, 2021.0], [74.1, 2022.0], [74.2, 2022.0], [74.3, 2022.0], [74.4, 2023.0], [74.5, 2023.0], [74.6, 2026.0], [74.7, 2026.0], [74.8, 2026.0], [74.9, 2030.0], [75.0, 2030.0], [75.1, 2032.0], [75.2, 2032.0], [75.3, 2032.0], [75.4, 2033.0], [75.5, 2033.0], [75.6, 2034.0], [75.7, 2034.0], [75.8, 2034.0], [75.9, 2037.0], [76.0, 2037.0], [76.1, 2037.0], [76.2, 2037.0], [76.3, 2037.0], [76.4, 2039.0], [76.5, 2039.0], [76.6, 2039.0], [76.7, 2039.0], [76.8, 2039.0], [76.9, 2040.0], [77.0, 2040.0], [77.1, 2041.0], [77.2, 2041.0], [77.3, 2041.0], [77.4, 2041.0], [77.5, 2041.0], [77.6, 2042.0], [77.7, 2042.0], [77.8, 2042.0], [77.9, 2043.0], [78.0, 2043.0], [78.1, 2051.0], [78.2, 2051.0], [78.3, 2051.0], [78.4, 2051.0], [78.5, 2051.0], [78.6, 2052.0], [78.7, 2052.0], [78.8, 2052.0], [78.9, 2059.0], [79.0, 2059.0], [79.1, 2070.0], [79.2, 2070.0], [79.3, 2070.0], [79.4, 2073.0], [79.5, 2073.0], [79.6, 2073.0], [79.7, 2073.0], [79.8, 2073.0], [79.9, 2075.0], [80.0, 2075.0], [80.1, 2075.0], [80.2, 2084.0], [80.3, 2084.0], [80.4, 2090.0], [80.5, 2090.0], [80.6, 2090.0], [80.7, 2091.0], [80.8, 2091.0], [80.9, 2092.0], [81.0, 2092.0], [81.1, 2092.0], [81.2, 2093.0], [81.3, 2093.0], [81.4, 2094.0], [81.5, 2094.0], [81.6, 2094.0], [81.7, 2097.0], [81.8, 2097.0], [81.9, 2098.0], [82.0, 2098.0], [82.1, 2098.0], [82.2, 2101.0], [82.3, 2101.0], [82.4, 2106.0], [82.5, 2106.0], [82.6, 2106.0], [82.7, 2109.0], [82.8, 2109.0], [82.9, 2113.0], [83.0, 2113.0], [83.1, 2113.0], [83.2, 2114.0], [83.3, 2114.0], [83.4, 2117.0], [83.5, 2117.0], [83.6, 2117.0], [83.7, 2120.0], [83.8, 2120.0], [83.9, 2127.0], [84.0, 2127.0], [84.1, 2127.0], [84.2, 2130.0], [84.3, 2130.0], [84.4, 2137.0], [84.5, 2137.0], [84.6, 2137.0], [84.7, 2139.0], [84.8, 2139.0], [84.9, 2140.0], [85.0, 2140.0], [85.1, 2140.0], [85.2, 2141.0], [85.3, 2141.0], [85.4, 2152.0], [85.5, 2152.0], [85.6, 2152.0], [85.7, 2153.0], [85.8, 2153.0], [85.9, 2154.0], [86.0, 2154.0], [86.1, 2154.0], [86.2, 2155.0], [86.3, 2155.0], [86.4, 2155.0], [86.5, 2155.0], [86.6, 2155.0], [86.7, 2157.0], [86.8, 2157.0], [86.9, 2157.0], [87.0, 2168.0], [87.1, 2168.0], [87.2, 2175.0], [87.3, 2175.0], [87.4, 2175.0], [87.5, 2176.0], [87.6, 2176.0], [87.7, 2186.0], [87.8, 2186.0], [87.9, 2186.0], [88.0, 2186.0], [88.1, 2186.0], [88.2, 2188.0], [88.3, 2188.0], [88.4, 2188.0], [88.5, 2190.0], [88.6, 2190.0], [88.7, 2191.0], [88.8, 2191.0], [88.9, 2191.0], [89.0, 2202.0], [89.1, 2202.0], [89.2, 2203.0], [89.3, 2203.0], [89.4, 2203.0], [89.5, 2212.0], [89.6, 2212.0], [89.7, 2234.0], [89.8, 2234.0], [89.9, 2234.0], [90.0, 2245.0], [90.1, 2245.0], [90.2, 2253.0], [90.3, 2253.0], [90.4, 2253.0], [90.5, 2266.0], [90.6, 2266.0], [90.7, 2279.0], [90.8, 2279.0], [90.9, 2279.0], [91.0, 2288.0], [91.1, 2288.0], [91.2, 2288.0], [91.3, 2288.0], [91.4, 2288.0], [91.5, 2291.0], [91.6, 2291.0], [91.7, 2309.0], [91.8, 2309.0], [91.9, 2309.0], [92.0, 2313.0], [92.1, 2313.0], [92.2, 2320.0], [92.3, 2320.0], [92.4, 2320.0], [92.5, 2331.0], [92.6, 2331.0], [92.7, 2360.0], [92.8, 2360.0], [92.9, 2360.0], [93.0, 2368.0], [93.1, 2368.0], [93.2, 2368.0], [93.3, 2368.0], [93.4, 2368.0], [93.5, 2373.0], [93.6, 2373.0], [93.7, 2373.0], [93.8, 2379.0], [93.9, 2379.0], [94.0, 2385.0], [94.1, 2385.0], [94.2, 2385.0], [94.3, 2387.0], [94.4, 2387.0], [94.5, 2400.0], [94.6, 2400.0], [94.7, 2400.0], [94.8, 2403.0], [94.9, 2403.0], [95.0, 2405.0], [95.1, 2405.0], [95.2, 2405.0], [95.3, 2406.0], [95.4, 2406.0], [95.5, 2407.0], [95.6, 2407.0], [95.7, 2407.0], [95.8, 2411.0], [95.9, 2411.0], [96.0, 2424.0], [96.1, 2424.0], [96.2, 2424.0], [96.3, 2426.0], [96.4, 2426.0], [96.5, 2431.0], [96.6, 2431.0], [96.7, 2431.0], [96.8, 2434.0], [96.9, 2434.0], [97.0, 2436.0], [97.1, 2436.0], [97.2, 2436.0], [97.3, 2448.0], [97.4, 2448.0], [97.5, 2485.0], [97.6, 2485.0], [97.7, 2485.0], [97.8, 2522.0], [97.9, 2522.0], [98.0, 2530.0], [98.1, 2530.0], [98.2, 2530.0], [98.3, 2538.0], [98.4, 2538.0], [98.5, 2557.0], [98.6, 2557.0], [98.7, 2557.0], [98.8, 2626.0], [98.9, 2626.0], [99.0, 2812.0], [99.1, 2812.0], [99.2, 2812.0], [99.3, 3840.0], [99.4, 3840.0], [99.5, 4047.0], [99.6, 4047.0], [99.7, 4047.0], [99.8, 4066.0], [99.9, 4066.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 628.0], [0.1, 628.0], [0.2, 628.0], [0.3, 629.0], [0.4, 629.0], [0.5, 629.0], [0.6, 630.0], [0.7, 630.0], [0.8, 632.0], [0.9, 632.0], [1.0, 632.0], [1.1, 635.0], [1.2, 635.0], [1.3, 635.0], [1.4, 637.0], [1.5, 637.0], [1.6, 637.0], [1.7, 637.0], [1.8, 637.0], [1.9, 638.0], [2.0, 638.0], [2.1, 638.0], [2.2, 638.0], [2.3, 638.0], [2.4, 640.0], [2.5, 640.0], [2.6, 640.0], [2.7, 640.0], [2.8, 640.0], [2.9, 644.0], [3.0, 644.0], [3.1, 644.0], [3.2, 646.0], [3.3, 646.0], [3.4, 647.0], [3.5, 647.0], [3.6, 647.0], [3.7, 647.0], [3.8, 647.0], [3.9, 647.0], [4.0, 651.0], [4.1, 651.0], [4.2, 652.0], [4.3, 652.0], [4.4, 652.0], [4.5, 652.0], [4.6, 652.0], [4.7, 653.0], [4.8, 653.0], [4.9, 653.0], [5.0, 654.0], [5.1, 654.0], [5.2, 654.0], [5.3, 654.0], [5.4, 654.0], [5.5, 654.0], [5.6, 654.0], [5.7, 654.0], [5.8, 655.0], [5.9, 655.0], [6.0, 655.0], [6.1, 655.0], [6.2, 655.0], [6.3, 655.0], [6.4, 655.0], [6.5, 655.0], [6.6, 657.0], [6.7, 657.0], [6.8, 657.0], [6.9, 657.0], [7.0, 657.0], [7.1, 659.0], [7.2, 659.0], [7.3, 660.0], [7.4, 660.0], [7.5, 660.0], [7.6, 661.0], [7.7, 661.0], [7.8, 661.0], [7.9, 661.0], [8.0, 661.0], [8.1, 661.0], [8.2, 661.0], [8.3, 661.0], [8.4, 662.0], [8.5, 662.0], [8.6, 663.0], [8.7, 663.0], [8.8, 663.0], [8.9, 663.0], [9.0, 663.0], [9.1, 663.0], [9.2, 664.0], [9.3, 664.0], [9.4, 664.0], [9.5, 664.0], [9.6, 664.0], [9.7, 665.0], [9.8, 665.0], [9.9, 665.0], [10.0, 665.0], [10.1, 665.0], [10.2, 667.0], [10.3, 667.0], [10.4, 667.0], [10.5, 668.0], [10.6, 668.0], [10.7, 668.0], [10.8, 668.0], [10.9, 668.0], [11.0, 668.0], [11.1, 668.0], [11.2, 668.0], [11.3, 668.0], [11.4, 668.0], [11.5, 668.0], [11.6, 668.0], [11.7, 668.0], [11.8, 669.0], [11.9, 669.0], [12.0, 670.0], [12.1, 670.0], [12.2, 670.0], [12.3, 671.0], [12.4, 671.0], [12.5, 671.0], [12.6, 671.0], [12.7, 671.0], [12.8, 671.0], [12.9, 671.0], [13.0, 671.0], [13.1, 672.0], [13.2, 672.0], [13.3, 672.0], [13.4, 672.0], [13.5, 672.0], [13.6, 673.0], [13.7, 673.0], [13.8, 673.0], [13.9, 673.0], [14.0, 673.0], [14.1, 675.0], [14.2, 675.0], [14.3, 675.0], [14.4, 676.0], [14.5, 676.0], [14.6, 676.0], [14.7, 676.0], [14.8, 676.0], [14.9, 676.0], [15.0, 676.0], [15.1, 676.0], [15.2, 676.0], [15.3, 676.0], [15.4, 676.0], [15.5, 676.0], [15.6, 676.0], [15.7, 677.0], [15.8, 677.0], [15.9, 677.0], [16.0, 677.0], [16.1, 677.0], [16.2, 677.0], [16.3, 677.0], [16.4, 677.0], [16.5, 677.0], [16.6, 677.0], [16.7, 677.0], [16.8, 677.0], [16.9, 677.0], [17.0, 678.0], [17.1, 678.0], [17.2, 678.0], [17.3, 678.0], [17.4, 678.0], [17.5, 679.0], [17.6, 679.0], [17.7, 679.0], [17.8, 679.0], [17.9, 679.0], [18.0, 679.0], [18.1, 679.0], [18.2, 679.0], [18.3, 679.0], [18.4, 679.0], [18.5, 680.0], [18.6, 680.0], [18.7, 680.0], [18.8, 680.0], [18.9, 680.0], [19.0, 680.0], [19.1, 680.0], [19.2, 680.0], [19.3, 681.0], [19.4, 681.0], [19.5, 681.0], [19.6, 681.0], [19.7, 681.0], [19.8, 681.0], [19.9, 681.0], [20.0, 681.0], [20.1, 681.0], [20.2, 681.0], [20.3, 681.0], [20.4, 681.0], [20.5, 681.0], [20.6, 682.0], [20.7, 682.0], [20.8, 682.0], [20.9, 683.0], [21.0, 683.0], [21.1, 683.0], [21.2, 683.0], [21.3, 683.0], [21.4, 686.0], [21.5, 686.0], [21.6, 686.0], [21.7, 686.0], [21.8, 686.0], [21.9, 686.0], [22.0, 686.0], [22.1, 686.0], [22.2, 688.0], [22.3, 688.0], [22.4, 688.0], [22.5, 688.0], [22.6, 688.0], [22.7, 689.0], [22.8, 689.0], [22.9, 689.0], [23.0, 689.0], [23.1, 689.0], [23.2, 689.0], [23.3, 689.0], [23.4, 689.0], [23.5, 689.0], [23.6, 689.0], [23.7, 689.0], [23.8, 689.0], [23.9, 689.0], [24.0, 690.0], [24.1, 690.0], [24.2, 690.0], [24.3, 690.0], [24.4, 690.0], [24.5, 691.0], [24.6, 691.0], [24.7, 691.0], [24.8, 691.0], [24.9, 691.0], [25.0, 691.0], [25.1, 691.0], [25.2, 691.0], [25.3, 692.0], [25.4, 692.0], [25.5, 692.0], [25.6, 692.0], [25.7, 692.0], [25.8, 692.0], [25.9, 692.0], [26.0, 692.0], [26.1, 693.0], [26.2, 693.0], [26.3, 693.0], [26.4, 693.0], [26.5, 693.0], [26.6, 693.0], [26.7, 693.0], [26.8, 693.0], [26.9, 694.0], [27.0, 694.0], [27.1, 694.0], [27.2, 694.0], [27.3, 694.0], [27.4, 695.0], [27.5, 695.0], [27.6, 695.0], [27.7, 695.0], [27.8, 695.0], [27.9, 696.0], [28.0, 696.0], [28.1, 696.0], [28.2, 697.0], [28.3, 697.0], [28.4, 697.0], [28.5, 697.0], [28.6, 697.0], [28.7, 697.0], [28.8, 697.0], [28.9, 697.0], [29.0, 697.0], [29.1, 697.0], [29.2, 698.0], [29.3, 698.0], [29.4, 698.0], [29.5, 699.0], [29.6, 699.0], [29.7, 700.0], [29.8, 700.0], [29.9, 700.0], [30.0, 700.0], [30.1, 700.0], [30.2, 700.0], [30.3, 700.0], [30.4, 700.0], [30.5, 701.0], [30.6, 701.0], [30.7, 701.0], [30.8, 701.0], [30.9, 701.0], [31.0, 702.0], [31.1, 702.0], [31.2, 702.0], [31.3, 702.0], [31.4, 702.0], [31.5, 702.0], [31.6, 703.0], [31.7, 703.0], [31.8, 703.0], [31.9, 703.0], [32.0, 703.0], [32.1, 704.0], [32.2, 704.0], [32.3, 704.0], [32.4, 704.0], [32.5, 704.0], [32.6, 704.0], [32.7, 704.0], [32.8, 704.0], [32.9, 705.0], [33.0, 705.0], [33.1, 705.0], [33.2, 705.0], [33.3, 705.0], [33.4, 705.0], [33.5, 705.0], [33.6, 706.0], [33.7, 706.0], [33.8, 706.0], [33.9, 706.0], [34.0, 706.0], [34.1, 706.0], [34.2, 707.0], [34.3, 707.0], [34.4, 707.0], [34.5, 707.0], [34.6, 707.0], [34.7, 707.0], [34.8, 707.0], [34.9, 708.0], [35.0, 708.0], [35.1, 708.0], [35.2, 708.0], [35.3, 708.0], [35.4, 708.0], [35.5, 708.0], [35.6, 708.0], [35.7, 709.0], [35.8, 709.0], [35.9, 709.0], [36.0, 710.0], [36.1, 710.0], [36.2, 712.0], [36.3, 712.0], [36.4, 712.0], [36.5, 712.0], [36.6, 712.0], [36.7, 712.0], [36.8, 712.0], [36.9, 712.0], [37.0, 714.0], [37.1, 714.0], [37.2, 714.0], [37.3, 714.0], [37.4, 714.0], [37.5, 715.0], [37.6, 715.0], [37.7, 715.0], [37.8, 715.0], [37.9, 715.0], [38.0, 715.0], [38.1, 715.0], [38.2, 715.0], [38.3, 715.0], [38.4, 715.0], [38.5, 715.0], [38.6, 717.0], [38.7, 717.0], [38.8, 717.0], [38.9, 718.0], [39.0, 718.0], [39.1, 718.0], [39.2, 718.0], [39.3, 718.0], [39.4, 719.0], [39.5, 719.0], [39.6, 719.0], [39.7, 719.0], [39.8, 719.0], [39.9, 720.0], [40.0, 720.0], [40.1, 720.0], [40.2, 720.0], [40.3, 720.0], [40.4, 720.0], [40.5, 720.0], [40.6, 720.0], [40.7, 721.0], [40.8, 721.0], [40.9, 722.0], [41.0, 722.0], [41.1, 722.0], [41.2, 722.0], [41.3, 722.0], [41.4, 722.0], [41.5, 722.0], [41.6, 722.0], [41.7, 722.0], [41.8, 722.0], [41.9, 722.0], [42.0, 723.0], [42.1, 723.0], [42.2, 723.0], [42.3, 723.0], [42.4, 723.0], [42.5, 723.0], [42.6, 723.0], [42.7, 723.0], [42.8, 723.0], [42.9, 723.0], [43.0, 723.0], [43.1, 723.0], [43.2, 723.0], [43.3, 723.0], [43.4, 723.0], [43.5, 725.0], [43.6, 725.0], [43.7, 725.0], [43.8, 725.0], [43.9, 725.0], [44.0, 725.0], [44.1, 726.0], [44.2, 726.0], [44.3, 726.0], [44.4, 726.0], [44.5, 726.0], [44.6, 726.0], [44.7, 726.0], [44.8, 728.0], [44.9, 728.0], [45.0, 728.0], [45.1, 728.0], [45.2, 728.0], [45.3, 728.0], [45.4, 728.0], [45.5, 728.0], [45.6, 729.0], [45.7, 729.0], [45.8, 729.0], [45.9, 729.0], [46.0, 729.0], [46.1, 731.0], [46.2, 731.0], [46.3, 731.0], [46.4, 731.0], [46.5, 731.0], [46.6, 731.0], [46.7, 731.0], [46.8, 731.0], [46.9, 732.0], [47.0, 732.0], [47.1, 732.0], [47.2, 733.0], [47.3, 733.0], [47.4, 734.0], [47.5, 734.0], [47.6, 734.0], [47.7, 734.0], [47.8, 734.0], [47.9, 734.0], [48.0, 735.0], [48.1, 735.0], [48.2, 735.0], [48.3, 735.0], [48.4, 735.0], [48.5, 738.0], [48.6, 738.0], [48.7, 739.0], [48.8, 739.0], [48.9, 739.0], [49.0, 739.0], [49.1, 739.0], [49.2, 739.0], [49.3, 739.0], [49.4, 739.0], [49.5, 743.0], [49.6, 743.0], [49.7, 743.0], [49.8, 744.0], [49.9, 744.0], [50.0, 744.0], [50.1, 744.0], [50.2, 744.0], [50.3, 744.0], [50.4, 744.0], [50.5, 744.0], [50.6, 745.0], [50.7, 745.0], [50.8, 745.0], [50.9, 745.0], [51.0, 745.0], [51.1, 745.0], [51.2, 745.0], [51.3, 745.0], [51.4, 746.0], [51.5, 746.0], [51.6, 747.0], [51.7, 747.0], [51.8, 747.0], [51.9, 747.0], [52.0, 747.0], [52.1, 747.0], [52.2, 747.0], [52.3, 747.0], [52.4, 747.0], [52.5, 747.0], [52.6, 747.0], [52.7, 747.0], [52.8, 747.0], [52.9, 748.0], [53.0, 748.0], [53.1, 748.0], [53.2, 749.0], [53.3, 749.0], [53.4, 749.0], [53.5, 749.0], [53.6, 749.0], [53.7, 750.0], [53.8, 750.0], [53.9, 750.0], [54.0, 752.0], [54.1, 752.0], [54.2, 752.0], [54.3, 752.0], [54.4, 752.0], [54.5, 752.0], [54.6, 752.0], [54.7, 754.0], [54.8, 754.0], [54.9, 754.0], [55.0, 754.0], [55.1, 754.0], [55.2, 754.0], [55.3, 757.0], [55.4, 757.0], [55.5, 757.0], [55.6, 757.0], [55.7, 757.0], [55.8, 758.0], [55.9, 758.0], [56.0, 759.0], [56.1, 759.0], [56.2, 759.0], [56.3, 759.0], [56.4, 759.0], [56.5, 759.0], [56.6, 759.0], [56.7, 759.0], [56.8, 760.0], [56.9, 760.0], [57.0, 760.0], [57.1, 763.0], [57.2, 763.0], [57.3, 763.0], [57.4, 763.0], [57.5, 763.0], [57.6, 766.0], [57.7, 766.0], [57.8, 766.0], [57.9, 766.0], [58.0, 766.0], [58.1, 767.0], [58.2, 767.0], [58.3, 767.0], [58.4, 770.0], [58.5, 770.0], [58.6, 771.0], [58.7, 771.0], [58.8, 771.0], [58.9, 771.0], [59.0, 771.0], [59.1, 771.0], [59.2, 772.0], [59.3, 772.0], [59.4, 772.0], [59.5, 772.0], [59.6, 772.0], [59.7, 773.0], [59.8, 773.0], [59.9, 776.0], [60.0, 776.0], [60.1, 776.0], [60.2, 777.0], [60.3, 777.0], [60.4, 777.0], [60.5, 780.0], [60.6, 780.0], [60.7, 781.0], [60.8, 781.0], [60.9, 781.0], [61.0, 781.0], [61.1, 781.0], [61.2, 782.0], [61.3, 782.0], [61.4, 782.0], [61.5, 783.0], [61.6, 783.0], [61.7, 783.0], [61.8, 785.0], [61.9, 785.0], [62.0, 785.0], [62.1, 785.0], [62.2, 785.0], [62.3, 787.0], [62.4, 787.0], [62.5, 787.0], [62.6, 787.0], [62.7, 787.0], [62.8, 788.0], [62.9, 788.0], [63.0, 788.0], [63.1, 790.0], [63.2, 790.0], [63.3, 790.0], [63.4, 790.0], [63.5, 790.0], [63.6, 790.0], [63.7, 790.0], [63.8, 790.0], [63.9, 791.0], [64.0, 791.0], [64.1, 793.0], [64.2, 793.0], [64.3, 793.0], [64.4, 794.0], [64.5, 794.0], [64.6, 795.0], [64.7, 795.0], [64.8, 795.0], [64.9, 795.0], [65.0, 795.0], [65.1, 795.0], [65.2, 797.0], [65.3, 797.0], [65.4, 797.0], [65.5, 797.0], [65.6, 797.0], [65.7, 798.0], [65.8, 798.0], [65.9, 800.0], [66.0, 800.0], [66.1, 800.0], [66.2, 802.0], [66.3, 802.0], [66.4, 802.0], [66.5, 805.0], [66.6, 805.0], [66.7, 806.0], [66.8, 806.0], [66.9, 806.0], [67.0, 807.0], [67.1, 807.0], [67.2, 807.0], [67.3, 807.0], [67.4, 807.0], [67.5, 808.0], [67.6, 808.0], [67.7, 808.0], [67.8, 809.0], [67.9, 809.0], [68.0, 811.0], [68.1, 811.0], [68.2, 811.0], [68.3, 811.0], [68.4, 811.0], [68.5, 811.0], [68.6, 811.0], [68.7, 811.0], [68.8, 811.0], [68.9, 811.0], [69.0, 811.0], [69.1, 812.0], [69.2, 812.0], [69.3, 812.0], [69.4, 812.0], [69.5, 812.0], [69.6, 816.0], [69.7, 816.0], [69.8, 819.0], [69.9, 819.0], [70.0, 819.0], [70.1, 820.0], [70.2, 820.0], [70.3, 820.0], [70.4, 821.0], [70.5, 821.0], [70.6, 823.0], [70.7, 823.0], [70.8, 823.0], [70.9, 824.0], [71.0, 824.0], [71.1, 826.0], [71.2, 826.0], [71.3, 826.0], [71.4, 828.0], [71.5, 828.0], [71.6, 828.0], [71.7, 832.0], [71.8, 832.0], [71.9, 832.0], [72.0, 832.0], [72.1, 832.0], [72.2, 833.0], [72.3, 833.0], [72.4, 835.0], [72.5, 835.0], [72.6, 835.0], [72.7, 835.0], [72.8, 835.0], [72.9, 835.0], [73.0, 836.0], [73.1, 836.0], [73.2, 836.0], [73.3, 836.0], [73.4, 836.0], [73.5, 837.0], [73.6, 837.0], [73.7, 840.0], [73.8, 840.0], [73.9, 840.0], [74.0, 842.0], [74.1, 842.0], [74.2, 842.0], [74.3, 844.0], [74.4, 844.0], [74.5, 845.0], [74.6, 845.0], [74.7, 845.0], [74.8, 846.0], [74.9, 846.0], [75.0, 846.0], [75.1, 850.0], [75.2, 850.0], [75.3, 850.0], [75.4, 850.0], [75.5, 850.0], [75.6, 850.0], [75.7, 850.0], [75.8, 852.0], [75.9, 852.0], [76.0, 852.0], [76.1, 853.0], [76.2, 853.0], [76.3, 853.0], [76.4, 854.0], [76.5, 854.0], [76.6, 855.0], [76.7, 855.0], [76.8, 855.0], [76.9, 856.0], [77.0, 856.0], [77.1, 856.0], [77.2, 856.0], [77.3, 856.0], [77.4, 856.0], [77.5, 856.0], [77.6, 856.0], [77.7, 858.0], [77.8, 858.0], [77.9, 863.0], [78.0, 863.0], [78.1, 863.0], [78.2, 863.0], [78.3, 863.0], [78.4, 864.0], [78.5, 864.0], [78.6, 864.0], [78.7, 866.0], [78.8, 866.0], [78.9, 866.0], [79.0, 870.0], [79.1, 870.0], [79.2, 883.0], [79.3, 883.0], [79.4, 883.0], [79.5, 887.0], [79.6, 887.0], [79.7, 890.0], [79.8, 890.0], [79.9, 890.0], [80.0, 892.0], [80.1, 892.0], [80.2, 892.0], [80.3, 895.0], [80.4, 895.0], [80.5, 897.0], [80.6, 897.0], [80.7, 897.0], [80.8, 898.0], [80.9, 898.0], [81.0, 902.0], [81.1, 902.0], [81.2, 902.0], [81.3, 903.0], [81.4, 903.0], [81.5, 903.0], [81.6, 904.0], [81.7, 904.0], [81.8, 905.0], [81.9, 905.0], [82.0, 905.0], [82.1, 906.0], [82.2, 906.0], [82.3, 912.0], [82.4, 912.0], [82.5, 912.0], [82.6, 913.0], [82.7, 913.0], [82.8, 913.0], [82.9, 914.0], [83.0, 914.0], [83.1, 917.0], [83.2, 917.0], [83.3, 917.0], [83.4, 917.0], [83.5, 917.0], [83.6, 918.0], [83.7, 918.0], [83.8, 918.0], [83.9, 919.0], [84.0, 919.0], [84.1, 919.0], [84.2, 922.0], [84.3, 922.0], [84.4, 923.0], [84.5, 923.0], [84.6, 923.0], [84.7, 926.0], [84.8, 926.0], [84.9, 928.0], [85.0, 928.0], [85.1, 928.0], [85.2, 932.0], [85.3, 932.0], [85.4, 932.0], [85.5, 949.0], [85.6, 949.0], [85.7, 949.0], [85.8, 949.0], [85.9, 949.0], [86.0, 953.0], [86.1, 953.0], [86.2, 955.0], [86.3, 955.0], [86.4, 955.0], [86.5, 961.0], [86.6, 961.0], [86.7, 961.0], [86.8, 963.0], [86.9, 963.0], [87.0, 964.0], [87.1, 964.0], [87.2, 964.0], [87.3, 966.0], [87.4, 966.0], [87.5, 966.0], [87.6, 977.0], [87.7, 977.0], [87.8, 980.0], [87.9, 980.0], [88.0, 980.0], [88.1, 980.0], [88.2, 980.0], [88.3, 981.0], [88.4, 981.0], [88.5, 981.0], [88.6, 986.0], [88.7, 986.0], [88.8, 986.0], [88.9, 987.0], [89.0, 987.0], [89.1, 988.0], [89.2, 988.0], [89.3, 988.0], [89.4, 989.0], [89.5, 989.0], [89.6, 996.0], [89.7, 996.0], [89.8, 996.0], [89.9, 999.0], [90.0, 999.0], [90.1, 999.0], [90.2, 1007.0], [90.3, 1007.0], [90.4, 1011.0], [90.5, 1011.0], [90.6, 1011.0], [90.7, 1013.0], [90.8, 1013.0], [90.9, 1018.0], [91.0, 1018.0], [91.1, 1018.0], [91.2, 1019.0], [91.3, 1019.0], [91.4, 1019.0], [91.5, 1024.0], [91.6, 1024.0], [91.7, 1053.0], [91.8, 1053.0], [91.9, 1053.0], [92.0, 1059.0], [92.1, 1059.0], [92.2, 1066.0], [92.3, 1066.0], [92.4, 1066.0], [92.5, 1067.0], [92.6, 1067.0], [92.7, 1067.0], [92.8, 1074.0], [92.9, 1074.0], [93.0, 1078.0], [93.1, 1078.0], [93.2, 1078.0], [93.3, 1084.0], [93.4, 1084.0], [93.5, 1089.0], [93.6, 1089.0], [93.7, 1089.0], [93.8, 1097.0], [93.9, 1097.0], [94.0, 1097.0], [94.1, 1097.0], [94.2, 1097.0], [94.3, 1098.0], [94.4, 1098.0], [94.5, 1098.0], [94.6, 1103.0], [94.7, 1103.0], [94.8, 1106.0], [94.9, 1106.0], [95.0, 1106.0], [95.1, 1111.0], [95.2, 1111.0], [95.3, 1111.0], [95.4, 1118.0], [95.5, 1118.0], [95.6, 1118.0], [95.7, 1118.0], [95.8, 1118.0], [95.9, 1123.0], [96.0, 1123.0], [96.1, 1128.0], [96.2, 1128.0], [96.3, 1128.0], [96.4, 1130.0], [96.5, 1130.0], [96.6, 1130.0], [96.7, 1149.0], [96.8, 1149.0], [96.9, 1152.0], [97.0, 1152.0], [97.1, 1152.0], [97.2, 1163.0], [97.3, 1163.0], [97.4, 1179.0], [97.5, 1179.0], [97.6, 1179.0], [97.7, 1181.0], [97.8, 1181.0], [97.9, 1181.0], [98.0, 1246.0], [98.1, 1246.0], [98.2, 1252.0], [98.3, 1252.0], [98.4, 1252.0], [98.5, 1302.0], [98.6, 1302.0], [98.7, 1393.0], [98.8, 1393.0], [98.9, 1393.0], [99.0, 1426.0], [99.1, 1426.0], [99.2, 1426.0], [99.3, 3434.0], [99.4, 3434.0], [99.5, 3488.0], [99.6, 3488.0], [99.7, 3488.0], [99.8, 3932.0], [99.9, 3932.0], [100.0, 3932.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 922.0], [0.1, 922.0], [0.2, 922.0], [0.3, 925.0], [0.4, 925.0], [0.5, 925.0], [0.6, 926.0], [0.7, 926.0], [0.8, 935.0], [0.9, 935.0], [1.0, 935.0], [1.1, 938.0], [1.2, 938.0], [1.3, 938.0], [1.4, 940.0], [1.5, 940.0], [1.6, 941.0], [1.7, 941.0], [1.8, 941.0], [1.9, 949.0], [2.0, 949.0], [2.1, 949.0], [2.2, 953.0], [2.3, 953.0], [2.4, 953.0], [2.5, 953.0], [2.6, 953.0], [2.7, 955.0], [2.8, 955.0], [2.9, 955.0], [3.0, 958.0], [3.1, 958.0], [3.2, 960.0], [3.3, 960.0], [3.4, 960.0], [3.5, 961.0], [3.6, 961.0], [3.7, 961.0], [3.8, 961.0], [3.9, 961.0], [4.0, 964.0], [4.1, 964.0], [4.2, 964.0], [4.3, 965.0], [4.4, 965.0], [4.5, 967.0], [4.6, 967.0], [4.7, 967.0], [4.8, 968.0], [4.9, 968.0], [5.0, 968.0], [5.1, 970.0], [5.2, 970.0], [5.3, 971.0], [5.4, 971.0], [5.5, 971.0], [5.6, 972.0], [5.7, 972.0], [5.8, 972.0], [5.9, 975.0], [6.0, 975.0], [6.1, 975.0], [6.2, 975.0], [6.3, 975.0], [6.4, 977.0], [6.5, 977.0], [6.6, 977.0], [6.7, 977.0], [6.8, 977.0], [6.9, 977.0], [7.0, 977.0], [7.1, 977.0], [7.2, 978.0], [7.3, 978.0], [7.4, 978.0], [7.5, 978.0], [7.6, 978.0], [7.7, 978.0], [7.8, 978.0], [7.9, 978.0], [8.0, 979.0], [8.1, 979.0], [8.2, 979.0], [8.3, 979.0], [8.4, 979.0], [8.5, 980.0], [8.6, 980.0], [8.7, 980.0], [8.8, 980.0], [8.9, 980.0], [9.0, 982.0], [9.1, 982.0], [9.2, 982.0], [9.3, 983.0], [9.4, 983.0], [9.5, 983.0], [9.6, 983.0], [9.7, 983.0], [9.8, 984.0], [9.9, 984.0], [10.0, 984.0], [10.1, 984.0], [10.2, 984.0], [10.3, 984.0], [10.4, 985.0], [10.5, 985.0], [10.6, 988.0], [10.7, 988.0], [10.8, 988.0], [10.9, 989.0], [11.0, 989.0], [11.1, 989.0], [11.2, 989.0], [11.3, 989.0], [11.4, 992.0], [11.5, 992.0], [11.6, 992.0], [11.7, 993.0], [11.8, 993.0], [11.9, 993.0], [12.0, 994.0], [12.1, 994.0], [12.2, 996.0], [12.3, 996.0], [12.4, 996.0], [12.5, 997.0], [12.6, 997.0], [12.7, 997.0], [12.8, 997.0], [12.9, 997.0], [13.0, 999.0], [13.1, 999.0], [13.2, 999.0], [13.3, 1001.0], [13.4, 1001.0], [13.5, 1001.0], [13.6, 1001.0], [13.7, 1001.0], [13.8, 1001.0], [13.9, 1001.0], [14.0, 1001.0], [14.1, 1003.0], [14.2, 1003.0], [14.3, 1004.0], [14.4, 1004.0], [14.5, 1004.0], [14.6, 1005.0], [14.7, 1005.0], [14.8, 1005.0], [14.9, 1006.0], [15.0, 1006.0], [15.1, 1008.0], [15.2, 1008.0], [15.3, 1008.0], [15.4, 1010.0], [15.5, 1010.0], [15.6, 1010.0], [15.7, 1010.0], [15.8, 1010.0], [15.9, 1011.0], [16.0, 1011.0], [16.1, 1011.0], [16.2, 1015.0], [16.3, 1015.0], [16.4, 1015.0], [16.5, 1016.0], [16.6, 1016.0], [16.7, 1018.0], [16.8, 1018.0], [16.9, 1018.0], [17.0, 1018.0], [17.1, 1018.0], [17.2, 1021.0], [17.3, 1021.0], [17.4, 1021.0], [17.5, 1022.0], [17.6, 1022.0], [17.7, 1022.0], [17.8, 1024.0], [17.9, 1024.0], [18.0, 1025.0], [18.1, 1025.0], [18.2, 1025.0], [18.3, 1025.0], [18.4, 1025.0], [18.5, 1025.0], [18.6, 1026.0], [18.7, 1026.0], [18.8, 1026.0], [18.9, 1026.0], [19.0, 1026.0], [19.1, 1026.0], [19.2, 1026.0], [19.3, 1026.0], [19.4, 1026.0], [19.5, 1026.0], [19.6, 1028.0], [19.7, 1028.0], [19.8, 1028.0], [19.9, 1028.0], [20.0, 1028.0], [20.1, 1028.0], [20.2, 1028.0], [20.3, 1028.0], [20.4, 1029.0], [20.5, 1029.0], [20.6, 1029.0], [20.7, 1029.0], [20.8, 1029.0], [20.9, 1031.0], [21.0, 1031.0], [21.1, 1031.0], [21.2, 1032.0], [21.3, 1032.0], [21.4, 1032.0], [21.5, 1032.0], [21.6, 1032.0], [21.7, 1033.0], [21.8, 1033.0], [21.9, 1033.0], [22.0, 1033.0], [22.1, 1033.0], [22.2, 1033.0], [22.3, 1033.0], [22.4, 1033.0], [22.5, 1033.0], [22.6, 1033.0], [22.7, 1033.0], [22.8, 1034.0], [22.9, 1034.0], [23.0, 1034.0], [23.1, 1035.0], [23.2, 1035.0], [23.3, 1037.0], [23.4, 1037.0], [23.5, 1037.0], [23.6, 1037.0], [23.7, 1037.0], [23.8, 1037.0], [23.9, 1037.0], [24.0, 1037.0], [24.1, 1038.0], [24.2, 1038.0], [24.3, 1038.0], [24.4, 1038.0], [24.5, 1038.0], [24.6, 1038.0], [24.7, 1038.0], [24.8, 1038.0], [24.9, 1038.0], [25.0, 1038.0], [25.1, 1038.0], [25.2, 1039.0], [25.3, 1039.0], [25.4, 1042.0], [25.5, 1042.0], [25.6, 1042.0], [25.7, 1042.0], [25.8, 1042.0], [25.9, 1042.0], [26.0, 1043.0], [26.1, 1043.0], [26.2, 1046.0], [26.3, 1046.0], [26.4, 1046.0], [26.5, 1046.0], [26.6, 1046.0], [26.7, 1046.0], [26.8, 1046.0], [26.9, 1046.0], [27.0, 1048.0], [27.1, 1048.0], [27.2, 1048.0], [27.3, 1048.0], [27.4, 1048.0], [27.5, 1048.0], [27.6, 1048.0], [27.7, 1048.0], [27.8, 1049.0], [27.9, 1049.0], [28.0, 1049.0], [28.1, 1049.0], [28.2, 1049.0], [28.3, 1049.0], [28.4, 1049.0], [28.5, 1049.0], [28.6, 1050.0], [28.7, 1050.0], [28.8, 1050.0], [28.9, 1050.0], [29.0, 1050.0], [29.1, 1050.0], [29.2, 1053.0], [29.3, 1053.0], [29.4, 1055.0], [29.5, 1055.0], [29.6, 1055.0], [29.7, 1055.0], [29.8, 1055.0], [29.9, 1056.0], [30.0, 1056.0], [30.1, 1056.0], [30.2, 1057.0], [30.3, 1057.0], [30.4, 1057.0], [30.5, 1057.0], [30.6, 1057.0], [30.7, 1058.0], [30.8, 1058.0], [30.9, 1058.0], [31.0, 1058.0], [31.1, 1058.0], [31.2, 1058.0], [31.3, 1059.0], [31.4, 1059.0], [31.5, 1059.0], [31.6, 1059.0], [31.7, 1059.0], [31.8, 1061.0], [31.9, 1061.0], [32.0, 1061.0], [32.1, 1062.0], [32.2, 1062.0], [32.3, 1062.0], [32.4, 1062.0], [32.5, 1062.0], [32.6, 1062.0], [32.7, 1062.0], [32.8, 1062.0], [32.9, 1062.0], [33.0, 1062.0], [33.1, 1062.0], [33.2, 1062.0], [33.3, 1062.0], [33.4, 1064.0], [33.5, 1064.0], [33.6, 1065.0], [33.7, 1065.0], [33.8, 1065.0], [33.9, 1065.0], [34.0, 1065.0], [34.1, 1065.0], [34.2, 1066.0], [34.3, 1066.0], [34.4, 1068.0], [34.5, 1068.0], [34.6, 1068.0], [34.7, 1070.0], [34.8, 1070.0], [34.9, 1070.0], [35.0, 1072.0], [35.1, 1072.0], [35.2, 1072.0], [35.3, 1072.0], [35.4, 1072.0], [35.5, 1073.0], [35.6, 1073.0], [35.7, 1073.0], [35.8, 1074.0], [35.9, 1074.0], [36.0, 1074.0], [36.1, 1074.0], [36.2, 1074.0], [36.3, 1075.0], [36.4, 1075.0], [36.5, 1075.0], [36.6, 1075.0], [36.7, 1075.0], [36.8, 1075.0], [36.9, 1075.0], [37.0, 1075.0], [37.1, 1076.0], [37.2, 1076.0], [37.3, 1076.0], [37.4, 1076.0], [37.5, 1076.0], [37.6, 1076.0], [37.7, 1076.0], [37.8, 1076.0], [37.9, 1076.0], [38.0, 1076.0], [38.1, 1079.0], [38.2, 1079.0], [38.3, 1079.0], [38.4, 1079.0], [38.5, 1079.0], [38.6, 1079.0], [38.7, 1081.0], [38.8, 1081.0], [38.9, 1082.0], [39.0, 1082.0], [39.1, 1082.0], [39.2, 1082.0], [39.3, 1082.0], [39.4, 1082.0], [39.5, 1084.0], [39.6, 1084.0], [39.7, 1084.0], [39.8, 1084.0], [39.9, 1084.0], [40.0, 1085.0], [40.1, 1085.0], [40.2, 1085.0], [40.3, 1085.0], [40.4, 1085.0], [40.5, 1086.0], [40.6, 1086.0], [40.7, 1086.0], [40.8, 1087.0], [40.9, 1087.0], [41.0, 1087.0], [41.1, 1088.0], [41.2, 1088.0], [41.3, 1089.0], [41.4, 1089.0], [41.5, 1089.0], [41.6, 1092.0], [41.7, 1092.0], [41.8, 1093.0], [41.9, 1093.0], [42.0, 1093.0], [42.1, 1093.0], [42.2, 1093.0], [42.3, 1093.0], [42.4, 1094.0], [42.5, 1094.0], [42.6, 1096.0], [42.7, 1096.0], [42.8, 1096.0], [42.9, 1096.0], [43.0, 1096.0], [43.1, 1096.0], [43.2, 1097.0], [43.3, 1097.0], [43.4, 1097.0], [43.5, 1097.0], [43.6, 1097.0], [43.7, 1098.0], [43.8, 1098.0], [43.9, 1098.0], [44.0, 1098.0], [44.1, 1098.0], [44.2, 1099.0], [44.3, 1099.0], [44.4, 1099.0], [44.5, 1101.0], [44.6, 1101.0], [44.7, 1101.0], [44.8, 1104.0], [44.9, 1104.0], [45.0, 1104.0], [45.1, 1104.0], [45.2, 1104.0], [45.3, 1104.0], [45.4, 1104.0], [45.5, 1104.0], [45.6, 1104.0], [45.7, 1104.0], [45.8, 1105.0], [45.9, 1105.0], [46.0, 1105.0], [46.1, 1105.0], [46.2, 1105.0], [46.3, 1106.0], [46.4, 1106.0], [46.5, 1106.0], [46.6, 1108.0], [46.7, 1108.0], [46.8, 1108.0], [46.9, 1109.0], [47.0, 1109.0], [47.1, 1109.0], [47.2, 1109.0], [47.3, 1109.0], [47.4, 1111.0], [47.5, 1111.0], [47.6, 1111.0], [47.7, 1113.0], [47.8, 1113.0], [47.9, 1113.0], [48.0, 1113.0], [48.1, 1113.0], [48.2, 1115.0], [48.3, 1115.0], [48.4, 1115.0], [48.5, 1116.0], [48.6, 1116.0], [48.7, 1117.0], [48.8, 1117.0], [48.9, 1117.0], [49.0, 1118.0], [49.1, 1118.0], [49.2, 1118.0], [49.3, 1118.0], [49.4, 1118.0], [49.5, 1120.0], [49.6, 1120.0], [49.7, 1120.0], [49.8, 1121.0], [49.9, 1121.0], [50.0, 1121.0], [50.1, 1121.0], [50.2, 1121.0], [50.3, 1122.0], [50.4, 1122.0], [50.5, 1122.0], [50.6, 1126.0], [50.7, 1126.0], [50.8, 1131.0], [50.9, 1131.0], [51.0, 1131.0], [51.1, 1137.0], [51.2, 1137.0], [51.3, 1137.0], [51.4, 1137.0], [51.5, 1137.0], [51.6, 1138.0], [51.7, 1138.0], [51.8, 1138.0], [51.9, 1140.0], [52.0, 1140.0], [52.1, 1140.0], [52.2, 1142.0], [52.3, 1142.0], [52.4, 1142.0], [52.5, 1142.0], [52.6, 1142.0], [52.7, 1143.0], [52.8, 1143.0], [52.9, 1143.0], [53.0, 1143.0], [53.1, 1143.0], [53.2, 1144.0], [53.3, 1144.0], [53.4, 1144.0], [53.5, 1150.0], [53.6, 1150.0], [53.7, 1150.0], [53.8, 1151.0], [53.9, 1151.0], [54.0, 1152.0], [54.1, 1152.0], [54.2, 1152.0], [54.3, 1155.0], [54.4, 1155.0], [54.5, 1157.0], [54.6, 1157.0], [54.7, 1157.0], [54.8, 1157.0], [54.9, 1157.0], [55.0, 1157.0], [55.1, 1157.0], [55.2, 1157.0], [55.3, 1159.0], [55.4, 1159.0], [55.5, 1159.0], [55.6, 1160.0], [55.7, 1160.0], [55.8, 1160.0], [55.9, 1161.0], [56.0, 1161.0], [56.1, 1162.0], [56.2, 1162.0], [56.3, 1162.0], [56.4, 1162.0], [56.5, 1162.0], [56.6, 1162.0], [56.7, 1163.0], [56.8, 1163.0], [56.9, 1164.0], [57.0, 1164.0], [57.1, 1164.0], [57.2, 1164.0], [57.3, 1164.0], [57.4, 1164.0], [57.5, 1165.0], [57.6, 1165.0], [57.7, 1168.0], [57.8, 1168.0], [57.9, 1168.0], [58.0, 1169.0], [58.1, 1169.0], [58.2, 1169.0], [58.3, 1169.0], [58.4, 1169.0], [58.5, 1173.0], [58.6, 1173.0], [58.7, 1173.0], [58.8, 1173.0], [58.9, 1173.0], [59.0, 1173.0], [59.1, 1173.0], [59.2, 1173.0], [59.3, 1173.0], [59.4, 1173.0], [59.5, 1173.0], [59.6, 1174.0], [59.7, 1174.0], [59.8, 1174.0], [59.9, 1174.0], [60.0, 1174.0], [60.1, 1175.0], [60.2, 1175.0], [60.3, 1175.0], [60.4, 1176.0], [60.5, 1176.0], [60.6, 1177.0], [60.7, 1177.0], [60.8, 1177.0], [60.9, 1178.0], [61.0, 1178.0], [61.1, 1178.0], [61.2, 1181.0], [61.3, 1181.0], [61.4, 1182.0], [61.5, 1182.0], [61.6, 1182.0], [61.7, 1183.0], [61.8, 1183.0], [61.9, 1183.0], [62.0, 1184.0], [62.1, 1184.0], [62.2, 1185.0], [62.3, 1185.0], [62.4, 1185.0], [62.5, 1185.0], [62.6, 1185.0], [62.7, 1186.0], [62.8, 1186.0], [62.9, 1186.0], [63.0, 1186.0], [63.1, 1186.0], [63.2, 1186.0], [63.3, 1192.0], [63.4, 1192.0], [63.5, 1193.0], [63.6, 1193.0], [63.7, 1193.0], [63.8, 1193.0], [63.9, 1193.0], [64.0, 1193.0], [64.1, 1195.0], [64.2, 1195.0], [64.3, 1196.0], [64.4, 1196.0], [64.5, 1196.0], [64.6, 1199.0], [64.7, 1199.0], [64.8, 1199.0], [64.9, 1199.0], [65.0, 1199.0], [65.1, 1203.0], [65.2, 1203.0], [65.3, 1203.0], [65.4, 1204.0], [65.5, 1204.0], [65.6, 1204.0], [65.7, 1207.0], [65.8, 1207.0], [65.9, 1207.0], [66.0, 1207.0], [66.1, 1207.0], [66.2, 1208.0], [66.3, 1208.0], [66.4, 1208.0], [66.5, 1209.0], [66.6, 1209.0], [66.7, 1209.0], [66.8, 1209.0], [66.9, 1209.0], [67.0, 1211.0], [67.1, 1211.0], [67.2, 1213.0], [67.3, 1213.0], [67.4, 1213.0], [67.5, 1213.0], [67.6, 1213.0], [67.7, 1213.0], [67.8, 1216.0], [67.9, 1216.0], [68.0, 1217.0], [68.1, 1217.0], [68.2, 1217.0], [68.3, 1218.0], [68.4, 1218.0], [68.5, 1218.0], [68.6, 1219.0], [68.7, 1219.0], [68.8, 1224.0], [68.9, 1224.0], [69.0, 1224.0], [69.1, 1224.0], [69.2, 1224.0], [69.3, 1224.0], [69.4, 1225.0], [69.5, 1225.0], [69.6, 1226.0], [69.7, 1226.0], [69.8, 1226.0], [69.9, 1227.0], [70.0, 1227.0], [70.1, 1227.0], [70.2, 1229.0], [70.3, 1229.0], [70.4, 1230.0], [70.5, 1230.0], [70.6, 1230.0], [70.7, 1230.0], [70.8, 1230.0], [70.9, 1231.0], [71.0, 1231.0], [71.1, 1231.0], [71.2, 1233.0], [71.3, 1233.0], [71.4, 1233.0], [71.5, 1236.0], [71.6, 1236.0], [71.7, 1238.0], [71.8, 1238.0], [71.9, 1238.0], [72.0, 1238.0], [72.1, 1238.0], [72.2, 1238.0], [72.3, 1239.0], [72.4, 1239.0], [72.5, 1239.0], [72.6, 1239.0], [72.7, 1239.0], [72.8, 1241.0], [72.9, 1241.0], [73.0, 1241.0], [73.1, 1246.0], [73.2, 1246.0], [73.3, 1246.0], [73.4, 1246.0], [73.5, 1246.0], [73.6, 1249.0], [73.7, 1249.0], [73.8, 1249.0], [73.9, 1251.0], [74.0, 1251.0], [74.1, 1252.0], [74.2, 1252.0], [74.3, 1252.0], [74.4, 1254.0], [74.5, 1254.0], [74.6, 1254.0], [74.7, 1257.0], [74.8, 1257.0], [74.9, 1259.0], [75.0, 1259.0], [75.1, 1259.0], [75.2, 1262.0], [75.3, 1262.0], [75.4, 1263.0], [75.5, 1263.0], [75.6, 1263.0], [75.7, 1268.0], [75.8, 1268.0], [75.9, 1268.0], [76.0, 1268.0], [76.1, 1268.0], [76.2, 1269.0], [76.3, 1269.0], [76.4, 1269.0], [76.5, 1271.0], [76.6, 1271.0], [76.7, 1271.0], [76.8, 1277.0], [76.9, 1277.0], [77.0, 1281.0], [77.1, 1281.0], [77.2, 1281.0], [77.3, 1281.0], [77.4, 1281.0], [77.5, 1281.0], [77.6, 1283.0], [77.7, 1283.0], [77.8, 1287.0], [77.9, 1287.0], [78.0, 1287.0], [78.1, 1289.0], [78.2, 1289.0], [78.3, 1289.0], [78.4, 1289.0], [78.5, 1289.0], [78.6, 1289.0], [78.7, 1289.0], [78.8, 1289.0], [78.9, 1292.0], [79.0, 1292.0], [79.1, 1292.0], [79.2, 1292.0], [79.3, 1292.0], [79.4, 1293.0], [79.5, 1293.0], [79.6, 1293.0], [79.7, 1293.0], [79.8, 1293.0], [79.9, 1293.0], [80.0, 1293.0], [80.1, 1293.0], [80.2, 1294.0], [80.3, 1294.0], [80.4, 1294.0], [80.5, 1298.0], [80.6, 1298.0], [80.7, 1298.0], [80.8, 1298.0], [80.9, 1298.0], [81.0, 1307.0], [81.1, 1307.0], [81.2, 1307.0], [81.3, 1307.0], [81.4, 1307.0], [81.5, 1308.0], [81.6, 1308.0], [81.7, 1308.0], [81.8, 1308.0], [81.9, 1308.0], [82.0, 1308.0], [82.1, 1308.0], [82.2, 1308.0], [82.3, 1311.0], [82.4, 1311.0], [82.5, 1311.0], [82.6, 1314.0], [82.7, 1314.0], [82.8, 1314.0], [82.9, 1315.0], [83.0, 1315.0], [83.1, 1321.0], [83.2, 1321.0], [83.3, 1321.0], [83.4, 1323.0], [83.5, 1323.0], [83.6, 1325.0], [83.7, 1325.0], [83.8, 1325.0], [83.9, 1326.0], [84.0, 1326.0], [84.1, 1326.0], [84.2, 1330.0], [84.3, 1330.0], [84.4, 1332.0], [84.5, 1332.0], [84.6, 1332.0], [84.7, 1344.0], [84.8, 1344.0], [84.9, 1344.0], [85.0, 1347.0], [85.1, 1347.0], [85.2, 1349.0], [85.3, 1349.0], [85.4, 1349.0], [85.5, 1349.0], [85.6, 1349.0], [85.7, 1349.0], [85.8, 1349.0], [85.9, 1349.0], [86.0, 1351.0], [86.1, 1351.0], [86.2, 1351.0], [86.3, 1356.0], [86.4, 1356.0], [86.5, 1356.0], [86.6, 1357.0], [86.7, 1357.0], [86.8, 1358.0], [86.9, 1358.0], [87.0, 1358.0], [87.1, 1361.0], [87.2, 1361.0], [87.3, 1361.0], [87.4, 1361.0], [87.5, 1361.0], [87.6, 1362.0], [87.7, 1362.0], [87.8, 1362.0], [87.9, 1362.0], [88.0, 1362.0], [88.1, 1364.0], [88.2, 1364.0], [88.3, 1364.0], [88.4, 1365.0], [88.5, 1365.0], [88.6, 1365.0], [88.7, 1368.0], [88.8, 1368.0], [88.9, 1371.0], [89.0, 1371.0], [89.1, 1371.0], [89.2, 1377.0], [89.3, 1377.0], [89.4, 1377.0], [89.5, 1395.0], [89.6, 1395.0], [89.7, 1401.0], [89.8, 1401.0], [89.9, 1401.0], [90.0, 1414.0], [90.1, 1414.0], [90.2, 1414.0], [90.3, 1415.0], [90.4, 1415.0], [90.5, 1416.0], [90.6, 1416.0], [90.7, 1416.0], [90.8, 1417.0], [90.9, 1417.0], [91.0, 1417.0], [91.1, 1417.0], [91.2, 1417.0], [91.3, 1417.0], [91.4, 1417.0], [91.5, 1417.0], [91.6, 1417.0], [91.7, 1417.0], [91.8, 1418.0], [91.9, 1418.0], [92.0, 1418.0], [92.1, 1418.0], [92.2, 1418.0], [92.3, 1418.0], [92.4, 1429.0], [92.5, 1429.0], [92.6, 1438.0], [92.7, 1438.0], [92.8, 1438.0], [92.9, 1444.0], [93.0, 1444.0], [93.1, 1444.0], [93.2, 1448.0], [93.3, 1448.0], [93.4, 1457.0], [93.5, 1457.0], [93.6, 1457.0], [93.7, 1461.0], [93.8, 1461.0], [93.9, 1461.0], [94.0, 1462.0], [94.1, 1462.0], [94.2, 1464.0], [94.3, 1464.0], [94.4, 1464.0], [94.5, 1464.0], [94.6, 1464.0], [94.7, 1464.0], [94.8, 1478.0], [94.9, 1478.0], [95.0, 1494.0], [95.1, 1494.0], [95.2, 1494.0], [95.3, 1497.0], [95.4, 1497.0], [95.5, 1497.0], [95.6, 1497.0], [95.7, 1497.0], [95.8, 1498.0], [95.9, 1498.0], [96.0, 1498.0], [96.1, 1498.0], [96.2, 1498.0], [96.3, 1504.0], [96.4, 1504.0], [96.5, 1504.0], [96.6, 1521.0], [96.7, 1521.0], [96.8, 1521.0], [96.9, 1533.0], [97.0, 1533.0], [97.1, 1576.0], [97.2, 1576.0], [97.3, 1576.0], [97.4, 1611.0], [97.5, 1611.0], [97.6, 1611.0], [97.7, 1747.0], [97.8, 1747.0], [97.9, 1811.0], [98.0, 1811.0], [98.1, 1811.0], [98.2, 2019.0], [98.3, 2019.0], [98.4, 2019.0], [98.5, 2020.0], [98.6, 2020.0], [98.7, 3021.0], [98.8, 3021.0], [98.9, 3021.0], [99.0, 3247.0], [99.1, 3247.0], [99.2, 3247.0], [99.3, 3361.0], [99.4, 3361.0], [99.5, 3394.0], [99.6, 3394.0], [99.7, 3394.0], [99.8, 3700.0], [99.9, 3700.0], [100.0, 3700.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 139.0, "series": [{"data": [[2100.0, 27.0], [2200.0, 11.0], [2300.0, 11.0], [2400.0, 13.0], [2500.0, 4.0], [2600.0, 1.0], [2800.0, 1.0], [3800.0, 1.0], [4000.0, 2.0], [1500.0, 9.0], [1600.0, 66.0], [1700.0, 66.0], [1800.0, 81.0], [1900.0, 62.0], [2000.0, 42.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1100.0, 13.0], [600.0, 114.0], [1200.0, 2.0], [1300.0, 2.0], [700.0, 139.0], [1400.0, 1.0], [800.0, 58.0], [3400.0, 2.0], [900.0, 35.0], [3900.0, 1.0], [1000.0, 17.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[3000.0, 1.0], [3200.0, 1.0], [3300.0, 2.0], [900.0, 50.0], [3700.0, 1.0], [1000.0, 118.0], [1100.0, 78.0], [1200.0, 60.0], [1300.0, 33.0], [1400.0, 25.0], [1500.0, 4.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 1.0], [2000.0, 2.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 414.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 745.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 745.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 414.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.036496350364962, "minX": 1.7061924E12, "maxY": 19.984813084112155, "series": [{"data": [[1.70619252E12, 12.036496350364962], [1.70619246E12, 19.984813084112155], [1.7061924E12, 14.325301204819285]], "isOverall": false, "label": "20 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619252E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 655.0, "minX": 1.0, "maxY": 2189.0, "series": [{"data": [[8.0, 1926.6666666666667], [2.0, 2189.0], [9.0, 1975.75], [10.0, 1876.4444444444443], [11.0, 1759.0], [3.0, 1959.0], [12.0, 1743.25], [13.0, 1692.1666666666667], [14.0, 1723.7272727272727], [15.0, 1968.8], [4.0, 1769.0], [16.0, 1733.6666666666665], [17.0, 1796.2727272727273], [18.0, 1915.5000000000002], [19.0, 1964.6666666666667], [5.0, 1802.0], [20.0, 1953.986531986532], [6.0, 1684.75], [7.0, 1719.4]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[18.035264483627202, 1921.9168765743075]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[8.0, 835.5], [9.0, 713.5], [10.0, 716.5], [11.0, 729.3333333333334], [12.0, 658.0], [13.0, 695.4], [14.0, 728.8571428571429], [15.0, 787.1666666666667], [4.0, 817.3333333333334], [16.0, 739.8], [1.0, 655.0], [17.0, 790.1666666666666], [18.0, 853.1], [19.0, 769.6], [5.0, 708.75], [20.0, 829.549828178694], [6.0, 663.0], [7.0, 733.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[18.273437500000007, 811.1223958333323]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 1019.4], [9.0, 1006.6666666666666], [10.0, 1077.25], [11.0, 1030.6666666666667], [12.0, 997.625], [13.0, 1072.6666666666667], [14.0, 1039.5], [15.0, 1099.3846153846157], [16.0, 1042.3333333333333], [17.0, 1138.2727272727273], [18.0, 1133.75], [19.0, 1105.0], [5.0, 987.1666666666667], [20.0, 1225.432989690722], [6.0, 1034.0], [7.0, 1122.75]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[18.40476190476192, 1189.9206349206365]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 20.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3457.8166666666666, "minX": 1.7061924E12, "maxY": 45707.066666666666, "series": [{"data": [[1.70619252E12, 3457.8166666666666], [1.70619246E12, 22154.483333333334], [1.7061924E12, 4332.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70619252E12, 7300.55], [1.70619246E12, 45707.066666666666], [1.7061924E12, 8840.033333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619252E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 725.7441860465117, "minX": 1.7061924E12, "maxY": 1954.3684210526314, "series": [{"data": [[1.70619252E12, 1799.9399999999998], [1.70619246E12, 1954.3684210526314], [1.7061924E12, 1871.1129032258066]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619252E12, 725.7441860465117], [1.70619246E12, 826.1478873239432], [1.7061924E12, 800.6666666666667]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619252E12, 1058.2727272727275], [1.70619246E12, 1225.160278745645], [1.7061924E12, 1097.9787234042553]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619252E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 725.7209302325583, "minX": 1.7061924E12, "maxY": 1954.3157894736853, "series": [{"data": [[1.70619252E12, 1799.9199999999998], [1.70619246E12, 1954.3157894736853], [1.7061924E12, 1871.0645161290322]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619252E12, 725.7209302325583], [1.70619246E12, 826.1056338028168], [1.7061924E12, 800.5789473684209]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619252E12, 1058.2500000000002], [1.70619246E12, 1225.1219512195134], [1.7061924E12, 1097.9148936170213]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619252E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7061924E12, "maxY": 753.3225806451612, "series": [{"data": [[1.70619252E12, 687.6199999999999], [1.70619246E12, 744.8666666666668], [1.7061924E12, 753.3225806451612]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70619252E12, 0.0], [1.70619246E12, 0.0], [1.7061924E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70619252E12, 0.0], [1.70619246E12, 0.0], [1.7061924E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619252E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 628.0, "minX": 1.7061924E12, "maxY": 4066.0, "series": [{"data": [[1.70619252E12, 2191.0], [1.70619246E12, 4066.0], [1.7061924E12, 2424.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70619252E12, 1902.8], [1.70619246E12, 2034.9], [1.7061924E12, 2006.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70619252E12, 2190.62], [1.70619246E12, 3375.1899999999982], [1.7061924E12, 2411.2700000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70619252E12, 2033.6999999999994], [1.70619246E12, 2248.1499999999996], [1.7061924E12, 2118.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70619252E12, 629.0], [1.70619246E12, 630.0], [1.7061924E12, 628.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70619252E12, 1048.0], [1.70619246E12, 1174.5], [1.7061924E12, 1070.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619252E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1029.0, "minX": 1.0, "maxY": 1907.5, "series": [{"data": [[8.0, 1044.0], [2.0, 1907.5], [9.0, 1161.0], [10.0, 1045.5], [11.0, 1060.5], [3.0, 1409.5], [12.0, 1104.5], [13.0, 1079.0], [14.0, 1223.5], [15.0, 1157.0], [1.0, 1473.0], [4.0, 1029.0], [16.0, 1407.5], [17.0, 1174.0], [18.0, 1104.0], [19.0, 1207.0], [20.0, 1337.0], [5.0, 1595.0], [21.0, 1292.0], [6.0, 1294.0], [7.0, 1042.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1029.0, "minX": 1.0, "maxY": 1907.5, "series": [{"data": [[8.0, 1044.0], [2.0, 1907.5], [9.0, 1161.0], [10.0, 1045.5], [11.0, 1060.5], [3.0, 1409.5], [12.0, 1104.5], [13.0, 1079.0], [14.0, 1223.5], [15.0, 1157.0], [1.0, 1473.0], [4.0, 1029.0], [16.0, 1407.5], [17.0, 1174.0], [18.0, 1104.0], [19.0, 1207.0], [20.0, 1337.0], [5.0, 1595.0], [21.0, 1292.0], [6.0, 1294.0], [7.0, 1042.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 21.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.9833333333333334, "minX": 1.7061924E12, "maxY": 14.233333333333333, "series": [{"data": [[1.70619252E12, 1.9833333333333334], [1.70619246E12, 14.233333333333333], [1.7061924E12, 3.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619252E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.283333333333333, "minX": 1.7061924E12, "maxY": 14.266666666666667, "series": [{"data": [[1.70619252E12, 2.283333333333333], [1.70619246E12, 14.266666666666667], [1.7061924E12, 2.7666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70619252E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.7166666666666667, "minX": 1.7061924E12, "maxY": 4.783333333333333, "series": [{"data": [[1.70619252E12, 0.7333333333333333], [1.70619246E12, 4.783333333333333], [1.7061924E12, 0.7833333333333333]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70619252E12, 0.8333333333333334], [1.70619246E12, 4.75], [1.7061924E12, 1.0333333333333334]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70619252E12, 0.7166666666666667], [1.70619246E12, 4.733333333333333], [1.7061924E12, 0.95]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619252E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.283333333333333, "minX": 1.7061924E12, "maxY": 14.266666666666667, "series": [{"data": [[1.70619252E12, 2.283333333333333], [1.70619246E12, 14.266666666666667], [1.7061924E12, 2.7666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70619252E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

