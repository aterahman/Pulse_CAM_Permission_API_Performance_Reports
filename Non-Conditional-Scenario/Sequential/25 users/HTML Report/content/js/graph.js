/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 580.0, "minX": 0.0, "maxY": 4963.0, "series": [{"data": [[0.0, 1553.0], [0.1, 1553.0], [0.2, 1582.0], [0.3, 1588.0], [0.4, 1593.0], [0.5, 1594.0], [0.6, 1599.0], [0.7, 1599.0], [0.8, 1600.0], [0.9, 1600.0], [1.0, 1602.0], [1.1, 1602.0], [1.2, 1603.0], [1.3, 1607.0], [1.4, 1607.0], [1.5, 1616.0], [1.6, 1617.0], [1.7, 1617.0], [1.8, 1618.0], [1.9, 1623.0], [2.0, 1627.0], [2.1, 1627.0], [2.2, 1627.0], [2.3, 1628.0], [2.4, 1630.0], [2.5, 1632.0], [2.6, 1632.0], [2.7, 1632.0], [2.8, 1634.0], [2.9, 1636.0], [3.0, 1636.0], [3.1, 1641.0], [3.2, 1642.0], [3.3, 1642.0], [3.4, 1642.0], [3.5, 1643.0], [3.6, 1643.0], [3.7, 1643.0], [3.8, 1644.0], [3.9, 1644.0], [4.0, 1647.0], [4.1, 1647.0], [4.2, 1648.0], [4.3, 1649.0], [4.4, 1651.0], [4.5, 1651.0], [4.6, 1654.0], [4.7, 1654.0], [4.8, 1655.0], [4.9, 1656.0], [5.0, 1656.0], [5.1, 1658.0], [5.2, 1661.0], [5.3, 1662.0], [5.4, 1662.0], [5.5, 1662.0], [5.6, 1662.0], [5.7, 1662.0], [5.8, 1663.0], [5.9, 1663.0], [6.0, 1665.0], [6.1, 1665.0], [6.2, 1665.0], [6.3, 1665.0], [6.4, 1668.0], [6.5, 1668.0], [6.6, 1668.0], [6.7, 1670.0], [6.8, 1670.0], [6.9, 1671.0], [7.0, 1671.0], [7.1, 1673.0], [7.2, 1675.0], [7.3, 1675.0], [7.4, 1675.0], [7.5, 1676.0], [7.6, 1678.0], [7.7, 1679.0], [7.8, 1680.0], [7.9, 1680.0], [8.0, 1682.0], [8.1, 1682.0], [8.2, 1683.0], [8.3, 1684.0], [8.4, 1684.0], [8.5, 1684.0], [8.6, 1684.0], [8.7, 1684.0], [8.8, 1684.0], [8.9, 1684.0], [9.0, 1684.0], [9.1, 1685.0], [9.2, 1686.0], [9.3, 1688.0], [9.4, 1688.0], [9.5, 1688.0], [9.6, 1688.0], [9.7, 1688.0], [9.8, 1689.0], [9.9, 1689.0], [10.0, 1690.0], [10.1, 1690.0], [10.2, 1691.0], [10.3, 1691.0], [10.4, 1692.0], [10.5, 1692.0], [10.6, 1693.0], [10.7, 1694.0], [10.8, 1694.0], [10.9, 1695.0], [11.0, 1697.0], [11.1, 1697.0], [11.2, 1698.0], [11.3, 1699.0], [11.4, 1699.0], [11.5, 1699.0], [11.6, 1699.0], [11.7, 1700.0], [11.8, 1700.0], [11.9, 1701.0], [12.0, 1701.0], [12.1, 1701.0], [12.2, 1701.0], [12.3, 1702.0], [12.4, 1704.0], [12.5, 1704.0], [12.6, 1706.0], [12.7, 1706.0], [12.8, 1706.0], [12.9, 1707.0], [13.0, 1707.0], [13.1, 1707.0], [13.2, 1708.0], [13.3, 1708.0], [13.4, 1709.0], [13.5, 1709.0], [13.6, 1709.0], [13.7, 1709.0], [13.8, 1710.0], [13.9, 1710.0], [14.0, 1711.0], [14.1, 1711.0], [14.2, 1711.0], [14.3, 1711.0], [14.4, 1711.0], [14.5, 1711.0], [14.6, 1713.0], [14.7, 1715.0], [14.8, 1715.0], [14.9, 1715.0], [15.0, 1717.0], [15.1, 1717.0], [15.2, 1718.0], [15.3, 1719.0], [15.4, 1719.0], [15.5, 1719.0], [15.6, 1720.0], [15.7, 1720.0], [15.8, 1721.0], [15.9, 1721.0], [16.0, 1721.0], [16.1, 1722.0], [16.2, 1722.0], [16.3, 1723.0], [16.4, 1723.0], [16.5, 1724.0], [16.6, 1725.0], [16.7, 1725.0], [16.8, 1725.0], [16.9, 1726.0], [17.0, 1726.0], [17.1, 1727.0], [17.2, 1728.0], [17.3, 1730.0], [17.4, 1730.0], [17.5, 1730.0], [17.6, 1730.0], [17.7, 1730.0], [17.8, 1731.0], [17.9, 1731.0], [18.0, 1734.0], [18.1, 1734.0], [18.2, 1734.0], [18.3, 1734.0], [18.4, 1734.0], [18.5, 1734.0], [18.6, 1735.0], [18.7, 1735.0], [18.8, 1735.0], [18.9, 1735.0], [19.0, 1736.0], [19.1, 1736.0], [19.2, 1736.0], [19.3, 1736.0], [19.4, 1737.0], [19.5, 1737.0], [19.6, 1739.0], [19.7, 1740.0], [19.8, 1740.0], [19.9, 1740.0], [20.0, 1741.0], [20.1, 1741.0], [20.2, 1741.0], [20.3, 1742.0], [20.4, 1743.0], [20.5, 1744.0], [20.6, 1745.0], [20.7, 1745.0], [20.8, 1746.0], [20.9, 1746.0], [21.0, 1746.0], [21.1, 1748.0], [21.2, 1748.0], [21.3, 1749.0], [21.4, 1749.0], [21.5, 1749.0], [21.6, 1751.0], [21.7, 1753.0], [21.8, 1753.0], [21.9, 1754.0], [22.0, 1754.0], [22.1, 1757.0], [22.2, 1757.0], [22.3, 1758.0], [22.4, 1758.0], [22.5, 1758.0], [22.6, 1760.0], [22.7, 1761.0], [22.8, 1762.0], [22.9, 1762.0], [23.0, 1762.0], [23.1, 1763.0], [23.2, 1763.0], [23.3, 1764.0], [23.4, 1765.0], [23.5, 1765.0], [23.6, 1765.0], [23.7, 1765.0], [23.8, 1765.0], [23.9, 1766.0], [24.0, 1766.0], [24.1, 1767.0], [24.2, 1767.0], [24.3, 1767.0], [24.4, 1768.0], [24.5, 1768.0], [24.6, 1769.0], [24.7, 1769.0], [24.8, 1769.0], [24.9, 1769.0], [25.0, 1769.0], [25.1, 1770.0], [25.2, 1771.0], [25.3, 1773.0], [25.4, 1773.0], [25.5, 1774.0], [25.6, 1774.0], [25.7, 1775.0], [25.8, 1776.0], [25.9, 1776.0], [26.0, 1777.0], [26.1, 1778.0], [26.2, 1778.0], [26.3, 1779.0], [26.4, 1780.0], [26.5, 1781.0], [26.6, 1782.0], [26.7, 1783.0], [26.8, 1784.0], [26.9, 1784.0], [27.0, 1785.0], [27.1, 1786.0], [27.2, 1787.0], [27.3, 1788.0], [27.4, 1788.0], [27.5, 1788.0], [27.6, 1788.0], [27.7, 1789.0], [27.8, 1791.0], [27.9, 1792.0], [28.0, 1792.0], [28.1, 1792.0], [28.2, 1792.0], [28.3, 1793.0], [28.4, 1793.0], [28.5, 1793.0], [28.6, 1793.0], [28.7, 1794.0], [28.8, 1794.0], [28.9, 1794.0], [29.0, 1795.0], [29.1, 1795.0], [29.2, 1797.0], [29.3, 1797.0], [29.4, 1797.0], [29.5, 1797.0], [29.6, 1797.0], [29.7, 1797.0], [29.8, 1800.0], [29.9, 1800.0], [30.0, 1801.0], [30.1, 1802.0], [30.2, 1802.0], [30.3, 1802.0], [30.4, 1803.0], [30.5, 1803.0], [30.6, 1804.0], [30.7, 1804.0], [30.8, 1805.0], [30.9, 1805.0], [31.0, 1805.0], [31.1, 1805.0], [31.2, 1806.0], [31.3, 1807.0], [31.4, 1807.0], [31.5, 1807.0], [31.6, 1807.0], [31.7, 1808.0], [31.8, 1810.0], [31.9, 1810.0], [32.0, 1812.0], [32.1, 1814.0], [32.2, 1817.0], [32.3, 1817.0], [32.4, 1817.0], [32.5, 1818.0], [32.6, 1818.0], [32.7, 1818.0], [32.8, 1819.0], [32.9, 1819.0], [33.0, 1819.0], [33.1, 1820.0], [33.2, 1820.0], [33.3, 1820.0], [33.4, 1820.0], [33.5, 1820.0], [33.6, 1820.0], [33.7, 1821.0], [33.8, 1822.0], [33.9, 1823.0], [34.0, 1824.0], [34.1, 1824.0], [34.2, 1825.0], [34.3, 1825.0], [34.4, 1825.0], [34.5, 1825.0], [34.6, 1826.0], [34.7, 1826.0], [34.8, 1827.0], [34.9, 1827.0], [35.0, 1827.0], [35.1, 1827.0], [35.2, 1829.0], [35.3, 1831.0], [35.4, 1832.0], [35.5, 1834.0], [35.6, 1834.0], [35.7, 1834.0], [35.8, 1834.0], [35.9, 1835.0], [36.0, 1835.0], [36.1, 1835.0], [36.2, 1836.0], [36.3, 1836.0], [36.4, 1836.0], [36.5, 1838.0], [36.6, 1838.0], [36.7, 1839.0], [36.8, 1839.0], [36.9, 1839.0], [37.0, 1839.0], [37.1, 1839.0], [37.2, 1840.0], [37.3, 1841.0], [37.4, 1841.0], [37.5, 1842.0], [37.6, 1842.0], [37.7, 1843.0], [37.8, 1847.0], [37.9, 1847.0], [38.0, 1848.0], [38.1, 1849.0], [38.2, 1849.0], [38.3, 1849.0], [38.4, 1849.0], [38.5, 1850.0], [38.6, 1850.0], [38.7, 1852.0], [38.8, 1853.0], [38.9, 1856.0], [39.0, 1856.0], [39.1, 1857.0], [39.2, 1857.0], [39.3, 1858.0], [39.4, 1858.0], [39.5, 1860.0], [39.6, 1860.0], [39.7, 1861.0], [39.8, 1861.0], [39.9, 1862.0], [40.0, 1863.0], [40.1, 1864.0], [40.2, 1865.0], [40.3, 1865.0], [40.4, 1867.0], [40.5, 1868.0], [40.6, 1868.0], [40.7, 1870.0], [40.8, 1870.0], [40.9, 1871.0], [41.0, 1871.0], [41.1, 1871.0], [41.2, 1872.0], [41.3, 1872.0], [41.4, 1873.0], [41.5, 1873.0], [41.6, 1873.0], [41.7, 1873.0], [41.8, 1873.0], [41.9, 1873.0], [42.0, 1874.0], [42.1, 1875.0], [42.2, 1875.0], [42.3, 1875.0], [42.4, 1875.0], [42.5, 1875.0], [42.6, 1876.0], [42.7, 1877.0], [42.8, 1878.0], [42.9, 1879.0], [43.0, 1879.0], [43.1, 1880.0], [43.2, 1881.0], [43.3, 1882.0], [43.4, 1883.0], [43.5, 1883.0], [43.6, 1884.0], [43.7, 1884.0], [43.8, 1885.0], [43.9, 1886.0], [44.0, 1887.0], [44.1, 1887.0], [44.2, 1888.0], [44.3, 1888.0], [44.4, 1889.0], [44.5, 1889.0], [44.6, 1889.0], [44.7, 1890.0], [44.8, 1890.0], [44.9, 1892.0], [45.0, 1892.0], [45.1, 1894.0], [45.2, 1895.0], [45.3, 1895.0], [45.4, 1895.0], [45.5, 1895.0], [45.6, 1895.0], [45.7, 1895.0], [45.8, 1896.0], [45.9, 1896.0], [46.0, 1897.0], [46.1, 1897.0], [46.2, 1899.0], [46.3, 1899.0], [46.4, 1899.0], [46.5, 1900.0], [46.6, 1900.0], [46.7, 1901.0], [46.8, 1901.0], [46.9, 1902.0], [47.0, 1902.0], [47.1, 1902.0], [47.2, 1902.0], [47.3, 1902.0], [47.4, 1903.0], [47.5, 1904.0], [47.6, 1906.0], [47.7, 1906.0], [47.8, 1906.0], [47.9, 1907.0], [48.0, 1907.0], [48.1, 1908.0], [48.2, 1911.0], [48.3, 1911.0], [48.4, 1911.0], [48.5, 1911.0], [48.6, 1913.0], [48.7, 1913.0], [48.8, 1915.0], [48.9, 1915.0], [49.0, 1915.0], [49.1, 1916.0], [49.2, 1919.0], [49.3, 1919.0], [49.4, 1921.0], [49.5, 1922.0], [49.6, 1924.0], [49.7, 1924.0], [49.8, 1924.0], [49.9, 1924.0], [50.0, 1925.0], [50.1, 1927.0], [50.2, 1929.0], [50.3, 1929.0], [50.4, 1929.0], [50.5, 1930.0], [50.6, 1931.0], [50.7, 1932.0], [50.8, 1932.0], [50.9, 1932.0], [51.0, 1933.0], [51.1, 1933.0], [51.2, 1934.0], [51.3, 1934.0], [51.4, 1935.0], [51.5, 1935.0], [51.6, 1936.0], [51.7, 1936.0], [51.8, 1936.0], [51.9, 1936.0], [52.0, 1937.0], [52.1, 1940.0], [52.2, 1940.0], [52.3, 1941.0], [52.4, 1941.0], [52.5, 1941.0], [52.6, 1944.0], [52.7, 1945.0], [52.8, 1945.0], [52.9, 1945.0], [53.0, 1946.0], [53.1, 1946.0], [53.2, 1948.0], [53.3, 1948.0], [53.4, 1955.0], [53.5, 1956.0], [53.6, 1957.0], [53.7, 1957.0], [53.8, 1958.0], [53.9, 1959.0], [54.0, 1959.0], [54.1, 1960.0], [54.2, 1960.0], [54.3, 1961.0], [54.4, 1961.0], [54.5, 1961.0], [54.6, 1961.0], [54.7, 1962.0], [54.8, 1964.0], [54.9, 1965.0], [55.0, 1965.0], [55.1, 1965.0], [55.2, 1966.0], [55.3, 1966.0], [55.4, 1967.0], [55.5, 1968.0], [55.6, 1969.0], [55.7, 1969.0], [55.8, 1969.0], [55.9, 1969.0], [56.0, 1971.0], [56.1, 1971.0], [56.2, 1972.0], [56.3, 1972.0], [56.4, 1972.0], [56.5, 1972.0], [56.6, 1972.0], [56.7, 1973.0], [56.8, 1973.0], [56.9, 1974.0], [57.0, 1974.0], [57.1, 1974.0], [57.2, 1975.0], [57.3, 1975.0], [57.4, 1976.0], [57.5, 1976.0], [57.6, 1977.0], [57.7, 1978.0], [57.8, 1978.0], [57.9, 1981.0], [58.0, 1981.0], [58.1, 1981.0], [58.2, 1981.0], [58.3, 1981.0], [58.4, 1981.0], [58.5, 1982.0], [58.6, 1983.0], [58.7, 1983.0], [58.8, 1984.0], [58.9, 1986.0], [59.0, 1986.0], [59.1, 1986.0], [59.2, 1987.0], [59.3, 1988.0], [59.4, 1989.0], [59.5, 1989.0], [59.6, 1992.0], [59.7, 1993.0], [59.8, 1993.0], [59.9, 1996.0], [60.0, 1996.0], [60.1, 1999.0], [60.2, 2000.0], [60.3, 2002.0], [60.4, 2003.0], [60.5, 2003.0], [60.6, 2003.0], [60.7, 2003.0], [60.8, 2003.0], [60.9, 2005.0], [61.0, 2006.0], [61.1, 2006.0], [61.2, 2006.0], [61.3, 2007.0], [61.4, 2009.0], [61.5, 2009.0], [61.6, 2010.0], [61.7, 2011.0], [61.8, 2011.0], [61.9, 2011.0], [62.0, 2011.0], [62.1, 2013.0], [62.2, 2014.0], [62.3, 2014.0], [62.4, 2014.0], [62.5, 2014.0], [62.6, 2015.0], [62.7, 2018.0], [62.8, 2018.0], [62.9, 2019.0], [63.0, 2020.0], [63.1, 2020.0], [63.2, 2020.0], [63.3, 2021.0], [63.4, 2021.0], [63.5, 2021.0], [63.6, 2022.0], [63.7, 2024.0], [63.8, 2024.0], [63.9, 2025.0], [64.0, 2025.0], [64.1, 2027.0], [64.2, 2027.0], [64.3, 2028.0], [64.4, 2028.0], [64.5, 2028.0], [64.6, 2029.0], [64.7, 2029.0], [64.8, 2030.0], [64.9, 2032.0], [65.0, 2033.0], [65.1, 2033.0], [65.2, 2033.0], [65.3, 2033.0], [65.4, 2034.0], [65.5, 2035.0], [65.6, 2035.0], [65.7, 2036.0], [65.8, 2036.0], [65.9, 2037.0], [66.0, 2037.0], [66.1, 2038.0], [66.2, 2040.0], [66.3, 2042.0], [66.4, 2043.0], [66.5, 2043.0], [66.6, 2043.0], [66.7, 2044.0], [66.8, 2044.0], [66.9, 2044.0], [67.0, 2044.0], [67.1, 2045.0], [67.2, 2045.0], [67.3, 2048.0], [67.4, 2048.0], [67.5, 2049.0], [67.6, 2049.0], [67.7, 2049.0], [67.8, 2049.0], [67.9, 2049.0], [68.0, 2051.0], [68.1, 2051.0], [68.2, 2053.0], [68.3, 2053.0], [68.4, 2054.0], [68.5, 2054.0], [68.6, 2055.0], [68.7, 2057.0], [68.8, 2058.0], [68.9, 2058.0], [69.0, 2062.0], [69.1, 2063.0], [69.2, 2063.0], [69.3, 2066.0], [69.4, 2069.0], [69.5, 2069.0], [69.6, 2069.0], [69.7, 2070.0], [69.8, 2070.0], [69.9, 2071.0], [70.0, 2071.0], [70.1, 2071.0], [70.2, 2072.0], [70.3, 2073.0], [70.4, 2075.0], [70.5, 2075.0], [70.6, 2075.0], [70.7, 2076.0], [70.8, 2076.0], [70.9, 2077.0], [71.0, 2079.0], [71.1, 2079.0], [71.2, 2079.0], [71.3, 2079.0], [71.4, 2081.0], [71.5, 2081.0], [71.6, 2082.0], [71.7, 2084.0], [71.8, 2085.0], [71.9, 2085.0], [72.0, 2085.0], [72.1, 2085.0], [72.2, 2086.0], [72.3, 2086.0], [72.4, 2087.0], [72.5, 2087.0], [72.6, 2087.0], [72.7, 2088.0], [72.8, 2089.0], [72.9, 2089.0], [73.0, 2089.0], [73.1, 2089.0], [73.2, 2089.0], [73.3, 2090.0], [73.4, 2090.0], [73.5, 2090.0], [73.6, 2091.0], [73.7, 2091.0], [73.8, 2092.0], [73.9, 2092.0], [74.0, 2094.0], [74.1, 2096.0], [74.2, 2097.0], [74.3, 2097.0], [74.4, 2098.0], [74.5, 2098.0], [74.6, 2098.0], [74.7, 2098.0], [74.8, 2099.0], [74.9, 2100.0], [75.0, 2103.0], [75.1, 2104.0], [75.2, 2104.0], [75.3, 2104.0], [75.4, 2105.0], [75.5, 2105.0], [75.6, 2105.0], [75.7, 2106.0], [75.8, 2108.0], [75.9, 2108.0], [76.0, 2108.0], [76.1, 2109.0], [76.2, 2110.0], [76.3, 2112.0], [76.4, 2114.0], [76.5, 2116.0], [76.6, 2116.0], [76.7, 2117.0], [76.8, 2118.0], [76.9, 2118.0], [77.0, 2119.0], [77.1, 2122.0], [77.2, 2122.0], [77.3, 2124.0], [77.4, 2127.0], [77.5, 2128.0], [77.6, 2128.0], [77.7, 2131.0], [77.8, 2132.0], [77.9, 2132.0], [78.0, 2132.0], [78.1, 2132.0], [78.2, 2133.0], [78.3, 2135.0], [78.4, 2137.0], [78.5, 2138.0], [78.6, 2138.0], [78.7, 2139.0], [78.8, 2140.0], [78.9, 2141.0], [79.0, 2142.0], [79.1, 2142.0], [79.2, 2142.0], [79.3, 2143.0], [79.4, 2143.0], [79.5, 2144.0], [79.6, 2147.0], [79.7, 2148.0], [79.8, 2148.0], [79.9, 2148.0], [80.0, 2151.0], [80.1, 2152.0], [80.2, 2155.0], [80.3, 2157.0], [80.4, 2158.0], [80.5, 2159.0], [80.6, 2159.0], [80.7, 2167.0], [80.8, 2167.0], [80.9, 2169.0], [81.0, 2171.0], [81.1, 2172.0], [81.2, 2173.0], [81.3, 2173.0], [81.4, 2175.0], [81.5, 2177.0], [81.6, 2178.0], [81.7, 2179.0], [81.8, 2180.0], [81.9, 2180.0], [82.0, 2183.0], [82.1, 2190.0], [82.2, 2192.0], [82.3, 2193.0], [82.4, 2194.0], [82.5, 2195.0], [82.6, 2195.0], [82.7, 2197.0], [82.8, 2197.0], [82.9, 2197.0], [83.0, 2200.0], [83.1, 2201.0], [83.2, 2202.0], [83.3, 2202.0], [83.4, 2203.0], [83.5, 2204.0], [83.6, 2204.0], [83.7, 2205.0], [83.8, 2206.0], [83.9, 2206.0], [84.0, 2208.0], [84.1, 2210.0], [84.2, 2211.0], [84.3, 2212.0], [84.4, 2213.0], [84.5, 2218.0], [84.6, 2218.0], [84.7, 2219.0], [84.8, 2221.0], [84.9, 2223.0], [85.0, 2227.0], [85.1, 2227.0], [85.2, 2228.0], [85.3, 2228.0], [85.4, 2230.0], [85.5, 2237.0], [85.6, 2239.0], [85.7, 2240.0], [85.8, 2246.0], [85.9, 2250.0], [86.0, 2250.0], [86.1, 2254.0], [86.2, 2254.0], [86.3, 2256.0], [86.4, 2262.0], [86.5, 2262.0], [86.6, 2262.0], [86.7, 2263.0], [86.8, 2266.0], [86.9, 2267.0], [87.0, 2270.0], [87.1, 2270.0], [87.2, 2271.0], [87.3, 2271.0], [87.4, 2274.0], [87.5, 2281.0], [87.6, 2282.0], [87.7, 2285.0], [87.8, 2295.0], [87.9, 2297.0], [88.0, 2297.0], [88.1, 2297.0], [88.2, 2298.0], [88.3, 2299.0], [88.4, 2301.0], [88.5, 2304.0], [88.6, 2304.0], [88.7, 2307.0], [88.8, 2311.0], [88.9, 2311.0], [89.0, 2311.0], [89.1, 2318.0], [89.2, 2323.0], [89.3, 2323.0], [89.4, 2325.0], [89.5, 2326.0], [89.6, 2326.0], [89.7, 2332.0], [89.8, 2335.0], [89.9, 2335.0], [90.0, 2335.0], [90.1, 2340.0], [90.2, 2341.0], [90.3, 2351.0], [90.4, 2352.0], [90.5, 2355.0], [90.6, 2358.0], [90.7, 2358.0], [90.8, 2360.0], [90.9, 2361.0], [91.0, 2363.0], [91.1, 2364.0], [91.2, 2365.0], [91.3, 2365.0], [91.4, 2365.0], [91.5, 2366.0], [91.6, 2389.0], [91.7, 2397.0], [91.8, 2399.0], [91.9, 2402.0], [92.0, 2402.0], [92.1, 2409.0], [92.2, 2410.0], [92.3, 2413.0], [92.4, 2415.0], [92.5, 2419.0], [92.6, 2421.0], [92.7, 2421.0], [92.8, 2424.0], [92.9, 2426.0], [93.0, 2427.0], [93.1, 2430.0], [93.2, 2430.0], [93.3, 2430.0], [93.4, 2431.0], [93.5, 2433.0], [93.6, 2434.0], [93.7, 2435.0], [93.8, 2440.0], [93.9, 2441.0], [94.0, 2441.0], [94.1, 2447.0], [94.2, 2453.0], [94.3, 2459.0], [94.4, 2461.0], [94.5, 2468.0], [94.6, 2476.0], [94.7, 2476.0], [94.8, 2483.0], [94.9, 2489.0], [95.0, 2494.0], [95.1, 2496.0], [95.2, 2496.0], [95.3, 2497.0], [95.4, 2497.0], [95.5, 2499.0], [95.6, 2501.0], [95.7, 2514.0], [95.8, 2541.0], [95.9, 2587.0], [96.0, 2587.0], [96.1, 2610.0], [96.2, 2625.0], [96.3, 2632.0], [96.4, 2636.0], [96.5, 2649.0], [96.6, 2652.0], [96.7, 2652.0], [96.8, 2656.0], [96.9, 2656.0], [97.0, 2657.0], [97.1, 2657.0], [97.2, 2684.0], [97.3, 2687.0], [97.4, 2687.0], [97.5, 2774.0], [97.6, 2789.0], [97.7, 2968.0], [97.8, 2976.0], [97.9, 2977.0], [98.0, 2977.0], [98.1, 2999.0], [98.2, 3017.0], [98.3, 3076.0], [98.4, 3079.0], [98.5, 3084.0], [98.6, 3091.0], [98.7, 3091.0], [98.8, 3091.0], [98.9, 3254.0], [99.0, 3256.0], [99.1, 3274.0], [99.2, 3533.0], [99.3, 3557.0], [99.4, 3557.0], [99.5, 3580.0], [99.6, 4334.0], [99.7, 4602.0], [99.8, 4649.0], [99.9, 4963.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 580.0], [0.1, 580.0], [0.2, 593.0], [0.3, 603.0], [0.4, 603.0], [0.5, 606.0], [0.6, 612.0], [0.7, 612.0], [0.8, 612.0], [0.9, 612.0], [1.0, 613.0], [1.1, 614.0], [1.2, 614.0], [1.3, 614.0], [1.4, 614.0], [1.5, 615.0], [1.6, 616.0], [1.7, 618.0], [1.8, 620.0], [1.9, 620.0], [2.0, 625.0], [2.1, 626.0], [2.2, 628.0], [2.3, 630.0], [2.4, 632.0], [2.5, 632.0], [2.6, 636.0], [2.7, 637.0], [2.8, 637.0], [2.9, 640.0], [3.0, 641.0], [3.1, 642.0], [3.2, 642.0], [3.3, 644.0], [3.4, 644.0], [3.5, 645.0], [3.6, 645.0], [3.7, 646.0], [3.8, 646.0], [3.9, 646.0], [4.0, 648.0], [4.1, 648.0], [4.2, 649.0], [4.3, 650.0], [4.4, 650.0], [4.5, 650.0], [4.6, 651.0], [4.7, 652.0], [4.8, 652.0], [4.9, 653.0], [5.0, 653.0], [5.1, 654.0], [5.2, 654.0], [5.3, 654.0], [5.4, 655.0], [5.5, 658.0], [5.6, 658.0], [5.7, 658.0], [5.8, 658.0], [5.9, 659.0], [6.0, 659.0], [6.1, 659.0], [6.2, 659.0], [6.3, 659.0], [6.4, 659.0], [6.5, 660.0], [6.6, 660.0], [6.7, 660.0], [6.8, 660.0], [6.9, 660.0], [7.0, 661.0], [7.1, 661.0], [7.2, 662.0], [7.3, 662.0], [7.4, 663.0], [7.5, 663.0], [7.6, 663.0], [7.7, 663.0], [7.8, 664.0], [7.9, 664.0], [8.0, 664.0], [8.1, 664.0], [8.2, 664.0], [8.3, 664.0], [8.4, 665.0], [8.5, 665.0], [8.6, 665.0], [8.7, 665.0], [8.8, 665.0], [8.9, 666.0], [9.0, 666.0], [9.1, 666.0], [9.2, 668.0], [9.3, 668.0], [9.4, 668.0], [9.5, 669.0], [9.6, 669.0], [9.7, 669.0], [9.8, 670.0], [9.9, 670.0], [10.0, 670.0], [10.1, 670.0], [10.2, 670.0], [10.3, 671.0], [10.4, 671.0], [10.5, 671.0], [10.6, 671.0], [10.7, 672.0], [10.8, 672.0], [10.9, 672.0], [11.0, 672.0], [11.1, 672.0], [11.2, 672.0], [11.3, 673.0], [11.4, 673.0], [11.5, 673.0], [11.6, 674.0], [11.7, 674.0], [11.8, 674.0], [11.9, 674.0], [12.0, 675.0], [12.1, 676.0], [12.2, 676.0], [12.3, 676.0], [12.4, 677.0], [12.5, 677.0], [12.6, 677.0], [12.7, 677.0], [12.8, 678.0], [12.9, 679.0], [13.0, 679.0], [13.1, 679.0], [13.2, 680.0], [13.3, 680.0], [13.4, 680.0], [13.5, 681.0], [13.6, 681.0], [13.7, 681.0], [13.8, 681.0], [13.9, 681.0], [14.0, 681.0], [14.1, 682.0], [14.2, 683.0], [14.3, 683.0], [14.4, 683.0], [14.5, 683.0], [14.6, 684.0], [14.7, 684.0], [14.8, 684.0], [14.9, 684.0], [15.0, 684.0], [15.1, 685.0], [15.2, 685.0], [15.3, 685.0], [15.4, 687.0], [15.5, 687.0], [15.6, 687.0], [15.7, 687.0], [15.8, 688.0], [15.9, 688.0], [16.0, 688.0], [16.1, 688.0], [16.2, 688.0], [16.3, 688.0], [16.4, 689.0], [16.5, 689.0], [16.6, 689.0], [16.7, 689.0], [16.8, 689.0], [16.9, 690.0], [17.0, 690.0], [17.1, 690.0], [17.2, 690.0], [17.3, 691.0], [17.4, 691.0], [17.5, 691.0], [17.6, 692.0], [17.7, 692.0], [17.8, 692.0], [17.9, 692.0], [18.0, 693.0], [18.1, 693.0], [18.2, 693.0], [18.3, 693.0], [18.4, 693.0], [18.5, 693.0], [18.6, 694.0], [18.7, 694.0], [18.8, 695.0], [18.9, 695.0], [19.0, 695.0], [19.1, 695.0], [19.2, 697.0], [19.3, 697.0], [19.4, 697.0], [19.5, 698.0], [19.6, 698.0], [19.7, 698.0], [19.8, 698.0], [19.9, 698.0], [20.0, 699.0], [20.1, 700.0], [20.2, 700.0], [20.3, 700.0], [20.4, 700.0], [20.5, 700.0], [20.6, 700.0], [20.7, 700.0], [20.8, 700.0], [20.9, 701.0], [21.0, 701.0], [21.1, 702.0], [21.2, 702.0], [21.3, 702.0], [21.4, 702.0], [21.5, 702.0], [21.6, 702.0], [21.7, 702.0], [21.8, 702.0], [21.9, 702.0], [22.0, 702.0], [22.1, 703.0], [22.2, 703.0], [22.3, 704.0], [22.4, 704.0], [22.5, 704.0], [22.6, 704.0], [22.7, 705.0], [22.8, 705.0], [22.9, 706.0], [23.0, 706.0], [23.1, 706.0], [23.2, 706.0], [23.3, 706.0], [23.4, 706.0], [23.5, 707.0], [23.6, 707.0], [23.7, 707.0], [23.8, 707.0], [23.9, 707.0], [24.0, 707.0], [24.1, 707.0], [24.2, 708.0], [24.3, 708.0], [24.4, 708.0], [24.5, 708.0], [24.6, 708.0], [24.7, 708.0], [24.8, 709.0], [24.9, 709.0], [25.0, 709.0], [25.1, 709.0], [25.2, 709.0], [25.3, 710.0], [25.4, 710.0], [25.5, 710.0], [25.6, 710.0], [25.7, 711.0], [25.8, 711.0], [25.9, 711.0], [26.0, 711.0], [26.1, 711.0], [26.2, 711.0], [26.3, 711.0], [26.4, 711.0], [26.5, 712.0], [26.6, 712.0], [26.7, 712.0], [26.8, 712.0], [26.9, 712.0], [27.0, 712.0], [27.1, 712.0], [27.2, 712.0], [27.3, 713.0], [27.4, 713.0], [27.5, 713.0], [27.6, 714.0], [27.7, 714.0], [27.8, 714.0], [27.9, 714.0], [28.0, 714.0], [28.1, 715.0], [28.2, 715.0], [28.3, 715.0], [28.4, 715.0], [28.5, 715.0], [28.6, 715.0], [28.7, 715.0], [28.8, 715.0], [28.9, 715.0], [29.0, 716.0], [29.1, 716.0], [29.2, 716.0], [29.3, 716.0], [29.4, 716.0], [29.5, 716.0], [29.6, 716.0], [29.7, 716.0], [29.8, 716.0], [29.9, 716.0], [30.0, 716.0], [30.1, 717.0], [30.2, 718.0], [30.3, 719.0], [30.4, 719.0], [30.5, 719.0], [30.6, 719.0], [30.7, 719.0], [30.8, 720.0], [30.9, 720.0], [31.0, 720.0], [31.1, 720.0], [31.2, 720.0], [31.3, 720.0], [31.4, 720.0], [31.5, 720.0], [31.6, 720.0], [31.7, 720.0], [31.8, 721.0], [31.9, 721.0], [32.0, 721.0], [32.1, 721.0], [32.2, 721.0], [32.3, 721.0], [32.4, 721.0], [32.5, 722.0], [32.6, 722.0], [32.7, 722.0], [32.8, 722.0], [32.9, 722.0], [33.0, 722.0], [33.1, 723.0], [33.2, 723.0], [33.3, 723.0], [33.4, 723.0], [33.5, 723.0], [33.6, 723.0], [33.7, 724.0], [33.8, 724.0], [33.9, 724.0], [34.0, 724.0], [34.1, 725.0], [34.2, 725.0], [34.3, 725.0], [34.4, 725.0], [34.5, 725.0], [34.6, 726.0], [34.7, 726.0], [34.8, 726.0], [34.9, 726.0], [35.0, 726.0], [35.1, 727.0], [35.2, 728.0], [35.3, 728.0], [35.4, 729.0], [35.5, 729.0], [35.6, 729.0], [35.7, 729.0], [35.8, 729.0], [35.9, 729.0], [36.0, 730.0], [36.1, 730.0], [36.2, 730.0], [36.3, 730.0], [36.4, 731.0], [36.5, 731.0], [36.6, 731.0], [36.7, 731.0], [36.8, 732.0], [36.9, 732.0], [37.0, 732.0], [37.1, 732.0], [37.2, 732.0], [37.3, 732.0], [37.4, 732.0], [37.5, 733.0], [37.6, 733.0], [37.7, 733.0], [37.8, 733.0], [37.9, 733.0], [38.0, 734.0], [38.1, 734.0], [38.2, 734.0], [38.3, 734.0], [38.4, 735.0], [38.5, 735.0], [38.6, 735.0], [38.7, 735.0], [38.8, 735.0], [38.9, 735.0], [39.0, 735.0], [39.1, 735.0], [39.2, 735.0], [39.3, 735.0], [39.4, 735.0], [39.5, 736.0], [39.6, 736.0], [39.7, 736.0], [39.8, 736.0], [39.9, 737.0], [40.0, 737.0], [40.1, 737.0], [40.2, 739.0], [40.3, 739.0], [40.4, 739.0], [40.5, 739.0], [40.6, 740.0], [40.7, 740.0], [40.8, 741.0], [40.9, 741.0], [41.0, 741.0], [41.1, 741.0], [41.2, 741.0], [41.3, 741.0], [41.4, 742.0], [41.5, 742.0], [41.6, 742.0], [41.7, 742.0], [41.8, 743.0], [41.9, 743.0], [42.0, 743.0], [42.1, 743.0], [42.2, 744.0], [42.3, 744.0], [42.4, 744.0], [42.5, 744.0], [42.6, 744.0], [42.7, 744.0], [42.8, 745.0], [42.9, 745.0], [43.0, 745.0], [43.1, 745.0], [43.2, 746.0], [43.3, 746.0], [43.4, 747.0], [43.5, 747.0], [43.6, 747.0], [43.7, 747.0], [43.8, 748.0], [43.9, 749.0], [44.0, 749.0], [44.1, 749.0], [44.2, 749.0], [44.3, 750.0], [44.4, 750.0], [44.5, 750.0], [44.6, 751.0], [44.7, 752.0], [44.8, 752.0], [44.9, 752.0], [45.0, 752.0], [45.1, 753.0], [45.2, 753.0], [45.3, 753.0], [45.4, 753.0], [45.5, 753.0], [45.6, 754.0], [45.7, 754.0], [45.8, 754.0], [45.9, 754.0], [46.0, 754.0], [46.1, 754.0], [46.2, 755.0], [46.3, 755.0], [46.4, 755.0], [46.5, 756.0], [46.6, 756.0], [46.7, 756.0], [46.8, 757.0], [46.9, 758.0], [47.0, 758.0], [47.1, 758.0], [47.2, 759.0], [47.3, 759.0], [47.4, 760.0], [47.5, 760.0], [47.6, 760.0], [47.7, 760.0], [47.8, 760.0], [47.9, 760.0], [48.0, 760.0], [48.1, 760.0], [48.2, 760.0], [48.3, 761.0], [48.4, 762.0], [48.5, 762.0], [48.6, 762.0], [48.7, 762.0], [48.8, 762.0], [48.9, 762.0], [49.0, 764.0], [49.1, 764.0], [49.2, 765.0], [49.3, 765.0], [49.4, 766.0], [49.5, 766.0], [49.6, 766.0], [49.7, 766.0], [49.8, 766.0], [49.9, 767.0], [50.0, 768.0], [50.1, 769.0], [50.2, 769.0], [50.3, 771.0], [50.4, 771.0], [50.5, 772.0], [50.6, 772.0], [50.7, 773.0], [50.8, 774.0], [50.9, 774.0], [51.0, 774.0], [51.1, 775.0], [51.2, 775.0], [51.3, 776.0], [51.4, 776.0], [51.5, 776.0], [51.6, 776.0], [51.7, 777.0], [51.8, 777.0], [51.9, 778.0], [52.0, 778.0], [52.1, 780.0], [52.2, 780.0], [52.3, 780.0], [52.4, 780.0], [52.5, 780.0], [52.6, 781.0], [52.7, 781.0], [52.8, 781.0], [52.9, 781.0], [53.0, 781.0], [53.1, 782.0], [53.2, 782.0], [53.3, 782.0], [53.4, 782.0], [53.5, 782.0], [53.6, 783.0], [53.7, 783.0], [53.8, 783.0], [53.9, 783.0], [54.0, 784.0], [54.1, 784.0], [54.2, 784.0], [54.3, 785.0], [54.4, 785.0], [54.5, 785.0], [54.6, 786.0], [54.7, 786.0], [54.8, 786.0], [54.9, 786.0], [55.0, 786.0], [55.1, 787.0], [55.2, 787.0], [55.3, 787.0], [55.4, 787.0], [55.5, 788.0], [55.6, 788.0], [55.7, 789.0], [55.8, 790.0], [55.9, 790.0], [56.0, 790.0], [56.1, 790.0], [56.2, 791.0], [56.3, 791.0], [56.4, 792.0], [56.5, 792.0], [56.6, 792.0], [56.7, 793.0], [56.8, 795.0], [56.9, 795.0], [57.0, 796.0], [57.1, 796.0], [57.2, 796.0], [57.3, 796.0], [57.4, 797.0], [57.5, 798.0], [57.6, 798.0], [57.7, 798.0], [57.8, 798.0], [57.9, 798.0], [58.0, 799.0], [58.1, 799.0], [58.2, 800.0], [58.3, 800.0], [58.4, 800.0], [58.5, 801.0], [58.6, 801.0], [58.7, 802.0], [58.8, 803.0], [58.9, 803.0], [59.0, 804.0], [59.1, 804.0], [59.2, 804.0], [59.3, 805.0], [59.4, 805.0], [59.5, 807.0], [59.6, 808.0], [59.7, 808.0], [59.8, 808.0], [59.9, 809.0], [60.0, 809.0], [60.1, 809.0], [60.2, 810.0], [60.3, 810.0], [60.4, 811.0], [60.5, 811.0], [60.6, 811.0], [60.7, 812.0], [60.8, 812.0], [60.9, 812.0], [61.0, 814.0], [61.1, 814.0], [61.2, 814.0], [61.3, 815.0], [61.4, 816.0], [61.5, 816.0], [61.6, 818.0], [61.7, 818.0], [61.8, 819.0], [61.9, 821.0], [62.0, 821.0], [62.1, 822.0], [62.2, 822.0], [62.3, 822.0], [62.4, 822.0], [62.5, 823.0], [62.6, 824.0], [62.7, 824.0], [62.8, 824.0], [62.9, 825.0], [63.0, 825.0], [63.1, 825.0], [63.2, 826.0], [63.3, 827.0], [63.4, 827.0], [63.5, 828.0], [63.6, 828.0], [63.7, 829.0], [63.8, 829.0], [63.9, 830.0], [64.0, 830.0], [64.1, 830.0], [64.2, 831.0], [64.3, 833.0], [64.4, 833.0], [64.5, 835.0], [64.6, 835.0], [64.7, 835.0], [64.8, 835.0], [64.9, 836.0], [65.0, 836.0], [65.1, 837.0], [65.2, 838.0], [65.3, 838.0], [65.4, 839.0], [65.5, 839.0], [65.6, 839.0], [65.7, 840.0], [65.8, 840.0], [65.9, 840.0], [66.0, 841.0], [66.1, 841.0], [66.2, 843.0], [66.3, 843.0], [66.4, 844.0], [66.5, 844.0], [66.6, 846.0], [66.7, 846.0], [66.8, 846.0], [66.9, 847.0], [67.0, 847.0], [67.1, 847.0], [67.2, 848.0], [67.3, 849.0], [67.4, 850.0], [67.5, 851.0], [67.6, 852.0], [67.7, 852.0], [67.8, 852.0], [67.9, 852.0], [68.0, 852.0], [68.1, 853.0], [68.2, 854.0], [68.3, 856.0], [68.4, 856.0], [68.5, 858.0], [68.6, 858.0], [68.7, 858.0], [68.8, 859.0], [68.9, 860.0], [69.0, 860.0], [69.1, 861.0], [69.2, 861.0], [69.3, 862.0], [69.4, 866.0], [69.5, 866.0], [69.6, 866.0], [69.7, 866.0], [69.8, 868.0], [69.9, 869.0], [70.0, 871.0], [70.1, 871.0], [70.2, 871.0], [70.3, 871.0], [70.4, 871.0], [70.5, 873.0], [70.6, 874.0], [70.7, 874.0], [70.8, 874.0], [70.9, 874.0], [71.0, 876.0], [71.1, 877.0], [71.2, 877.0], [71.3, 878.0], [71.4, 878.0], [71.5, 878.0], [71.6, 879.0], [71.7, 879.0], [71.8, 879.0], [71.9, 879.0], [72.0, 880.0], [72.1, 880.0], [72.2, 881.0], [72.3, 881.0], [72.4, 882.0], [72.5, 882.0], [72.6, 882.0], [72.7, 882.0], [72.8, 883.0], [72.9, 884.0], [73.0, 884.0], [73.1, 884.0], [73.2, 884.0], [73.3, 884.0], [73.4, 885.0], [73.5, 885.0], [73.6, 886.0], [73.7, 887.0], [73.8, 887.0], [73.9, 889.0], [74.0, 889.0], [74.1, 889.0], [74.2, 889.0], [74.3, 889.0], [74.4, 889.0], [74.5, 890.0], [74.6, 890.0], [74.7, 890.0], [74.8, 890.0], [74.9, 891.0], [75.0, 891.0], [75.1, 893.0], [75.2, 893.0], [75.3, 893.0], [75.4, 893.0], [75.5, 894.0], [75.6, 894.0], [75.7, 895.0], [75.8, 895.0], [75.9, 895.0], [76.0, 895.0], [76.1, 895.0], [76.2, 896.0], [76.3, 897.0], [76.4, 897.0], [76.5, 897.0], [76.6, 898.0], [76.7, 898.0], [76.8, 900.0], [76.9, 902.0], [77.0, 902.0], [77.1, 902.0], [77.2, 903.0], [77.3, 904.0], [77.4, 905.0], [77.5, 906.0], [77.6, 906.0], [77.7, 906.0], [77.8, 907.0], [77.9, 907.0], [78.0, 910.0], [78.1, 911.0], [78.2, 913.0], [78.3, 913.0], [78.4, 914.0], [78.5, 914.0], [78.6, 915.0], [78.7, 915.0], [78.8, 918.0], [78.9, 918.0], [79.0, 918.0], [79.1, 920.0], [79.2, 921.0], [79.3, 921.0], [79.4, 921.0], [79.5, 923.0], [79.6, 923.0], [79.7, 923.0], [79.8, 926.0], [79.9, 926.0], [80.0, 929.0], [80.1, 930.0], [80.2, 930.0], [80.3, 931.0], [80.4, 932.0], [80.5, 932.0], [80.6, 933.0], [80.7, 934.0], [80.8, 934.0], [80.9, 936.0], [81.0, 936.0], [81.1, 937.0], [81.2, 938.0], [81.3, 938.0], [81.4, 938.0], [81.5, 939.0], [81.6, 939.0], [81.7, 940.0], [81.8, 940.0], [81.9, 941.0], [82.0, 941.0], [82.1, 942.0], [82.2, 947.0], [82.3, 947.0], [82.4, 948.0], [82.5, 951.0], [82.6, 953.0], [82.7, 953.0], [82.8, 954.0], [82.9, 956.0], [83.0, 956.0], [83.1, 957.0], [83.2, 957.0], [83.3, 957.0], [83.4, 959.0], [83.5, 960.0], [83.6, 962.0], [83.7, 964.0], [83.8, 965.0], [83.9, 965.0], [84.0, 968.0], [84.1, 970.0], [84.2, 971.0], [84.3, 972.0], [84.4, 973.0], [84.5, 973.0], [84.6, 975.0], [84.7, 976.0], [84.8, 976.0], [84.9, 977.0], [85.0, 981.0], [85.1, 981.0], [85.2, 987.0], [85.3, 988.0], [85.4, 992.0], [85.5, 993.0], [85.6, 996.0], [85.7, 997.0], [85.8, 997.0], [85.9, 998.0], [86.0, 999.0], [86.1, 1000.0], [86.2, 1002.0], [86.3, 1002.0], [86.4, 1002.0], [86.5, 1002.0], [86.6, 1003.0], [86.7, 1005.0], [86.8, 1005.0], [86.9, 1005.0], [87.0, 1005.0], [87.1, 1007.0], [87.2, 1007.0], [87.3, 1008.0], [87.4, 1010.0], [87.5, 1010.0], [87.6, 1010.0], [87.7, 1014.0], [87.8, 1016.0], [87.9, 1018.0], [88.0, 1020.0], [88.1, 1022.0], [88.2, 1022.0], [88.3, 1023.0], [88.4, 1027.0], [88.5, 1028.0], [88.6, 1030.0], [88.7, 1032.0], [88.8, 1035.0], [88.9, 1035.0], [89.0, 1036.0], [89.1, 1037.0], [89.2, 1037.0], [89.3, 1041.0], [89.4, 1042.0], [89.5, 1042.0], [89.6, 1043.0], [89.7, 1044.0], [89.8, 1044.0], [89.9, 1045.0], [90.0, 1046.0], [90.1, 1046.0], [90.2, 1049.0], [90.3, 1049.0], [90.4, 1049.0], [90.5, 1050.0], [90.6, 1050.0], [90.7, 1050.0], [90.8, 1052.0], [90.9, 1053.0], [91.0, 1054.0], [91.1, 1054.0], [91.2, 1055.0], [91.3, 1056.0], [91.4, 1056.0], [91.5, 1056.0], [91.6, 1058.0], [91.7, 1058.0], [91.8, 1059.0], [91.9, 1060.0], [92.0, 1060.0], [92.1, 1060.0], [92.2, 1061.0], [92.3, 1061.0], [92.4, 1063.0], [92.5, 1063.0], [92.6, 1063.0], [92.7, 1063.0], [92.8, 1064.0], [92.9, 1064.0], [93.0, 1065.0], [93.1, 1066.0], [93.2, 1066.0], [93.3, 1066.0], [93.4, 1067.0], [93.5, 1067.0], [93.6, 1069.0], [93.7, 1070.0], [93.8, 1070.0], [93.9, 1071.0], [94.0, 1072.0], [94.1, 1075.0], [94.2, 1075.0], [94.3, 1079.0], [94.4, 1086.0], [94.5, 1086.0], [94.6, 1089.0], [94.7, 1091.0], [94.8, 1095.0], [94.9, 1097.0], [95.0, 1101.0], [95.1, 1101.0], [95.2, 1105.0], [95.3, 1106.0], [95.4, 1110.0], [95.5, 1129.0], [95.6, 1132.0], [95.7, 1132.0], [95.8, 1137.0], [95.9, 1139.0], [96.0, 1145.0], [96.1, 1147.0], [96.2, 1151.0], [96.3, 1151.0], [96.4, 1161.0], [96.5, 1161.0], [96.6, 1164.0], [96.7, 1178.0], [96.8, 1191.0], [96.9, 1191.0], [97.0, 1194.0], [97.1, 1198.0], [97.2, 1198.0], [97.3, 1200.0], [97.4, 1200.0], [97.5, 1202.0], [97.6, 1202.0], [97.7, 1205.0], [97.8, 1211.0], [97.9, 1213.0], [98.0, 1221.0], [98.1, 1223.0], [98.2, 1223.0], [98.3, 1224.0], [98.4, 1229.0], [98.5, 1255.0], [98.6, 1271.0], [98.7, 1281.0], [98.8, 1281.0], [98.9, 1283.0], [99.0, 1295.0], [99.1, 1341.0], [99.2, 1416.0], [99.3, 1441.0], [99.4, 1441.0], [99.5, 1444.0], [99.6, 1453.0], [99.7, 1685.0], [99.8, 3463.0], [99.9, 3683.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 854.0], [0.1, 854.0], [0.2, 910.0], [0.3, 913.0], [0.4, 918.0], [0.5, 923.0], [0.6, 923.0], [0.7, 923.0], [0.8, 924.0], [0.9, 924.0], [1.0, 926.0], [1.1, 927.0], [1.2, 930.0], [1.3, 930.0], [1.4, 930.0], [1.5, 934.0], [1.6, 942.0], [1.7, 942.0], [1.8, 943.0], [1.9, 943.0], [2.0, 943.0], [2.1, 943.0], [2.2, 944.0], [2.3, 944.0], [2.4, 945.0], [2.5, 945.0], [2.6, 946.0], [2.7, 949.0], [2.8, 950.0], [2.9, 951.0], [3.0, 953.0], [3.1, 953.0], [3.2, 954.0], [3.3, 954.0], [3.4, 956.0], [3.5, 956.0], [3.6, 958.0], [3.7, 959.0], [3.8, 959.0], [3.9, 964.0], [4.0, 964.0], [4.1, 965.0], [4.2, 965.0], [4.3, 966.0], [4.4, 966.0], [4.5, 966.0], [4.6, 968.0], [4.7, 969.0], [4.8, 970.0], [4.9, 970.0], [5.0, 970.0], [5.1, 970.0], [5.2, 971.0], [5.3, 973.0], [5.4, 973.0], [5.5, 974.0], [5.6, 974.0], [5.7, 975.0], [5.8, 975.0], [5.9, 978.0], [6.0, 979.0], [6.1, 979.0], [6.2, 979.0], [6.3, 979.0], [6.4, 980.0], [6.5, 980.0], [6.6, 980.0], [6.7, 981.0], [6.8, 981.0], [6.9, 981.0], [7.0, 982.0], [7.1, 983.0], [7.2, 984.0], [7.3, 985.0], [7.4, 986.0], [7.5, 986.0], [7.6, 987.0], [7.7, 988.0], [7.8, 988.0], [7.9, 990.0], [8.0, 993.0], [8.1, 993.0], [8.2, 994.0], [8.3, 995.0], [8.4, 995.0], [8.5, 995.0], [8.6, 996.0], [8.7, 996.0], [8.8, 996.0], [8.9, 1000.0], [9.0, 1000.0], [9.1, 1000.0], [9.2, 1001.0], [9.3, 1001.0], [9.4, 1001.0], [9.5, 1002.0], [9.6, 1003.0], [9.7, 1003.0], [9.8, 1003.0], [9.9, 1003.0], [10.0, 1003.0], [10.1, 1003.0], [10.2, 1004.0], [10.3, 1004.0], [10.4, 1007.0], [10.5, 1007.0], [10.6, 1008.0], [10.7, 1009.0], [10.8, 1009.0], [10.9, 1009.0], [11.0, 1010.0], [11.1, 1010.0], [11.2, 1010.0], [11.3, 1010.0], [11.4, 1011.0], [11.5, 1011.0], [11.6, 1012.0], [11.7, 1012.0], [11.8, 1012.0], [11.9, 1012.0], [12.0, 1012.0], [12.1, 1012.0], [12.2, 1014.0], [12.3, 1014.0], [12.4, 1014.0], [12.5, 1014.0], [12.6, 1014.0], [12.7, 1015.0], [12.8, 1015.0], [12.9, 1016.0], [13.0, 1016.0], [13.1, 1016.0], [13.2, 1017.0], [13.3, 1017.0], [13.4, 1019.0], [13.5, 1020.0], [13.6, 1020.0], [13.7, 1020.0], [13.8, 1021.0], [13.9, 1021.0], [14.0, 1022.0], [14.1, 1023.0], [14.2, 1023.0], [14.3, 1024.0], [14.4, 1024.0], [14.5, 1024.0], [14.6, 1025.0], [14.7, 1026.0], [14.8, 1027.0], [14.9, 1027.0], [15.0, 1027.0], [15.1, 1027.0], [15.2, 1028.0], [15.3, 1029.0], [15.4, 1029.0], [15.5, 1029.0], [15.6, 1029.0], [15.7, 1030.0], [15.8, 1031.0], [15.9, 1031.0], [16.0, 1031.0], [16.1, 1031.0], [16.2, 1031.0], [16.3, 1031.0], [16.4, 1031.0], [16.5, 1032.0], [16.6, 1033.0], [16.7, 1033.0], [16.8, 1033.0], [16.9, 1033.0], [17.0, 1033.0], [17.1, 1034.0], [17.2, 1034.0], [17.3, 1034.0], [17.4, 1034.0], [17.5, 1036.0], [17.6, 1038.0], [17.7, 1038.0], [17.8, 1040.0], [17.9, 1041.0], [18.0, 1041.0], [18.1, 1042.0], [18.2, 1042.0], [18.3, 1043.0], [18.4, 1043.0], [18.5, 1043.0], [18.6, 1043.0], [18.7, 1045.0], [18.8, 1046.0], [18.9, 1046.0], [19.0, 1047.0], [19.1, 1047.0], [19.2, 1047.0], [19.3, 1047.0], [19.4, 1047.0], [19.5, 1048.0], [19.6, 1048.0], [19.7, 1049.0], [19.8, 1049.0], [19.9, 1049.0], [20.0, 1049.0], [20.1, 1050.0], [20.2, 1050.0], [20.3, 1051.0], [20.4, 1051.0], [20.5, 1052.0], [20.6, 1052.0], [20.7, 1052.0], [20.8, 1053.0], [20.9, 1053.0], [21.0, 1053.0], [21.1, 1054.0], [21.2, 1054.0], [21.3, 1054.0], [21.4, 1054.0], [21.5, 1054.0], [21.6, 1055.0], [21.7, 1055.0], [21.8, 1055.0], [21.9, 1056.0], [22.0, 1056.0], [22.1, 1056.0], [22.2, 1058.0], [22.3, 1058.0], [22.4, 1058.0], [22.5, 1059.0], [22.6, 1059.0], [22.7, 1060.0], [22.8, 1061.0], [22.9, 1061.0], [23.0, 1061.0], [23.1, 1062.0], [23.2, 1062.0], [23.3, 1062.0], [23.4, 1062.0], [23.5, 1062.0], [23.6, 1063.0], [23.7, 1064.0], [23.8, 1064.0], [23.9, 1065.0], [24.0, 1065.0], [24.1, 1065.0], [24.2, 1066.0], [24.3, 1066.0], [24.4, 1066.0], [24.5, 1066.0], [24.6, 1067.0], [24.7, 1067.0], [24.8, 1067.0], [24.9, 1067.0], [25.0, 1070.0], [25.1, 1070.0], [25.2, 1070.0], [25.3, 1073.0], [25.4, 1073.0], [25.5, 1074.0], [25.6, 1075.0], [25.7, 1075.0], [25.8, 1075.0], [25.9, 1076.0], [26.0, 1076.0], [26.1, 1077.0], [26.2, 1077.0], [26.3, 1077.0], [26.4, 1077.0], [26.5, 1077.0], [26.6, 1077.0], [26.7, 1078.0], [26.8, 1079.0], [26.9, 1080.0], [27.0, 1081.0], [27.1, 1082.0], [27.2, 1082.0], [27.3, 1084.0], [27.4, 1084.0], [27.5, 1084.0], [27.6, 1085.0], [27.7, 1085.0], [27.8, 1085.0], [27.9, 1086.0], [28.0, 1087.0], [28.1, 1087.0], [28.2, 1088.0], [28.3, 1088.0], [28.4, 1088.0], [28.5, 1088.0], [28.6, 1088.0], [28.7, 1089.0], [28.8, 1089.0], [28.9, 1089.0], [29.0, 1089.0], [29.1, 1089.0], [29.2, 1092.0], [29.3, 1092.0], [29.4, 1092.0], [29.5, 1092.0], [29.6, 1093.0], [29.7, 1093.0], [29.8, 1093.0], [29.9, 1093.0], [30.0, 1093.0], [30.1, 1093.0], [30.2, 1094.0], [30.3, 1094.0], [30.4, 1096.0], [30.5, 1096.0], [30.6, 1097.0], [30.7, 1097.0], [30.8, 1099.0], [30.9, 1099.0], [31.0, 1099.0], [31.1, 1100.0], [31.2, 1101.0], [31.3, 1101.0], [31.4, 1101.0], [31.5, 1101.0], [31.6, 1101.0], [31.7, 1102.0], [31.8, 1102.0], [31.9, 1102.0], [32.0, 1102.0], [32.1, 1102.0], [32.2, 1103.0], [32.3, 1103.0], [32.4, 1104.0], [32.5, 1105.0], [32.6, 1106.0], [32.7, 1107.0], [32.8, 1107.0], [32.9, 1108.0], [33.0, 1108.0], [33.1, 1110.0], [33.2, 1110.0], [33.3, 1110.0], [33.4, 1110.0], [33.5, 1110.0], [33.6, 1110.0], [33.7, 1112.0], [33.8, 1112.0], [33.9, 1113.0], [34.0, 1113.0], [34.1, 1115.0], [34.2, 1115.0], [34.3, 1117.0], [34.4, 1117.0], [34.5, 1118.0], [34.6, 1118.0], [34.7, 1119.0], [34.8, 1119.0], [34.9, 1119.0], [35.0, 1120.0], [35.1, 1120.0], [35.2, 1120.0], [35.3, 1121.0], [35.4, 1122.0], [35.5, 1123.0], [35.6, 1123.0], [35.7, 1123.0], [35.8, 1124.0], [35.9, 1124.0], [36.0, 1124.0], [36.1, 1124.0], [36.2, 1125.0], [36.3, 1125.0], [36.4, 1125.0], [36.5, 1125.0], [36.6, 1127.0], [36.7, 1127.0], [36.8, 1127.0], [36.9, 1127.0], [37.0, 1127.0], [37.1, 1127.0], [37.2, 1128.0], [37.3, 1128.0], [37.4, 1128.0], [37.5, 1129.0], [37.6, 1129.0], [37.7, 1129.0], [37.8, 1130.0], [37.9, 1130.0], [38.0, 1130.0], [38.1, 1130.0], [38.2, 1131.0], [38.3, 1131.0], [38.4, 1132.0], [38.5, 1132.0], [38.6, 1133.0], [38.7, 1134.0], [38.8, 1134.0], [38.9, 1134.0], [39.0, 1135.0], [39.1, 1136.0], [39.2, 1137.0], [39.3, 1138.0], [39.4, 1138.0], [39.5, 1139.0], [39.6, 1139.0], [39.7, 1139.0], [39.8, 1140.0], [39.9, 1140.0], [40.0, 1141.0], [40.1, 1141.0], [40.2, 1141.0], [40.3, 1142.0], [40.4, 1142.0], [40.5, 1143.0], [40.6, 1143.0], [40.7, 1145.0], [40.8, 1145.0], [40.9, 1146.0], [41.0, 1146.0], [41.1, 1146.0], [41.2, 1147.0], [41.3, 1148.0], [41.4, 1148.0], [41.5, 1149.0], [41.6, 1150.0], [41.7, 1151.0], [41.8, 1151.0], [41.9, 1154.0], [42.0, 1154.0], [42.1, 1156.0], [42.2, 1156.0], [42.3, 1156.0], [42.4, 1157.0], [42.5, 1158.0], [42.6, 1158.0], [42.7, 1158.0], [42.8, 1158.0], [42.9, 1158.0], [43.0, 1158.0], [43.1, 1158.0], [43.2, 1158.0], [43.3, 1158.0], [43.4, 1159.0], [43.5, 1159.0], [43.6, 1159.0], [43.7, 1160.0], [43.8, 1160.0], [43.9, 1160.0], [44.0, 1160.0], [44.1, 1161.0], [44.2, 1162.0], [44.3, 1162.0], [44.4, 1163.0], [44.5, 1163.0], [44.6, 1163.0], [44.7, 1163.0], [44.8, 1164.0], [44.9, 1166.0], [45.0, 1166.0], [45.1, 1166.0], [45.2, 1166.0], [45.3, 1167.0], [45.4, 1167.0], [45.5, 1167.0], [45.6, 1168.0], [45.7, 1168.0], [45.8, 1168.0], [45.9, 1169.0], [46.0, 1170.0], [46.1, 1171.0], [46.2, 1171.0], [46.3, 1171.0], [46.4, 1173.0], [46.5, 1173.0], [46.6, 1173.0], [46.7, 1174.0], [46.8, 1174.0], [46.9, 1176.0], [47.0, 1176.0], [47.1, 1176.0], [47.2, 1176.0], [47.3, 1177.0], [47.4, 1177.0], [47.5, 1179.0], [47.6, 1179.0], [47.7, 1179.0], [47.8, 1179.0], [47.9, 1180.0], [48.0, 1180.0], [48.1, 1180.0], [48.2, 1180.0], [48.3, 1181.0], [48.4, 1181.0], [48.5, 1181.0], [48.6, 1182.0], [48.7, 1182.0], [48.8, 1182.0], [48.9, 1183.0], [49.0, 1184.0], [49.1, 1184.0], [49.2, 1184.0], [49.3, 1185.0], [49.4, 1185.0], [49.5, 1185.0], [49.6, 1185.0], [49.7, 1186.0], [49.8, 1186.0], [49.9, 1186.0], [50.0, 1186.0], [50.1, 1186.0], [50.2, 1186.0], [50.3, 1187.0], [50.4, 1187.0], [50.5, 1188.0], [50.6, 1188.0], [50.7, 1188.0], [50.8, 1189.0], [50.9, 1190.0], [51.0, 1190.0], [51.1, 1191.0], [51.2, 1192.0], [51.3, 1192.0], [51.4, 1192.0], [51.5, 1192.0], [51.6, 1194.0], [51.7, 1195.0], [51.8, 1195.0], [51.9, 1195.0], [52.0, 1196.0], [52.1, 1197.0], [52.2, 1197.0], [52.3, 1197.0], [52.4, 1200.0], [52.5, 1200.0], [52.6, 1200.0], [52.7, 1200.0], [52.8, 1200.0], [52.9, 1200.0], [53.0, 1201.0], [53.1, 1201.0], [53.2, 1203.0], [53.3, 1203.0], [53.4, 1203.0], [53.5, 1203.0], [53.6, 1203.0], [53.7, 1204.0], [53.8, 1204.0], [53.9, 1204.0], [54.0, 1205.0], [54.1, 1205.0], [54.2, 1205.0], [54.3, 1206.0], [54.4, 1206.0], [54.5, 1207.0], [54.6, 1207.0], [54.7, 1208.0], [54.8, 1208.0], [54.9, 1209.0], [55.0, 1209.0], [55.1, 1209.0], [55.2, 1211.0], [55.3, 1211.0], [55.4, 1211.0], [55.5, 1211.0], [55.6, 1211.0], [55.7, 1212.0], [55.8, 1212.0], [55.9, 1213.0], [56.0, 1215.0], [56.1, 1216.0], [56.2, 1216.0], [56.3, 1217.0], [56.4, 1218.0], [56.5, 1221.0], [56.6, 1221.0], [56.7, 1221.0], [56.8, 1221.0], [56.9, 1223.0], [57.0, 1223.0], [57.1, 1226.0], [57.2, 1227.0], [57.3, 1227.0], [57.4, 1227.0], [57.5, 1227.0], [57.6, 1229.0], [57.7, 1230.0], [57.8, 1231.0], [57.9, 1232.0], [58.0, 1233.0], [58.1, 1233.0], [58.2, 1233.0], [58.3, 1233.0], [58.4, 1233.0], [58.5, 1234.0], [58.6, 1234.0], [58.7, 1234.0], [58.8, 1234.0], [58.9, 1235.0], [59.0, 1235.0], [59.1, 1236.0], [59.2, 1236.0], [59.3, 1236.0], [59.4, 1236.0], [59.5, 1236.0], [59.6, 1237.0], [59.7, 1237.0], [59.8, 1238.0], [59.9, 1238.0], [60.0, 1238.0], [60.1, 1238.0], [60.2, 1239.0], [60.3, 1239.0], [60.4, 1239.0], [60.5, 1239.0], [60.6, 1240.0], [60.7, 1241.0], [60.8, 1241.0], [60.9, 1241.0], [61.0, 1241.0], [61.1, 1241.0], [61.2, 1241.0], [61.3, 1242.0], [61.4, 1242.0], [61.5, 1243.0], [61.6, 1243.0], [61.7, 1244.0], [61.8, 1244.0], [61.9, 1244.0], [62.0, 1245.0], [62.1, 1245.0], [62.2, 1245.0], [62.3, 1245.0], [62.4, 1245.0], [62.5, 1245.0], [62.6, 1246.0], [62.7, 1246.0], [62.8, 1247.0], [62.9, 1247.0], [63.0, 1247.0], [63.1, 1247.0], [63.2, 1249.0], [63.3, 1250.0], [63.4, 1251.0], [63.5, 1252.0], [63.6, 1252.0], [63.7, 1252.0], [63.8, 1253.0], [63.9, 1253.0], [64.0, 1253.0], [64.1, 1255.0], [64.2, 1255.0], [64.3, 1256.0], [64.4, 1256.0], [64.5, 1257.0], [64.6, 1257.0], [64.7, 1257.0], [64.8, 1257.0], [64.9, 1257.0], [65.0, 1258.0], [65.1, 1258.0], [65.2, 1260.0], [65.3, 1261.0], [65.4, 1262.0], [65.5, 1262.0], [65.6, 1262.0], [65.7, 1263.0], [65.8, 1263.0], [65.9, 1263.0], [66.0, 1266.0], [66.1, 1266.0], [66.2, 1266.0], [66.3, 1267.0], [66.4, 1267.0], [66.5, 1267.0], [66.6, 1267.0], [66.7, 1267.0], [66.8, 1268.0], [66.9, 1268.0], [67.0, 1268.0], [67.1, 1269.0], [67.2, 1269.0], [67.3, 1269.0], [67.4, 1270.0], [67.5, 1271.0], [67.6, 1271.0], [67.7, 1271.0], [67.8, 1271.0], [67.9, 1272.0], [68.0, 1272.0], [68.1, 1274.0], [68.2, 1274.0], [68.3, 1277.0], [68.4, 1278.0], [68.5, 1282.0], [68.6, 1282.0], [68.7, 1283.0], [68.8, 1284.0], [68.9, 1284.0], [69.0, 1284.0], [69.1, 1285.0], [69.2, 1285.0], [69.3, 1285.0], [69.4, 1285.0], [69.5, 1286.0], [69.6, 1286.0], [69.7, 1287.0], [69.8, 1287.0], [69.9, 1287.0], [70.0, 1288.0], [70.1, 1290.0], [70.2, 1290.0], [70.3, 1290.0], [70.4, 1290.0], [70.5, 1291.0], [70.6, 1291.0], [70.7, 1292.0], [70.8, 1293.0], [70.9, 1294.0], [71.0, 1294.0], [71.1, 1296.0], [71.2, 1296.0], [71.3, 1298.0], [71.4, 1299.0], [71.5, 1299.0], [71.6, 1299.0], [71.7, 1299.0], [71.8, 1299.0], [71.9, 1301.0], [72.0, 1301.0], [72.1, 1303.0], [72.2, 1309.0], [72.3, 1309.0], [72.4, 1309.0], [72.5, 1310.0], [72.6, 1310.0], [72.7, 1310.0], [72.8, 1311.0], [72.9, 1311.0], [73.0, 1313.0], [73.1, 1313.0], [73.2, 1314.0], [73.3, 1314.0], [73.4, 1319.0], [73.5, 1319.0], [73.6, 1319.0], [73.7, 1319.0], [73.8, 1319.0], [73.9, 1320.0], [74.0, 1322.0], [74.1, 1322.0], [74.2, 1322.0], [74.3, 1323.0], [74.4, 1323.0], [74.5, 1324.0], [74.6, 1326.0], [74.7, 1326.0], [74.8, 1327.0], [74.9, 1328.0], [75.0, 1329.0], [75.1, 1330.0], [75.2, 1330.0], [75.3, 1334.0], [75.4, 1334.0], [75.5, 1335.0], [75.6, 1336.0], [75.7, 1337.0], [75.8, 1337.0], [75.9, 1338.0], [76.0, 1338.0], [76.1, 1339.0], [76.2, 1339.0], [76.3, 1341.0], [76.4, 1341.0], [76.5, 1343.0], [76.6, 1343.0], [76.7, 1344.0], [76.8, 1344.0], [76.9, 1344.0], [77.0, 1350.0], [77.1, 1351.0], [77.2, 1351.0], [77.3, 1351.0], [77.4, 1352.0], [77.5, 1353.0], [77.6, 1355.0], [77.7, 1355.0], [77.8, 1355.0], [77.9, 1356.0], [78.0, 1357.0], [78.1, 1361.0], [78.2, 1364.0], [78.3, 1367.0], [78.4, 1367.0], [78.5, 1367.0], [78.6, 1368.0], [78.7, 1369.0], [78.8, 1370.0], [78.9, 1372.0], [79.0, 1373.0], [79.1, 1373.0], [79.2, 1373.0], [79.3, 1377.0], [79.4, 1378.0], [79.5, 1379.0], [79.6, 1380.0], [79.7, 1380.0], [79.8, 1381.0], [79.9, 1381.0], [80.0, 1383.0], [80.1, 1390.0], [80.2, 1391.0], [80.3, 1391.0], [80.4, 1391.0], [80.5, 1392.0], [80.6, 1392.0], [80.7, 1392.0], [80.8, 1393.0], [80.9, 1393.0], [81.0, 1394.0], [81.1, 1395.0], [81.2, 1395.0], [81.3, 1397.0], [81.4, 1398.0], [81.5, 1398.0], [81.6, 1398.0], [81.7, 1399.0], [81.8, 1399.0], [81.9, 1399.0], [82.0, 1402.0], [82.1, 1402.0], [82.2, 1402.0], [82.3, 1403.0], [82.4, 1405.0], [82.5, 1405.0], [82.6, 1406.0], [82.7, 1406.0], [82.8, 1406.0], [82.9, 1408.0], [83.0, 1409.0], [83.1, 1411.0], [83.2, 1412.0], [83.3, 1413.0], [83.4, 1413.0], [83.5, 1413.0], [83.6, 1417.0], [83.7, 1421.0], [83.8, 1421.0], [83.9, 1422.0], [84.0, 1422.0], [84.1, 1425.0], [84.2, 1426.0], [84.3, 1428.0], [84.4, 1429.0], [84.5, 1429.0], [84.6, 1429.0], [84.7, 1430.0], [84.8, 1430.0], [84.9, 1432.0], [85.0, 1434.0], [85.1, 1434.0], [85.2, 1434.0], [85.3, 1435.0], [85.4, 1437.0], [85.5, 1439.0], [85.6, 1439.0], [85.7, 1440.0], [85.8, 1441.0], [85.9, 1441.0], [86.0, 1441.0], [86.1, 1443.0], [86.2, 1444.0], [86.3, 1446.0], [86.4, 1447.0], [86.5, 1447.0], [86.6, 1448.0], [86.7, 1450.0], [86.8, 1450.0], [86.9, 1450.0], [87.0, 1452.0], [87.1, 1452.0], [87.2, 1452.0], [87.3, 1454.0], [87.4, 1454.0], [87.5, 1455.0], [87.6, 1455.0], [87.7, 1455.0], [87.8, 1455.0], [87.9, 1455.0], [88.0, 1456.0], [88.1, 1456.0], [88.2, 1457.0], [88.3, 1457.0], [88.4, 1459.0], [88.5, 1460.0], [88.6, 1461.0], [88.7, 1461.0], [88.8, 1472.0], [88.9, 1472.0], [89.0, 1472.0], [89.1, 1474.0], [89.2, 1484.0], [89.3, 1490.0], [89.4, 1493.0], [89.5, 1494.0], [89.6, 1494.0], [89.7, 1498.0], [89.8, 1507.0], [89.9, 1510.0], [90.0, 1512.0], [90.1, 1519.0], [90.2, 1519.0], [90.3, 1521.0], [90.4, 1522.0], [90.5, 1524.0], [90.6, 1525.0], [90.7, 1531.0], [90.8, 1531.0], [90.9, 1537.0], [91.0, 1540.0], [91.1, 1543.0], [91.2, 1545.0], [91.3, 1546.0], [91.4, 1546.0], [91.5, 1547.0], [91.6, 1548.0], [91.7, 1555.0], [91.8, 1556.0], [91.9, 1557.0], [92.0, 1557.0], [92.1, 1559.0], [92.2, 1560.0], [92.3, 1561.0], [92.4, 1564.0], [92.5, 1570.0], [92.6, 1570.0], [92.7, 1572.0], [92.8, 1577.0], [92.9, 1583.0], [93.0, 1583.0], [93.1, 1591.0], [93.2, 1598.0], [93.3, 1598.0], [93.4, 1599.0], [93.5, 1599.0], [93.6, 1604.0], [93.7, 1606.0], [93.8, 1606.0], [93.9, 1606.0], [94.0, 1641.0], [94.1, 1647.0], [94.2, 1647.0], [94.3, 1649.0], [94.4, 1649.0], [94.5, 1649.0], [94.6, 1653.0], [94.7, 1653.0], [94.8, 1659.0], [94.9, 1661.0], [95.0, 1663.0], [95.1, 1663.0], [95.2, 1668.0], [95.3, 1668.0], [95.4, 1676.0], [95.5, 1682.0], [95.6, 1690.0], [95.7, 1690.0], [95.8, 1729.0], [95.9, 1748.0], [96.0, 1773.0], [96.1, 1869.0], [96.2, 1871.0], [96.3, 1871.0], [96.4, 1872.0], [96.5, 1874.0], [96.6, 1886.0], [96.7, 1895.0], [96.8, 1934.0], [96.9, 1938.0], [97.0, 1938.0], [97.1, 1940.0], [97.2, 1988.0], [97.3, 2062.0], [97.4, 2075.0], [97.5, 2088.0], [97.6, 2088.0], [97.7, 2090.0], [97.8, 2096.0], [97.9, 2098.0], [98.0, 2107.0], [98.1, 2191.0], [98.2, 2191.0], [98.3, 2360.0], [98.4, 2360.0], [98.5, 2367.0], [98.6, 2376.0], [98.7, 2377.0], [98.8, 2377.0], [98.9, 2377.0], [99.0, 2395.0], [99.1, 2420.0], [99.2, 2611.0], [99.3, 2898.0], [99.4, 2898.0], [99.5, 2921.0], [99.6, 3032.0], [99.7, 3112.0], [99.8, 3878.0], [99.9, 4626.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 320.0, "series": [{"data": [[2100.0, 69.0], [2300.0, 30.0], [2200.0, 46.0], [2400.0, 31.0], [2500.0, 4.0], [2600.0, 12.0], [2700.0, 2.0], [2900.0, 4.0], [3000.0, 6.0], [3200.0, 3.0], [3500.0, 3.0], [4300.0, 1.0], [4600.0, 2.0], [4900.0, 1.0], [1500.0, 6.0], [1600.0, 93.0], [1700.0, 154.0], [1800.0, 142.0], [1900.0, 117.0], [2000.0, 125.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[600.0, 166.0], [700.0, 320.0], [800.0, 156.0], [3400.0, 1.0], [900.0, 78.0], [3600.0, 1.0], [1000.0, 75.0], [1100.0, 19.0], [1200.0, 15.0], [1300.0, 1.0], [1400.0, 4.0], [1600.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[2100.0, 2.0], [2300.0, 7.0], [2400.0, 1.0], [2600.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [800.0, 1.0], [900.0, 73.0], [3800.0, 1.0], [1000.0, 186.0], [1100.0, 179.0], [4600.0, 1.0], [1200.0, 163.0], [1300.0, 85.0], [1400.0, 65.0], [1500.0, 32.0], [1600.0, 18.0], [1700.0, 3.0], [1800.0, 6.0], [1900.0, 4.0], [2000.0, 6.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 940.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1588.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1588.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 940.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 5.2, "minX": 1.70618748E12, "maxY": 25.0, "series": [{"data": [[1.70618754E12, 23.329424307036245], [1.7061876E12, 25.0], [1.70618766E12, 21.01651376146788], [1.70618748E12, 5.2]], "isOverall": false, "label": "25 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618766E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 658.75, "minX": 1.0, "maxY": 2028.4656934306574, "series": [{"data": [[8.0, 1836.3333333333333], [2.0, 1623.0], [9.0, 1658.2], [10.0, 1770.888888888889], [11.0, 1762.0], [3.0, 2022.5], [12.0, 1672.25], [13.0, 1763.1], [14.0, 1931.0000000000002], [15.0, 1689.5], [4.0, 1836.5], [16.0, 1919.111111111111], [17.0, 1898.0], [18.0, 1814.625], [19.0, 1821.2], [5.0, 1739.6666666666667], [20.0, 1822.4444444444443], [21.0, 1911.1500000000003], [22.0, 1769.5833333333335], [23.0, 1822.8], [6.0, 1692.75], [24.0, 1913.7368421052631], [25.0, 2028.4656934306574], [7.0, 1987.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[23.31962397179786, 1990.784958871914]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[8.0, 885.0], [2.0, 691.0], [9.0, 800.7], [10.0, 681.5], [11.0, 675.0], [12.0, 697.8333333333333], [13.0, 708.5], [14.0, 658.75], [15.0, 720.375], [4.0, 817.75], [16.0, 789.6363636363636], [17.0, 810.5714285714286], [18.0, 696.5555555555554], [19.0, 797.2], [5.0, 711.6666666666666], [20.0, 796.2499999999999], [21.0, 708.6153846153845], [22.0, 725.4166666666667], [23.0, 795.8], [6.0, 714.0], [24.0, 774.1538461538461], [25.0, 838.8556701030931], [7.0, 706.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[23.458879618593574, 822.2634088200231]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 1009.5], [9.0, 1065.4], [10.0, 1018.0], [11.0, 996.5], [12.0, 1025.8], [3.0, 943.0], [13.0, 1173.4], [14.0, 1118.6666666666667], [15.0, 1034.2499999999998], [16.0, 1081.0], [4.0, 970.3333333333334], [1.0, 930.0], [17.0, 1086.8], [18.0, 1056.0714285714284], [19.0, 1120.8], [5.0, 1003.0], [20.0, 1101.2307692307693], [21.0, 1031.0], [22.0, 1083.4444444444446], [23.0, 1075.0], [6.0, 1062.3333333333333], [24.0, 1153.8125], [25.0, 1287.378654970759], [7.0, 982.25]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[23.434367541766115, 1248.3926014319793]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 25.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 390.1166666666667, "minX": 1.70618748E12, "maxY": 54998.1, "series": [{"data": [[1.70618754E12, 24702.7], [1.7061876E12, 26913.15], [1.70618766E12, 14149.433333333332], [1.70618748E12, 390.1166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70618754E12, 50068.1], [1.7061876E12, 54998.1], [1.70618766E12, 29089.35], [1.70618748E12, 797.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618766E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 770.9152542372887, "minX": 1.70618748E12, "maxY": 2086.5, "series": [{"data": [[1.70618754E12, 1998.2902208201892], [1.7061876E12, 2009.0845481049564], [1.70618766E12, 1940.891891891891], [1.70618748E12, 2086.5]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618754E12, 838.0410094637226], [1.7061876E12, 834.4970588235293], [1.70618766E12, 770.9152542372887], [1.70618748E12, 807.8]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618754E12, 1241.549342105262], [1.7061876E12, 1282.6080691642649], [1.70618766E12, 1199.1311475409834], [1.70618748E12, 1054.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618766E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 770.8700564971754, "minX": 1.70618748E12, "maxY": 2086.5, "series": [{"data": [[1.70618754E12, 1998.2460567823346], [1.7061876E12, 2009.04664723032], [1.70618766E12, 1940.864864864864], [1.70618748E12, 2086.5]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618754E12, 837.9684542586753], [1.7061876E12, 834.4764705882355], [1.70618766E12, 770.8700564971754], [1.70618748E12, 807.8]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618754E12, 1241.4703947368416], [1.7061876E12, 1282.5706051873192], [1.70618766E12, 1199.103825136611], [1.70618748E12, 1054.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618766E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70618748E12, "maxY": 826.5, "series": [{"data": [[1.70618754E12, 782.6088328075706], [1.7061876E12, 780.8833819241984], [1.70618766E12, 756.1891891891893], [1.70618748E12, 826.5]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618754E12, 0.0], [1.7061876E12, 0.0], [1.70618766E12, 0.0], [1.70618748E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618754E12, 0.0], [1.7061876E12, 0.0], [1.70618766E12, 0.0], [1.70618748E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618766E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 580.0, "minX": 1.70618748E12, "maxY": 4963.0, "series": [{"data": [[1.70618754E12, 4334.0], [1.7061876E12, 4963.0], [1.70618766E12, 3274.0], [1.70618748E12, 2968.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70618754E12, 2137.2], [1.7061876E12, 2056.8], [1.70618766E12, 2093.0], [1.70618748E12, 2382.4000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70618754E12, 2656.61], [1.7061876E12, 3088.8299999999995], [1.70618766E12, 2719.7199999999957], [1.70618748E12, 2968.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70618754E12, 2285.5999999999995], [1.7061876E12, 2239.45], [1.70618766E12, 2332.2999999999993], [1.70618748E12, 2968.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70618754E12, 580.0], [1.7061876E12, 613.0], [1.70618766E12, 603.0], [1.70618748E12, 714.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70618754E12, 1205.0], [1.7061876E12, 1239.5], [1.70618766E12, 1139.0], [1.70618748E12, 1106.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618766E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 930.0, "minX": 1.0, "maxY": 1622.5, "series": [{"data": [[2.0, 1447.0], [3.0, 1622.5], [4.0, 975.0], [5.0, 1203.0], [6.0, 1258.5], [7.0, 1026.0], [8.0, 1131.0], [9.0, 1247.0], [10.0, 1514.5], [11.0, 1221.0], [12.0, 1115.0], [13.0, 1120.5], [14.0, 1235.5], [15.0, 1107.0], [16.0, 1446.5], [1.0, 930.0], [17.0, 1203.0], [18.0, 1092.0], [19.0, 1212.0], [20.0, 1195.5], [21.0, 1341.0], [22.0, 1177.5], [23.0, 1390.0], [24.0, 1036.0], [25.0, 1369.0], [26.0, 1215.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 930.0, "minX": 1.0, "maxY": 1622.5, "series": [{"data": [[2.0, 1447.0], [3.0, 1622.5], [4.0, 975.0], [5.0, 1203.0], [6.0, 1258.5], [7.0, 1026.0], [8.0, 1131.0], [9.0, 1247.0], [10.0, 1514.5], [11.0, 1221.0], [12.0, 1115.0], [13.0, 1120.5], [14.0, 1235.5], [15.0, 1107.0], [16.0, 1446.5], [1.0, 930.0], [17.0, 1203.0], [18.0, 1092.0], [19.0, 1212.0], [20.0, 1195.5], [21.0, 1341.0], [22.0, 1177.5], [23.0, 1390.0], [24.0, 1036.0], [25.0, 1369.0], [26.0, 1215.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 26.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.70618748E12, "maxY": 17.166666666666668, "series": [{"data": [[1.70618754E12, 15.933333333333334], [1.7061876E12, 17.166666666666668], [1.70618766E12, 8.666666666666666], [1.70618748E12, 0.36666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618766E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.70618748E12, "maxY": 17.166666666666668, "series": [{"data": [[1.70618754E12, 15.633333333333333], [1.7061876E12, 17.166666666666668], [1.70618766E12, 9.083333333333334], [1.70618748E12, 0.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618766E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.70618748E12, "maxY": 5.783333333333333, "series": [{"data": [[1.70618754E12, 5.066666666666666], [1.7061876E12, 5.783333333333333], [1.70618766E12, 3.05], [1.70618748E12, 0.06666666666666667]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618754E12, 5.283333333333333], [1.7061876E12, 5.716666666666667], [1.70618766E12, 3.0833333333333335], [1.70618748E12, 0.1]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618754E12, 5.283333333333333], [1.7061876E12, 5.666666666666667], [1.70618766E12, 2.95], [1.70618748E12, 0.08333333333333333]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618766E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.70618748E12, "maxY": 17.166666666666668, "series": [{"data": [[1.70618754E12, 15.633333333333333], [1.7061876E12, 17.166666666666668], [1.70618766E12, 9.083333333333334], [1.70618748E12, 0.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618766E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

