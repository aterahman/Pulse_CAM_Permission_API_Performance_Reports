/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 577.0, "minX": 0.0, "maxY": 8263.0, "series": [{"data": [[0.0, 1517.0], [0.1, 1517.0], [0.2, 1517.0], [0.3, 1517.0], [0.4, 1517.0], [0.5, 1518.0], [0.6, 1518.0], [0.7, 1518.0], [0.8, 1518.0], [0.9, 1518.0], [1.0, 1519.0], [1.1, 1519.0], [1.2, 1519.0], [1.3, 1519.0], [1.4, 1529.0], [1.5, 1529.0], [1.6, 1529.0], [1.7, 1529.0], [1.8, 1529.0], [1.9, 1535.0], [2.0, 1535.0], [2.1, 1535.0], [2.2, 1535.0], [2.3, 1543.0], [2.4, 1543.0], [2.5, 1543.0], [2.6, 1543.0], [2.7, 1543.0], [2.8, 1550.0], [2.9, 1550.0], [3.0, 1550.0], [3.1, 1550.0], [3.2, 1555.0], [3.3, 1555.0], [3.4, 1555.0], [3.5, 1555.0], [3.6, 1555.0], [3.7, 1560.0], [3.8, 1560.0], [3.9, 1560.0], [4.0, 1560.0], [4.1, 1560.0], [4.2, 1561.0], [4.3, 1561.0], [4.4, 1561.0], [4.5, 1561.0], [4.6, 1566.0], [4.7, 1566.0], [4.8, 1566.0], [4.9, 1566.0], [5.0, 1566.0], [5.1, 1569.0], [5.2, 1569.0], [5.3, 1569.0], [5.4, 1569.0], [5.5, 1569.0], [5.6, 1569.0], [5.7, 1569.0], [5.8, 1569.0], [5.9, 1569.0], [6.0, 1569.0], [6.1, 1569.0], [6.2, 1569.0], [6.3, 1569.0], [6.4, 1570.0], [6.5, 1570.0], [6.6, 1570.0], [6.7, 1570.0], [6.8, 1570.0], [6.9, 1571.0], [7.0, 1571.0], [7.1, 1571.0], [7.2, 1571.0], [7.3, 1571.0], [7.4, 1572.0], [7.5, 1572.0], [7.6, 1572.0], [7.7, 1572.0], [7.8, 1572.0], [7.9, 1572.0], [8.0, 1572.0], [8.1, 1572.0], [8.2, 1572.0], [8.3, 1572.0], [8.4, 1572.0], [8.5, 1572.0], [8.6, 1572.0], [8.7, 1572.0], [8.8, 1572.0], [8.9, 1572.0], [9.0, 1572.0], [9.1, 1572.0], [9.2, 1573.0], [9.3, 1573.0], [9.4, 1573.0], [9.5, 1573.0], [9.6, 1575.0], [9.7, 1575.0], [9.8, 1575.0], [9.9, 1575.0], [10.0, 1575.0], [10.1, 1576.0], [10.2, 1576.0], [10.3, 1576.0], [10.4, 1576.0], [10.5, 1576.0], [10.6, 1576.0], [10.7, 1576.0], [10.8, 1576.0], [10.9, 1576.0], [11.0, 1577.0], [11.1, 1577.0], [11.2, 1577.0], [11.3, 1577.0], [11.4, 1577.0], [11.5, 1578.0], [11.6, 1578.0], [11.7, 1578.0], [11.8, 1578.0], [11.9, 1579.0], [12.0, 1579.0], [12.1, 1579.0], [12.2, 1579.0], [12.3, 1579.0], [12.4, 1579.0], [12.5, 1579.0], [12.6, 1579.0], [12.7, 1579.0], [12.8, 1580.0], [12.9, 1580.0], [13.0, 1580.0], [13.1, 1580.0], [13.2, 1580.0], [13.3, 1580.0], [13.4, 1580.0], [13.5, 1580.0], [13.6, 1580.0], [13.7, 1581.0], [13.8, 1581.0], [13.9, 1581.0], [14.0, 1581.0], [14.1, 1581.0], [14.2, 1581.0], [14.3, 1581.0], [14.4, 1581.0], [14.5, 1581.0], [14.6, 1581.0], [14.7, 1581.0], [14.8, 1581.0], [14.9, 1581.0], [15.0, 1581.0], [15.1, 1582.0], [15.2, 1582.0], [15.3, 1582.0], [15.4, 1582.0], [15.5, 1582.0], [15.6, 1586.0], [15.7, 1586.0], [15.8, 1586.0], [15.9, 1586.0], [16.0, 1587.0], [16.1, 1587.0], [16.2, 1587.0], [16.3, 1587.0], [16.4, 1587.0], [16.5, 1588.0], [16.6, 1588.0], [16.7, 1588.0], [16.8, 1588.0], [16.9, 1590.0], [17.0, 1590.0], [17.1, 1590.0], [17.2, 1590.0], [17.3, 1590.0], [17.4, 1590.0], [17.5, 1590.0], [17.6, 1590.0], [17.7, 1590.0], [17.8, 1590.0], [17.9, 1591.0], [18.0, 1591.0], [18.1, 1591.0], [18.2, 1591.0], [18.3, 1592.0], [18.4, 1592.0], [18.5, 1592.0], [18.6, 1592.0], [18.7, 1592.0], [18.8, 1594.0], [18.9, 1594.0], [19.0, 1594.0], [19.1, 1594.0], [19.2, 1595.0], [19.3, 1595.0], [19.4, 1595.0], [19.5, 1595.0], [19.6, 1595.0], [19.7, 1596.0], [19.8, 1596.0], [19.9, 1596.0], [20.0, 1596.0], [20.1, 1596.0], [20.2, 1596.0], [20.3, 1596.0], [20.4, 1596.0], [20.5, 1596.0], [20.6, 1597.0], [20.7, 1597.0], [20.8, 1597.0], [20.9, 1597.0], [21.0, 1597.0], [21.1, 1598.0], [21.2, 1598.0], [21.3, 1598.0], [21.4, 1598.0], [21.5, 1599.0], [21.6, 1599.0], [21.7, 1599.0], [21.8, 1599.0], [21.9, 1599.0], [22.0, 1601.0], [22.1, 1601.0], [22.2, 1601.0], [22.3, 1601.0], [22.4, 1601.0], [22.5, 1601.0], [22.6, 1601.0], [22.7, 1601.0], [22.8, 1601.0], [22.9, 1602.0], [23.0, 1602.0], [23.1, 1602.0], [23.2, 1602.0], [23.3, 1602.0], [23.4, 1602.0], [23.5, 1602.0], [23.6, 1602.0], [23.7, 1602.0], [23.8, 1603.0], [23.9, 1603.0], [24.0, 1603.0], [24.1, 1603.0], [24.2, 1603.0], [24.3, 1604.0], [24.4, 1604.0], [24.5, 1604.0], [24.6, 1604.0], [24.7, 1605.0], [24.8, 1605.0], [24.9, 1605.0], [25.0, 1605.0], [25.1, 1605.0], [25.2, 1607.0], [25.3, 1607.0], [25.4, 1607.0], [25.5, 1607.0], [25.6, 1612.0], [25.7, 1612.0], [25.8, 1612.0], [25.9, 1612.0], [26.0, 1612.0], [26.1, 1614.0], [26.2, 1614.0], [26.3, 1614.0], [26.4, 1614.0], [26.5, 1614.0], [26.6, 1614.0], [26.7, 1614.0], [26.8, 1614.0], [26.9, 1614.0], [27.0, 1615.0], [27.1, 1615.0], [27.2, 1615.0], [27.3, 1615.0], [27.4, 1620.0], [27.5, 1620.0], [27.6, 1620.0], [27.7, 1620.0], [27.8, 1620.0], [27.9, 1623.0], [28.0, 1623.0], [28.1, 1623.0], [28.2, 1623.0], [28.3, 1623.0], [28.4, 1623.0], [28.5, 1623.0], [28.6, 1623.0], [28.7, 1623.0], [28.8, 1623.0], [28.9, 1623.0], [29.0, 1623.0], [29.1, 1623.0], [29.2, 1623.0], [29.3, 1627.0], [29.4, 1627.0], [29.5, 1627.0], [29.6, 1627.0], [29.7, 1628.0], [29.8, 1628.0], [29.9, 1628.0], [30.0, 1628.0], [30.1, 1628.0], [30.2, 1628.0], [30.3, 1628.0], [30.4, 1628.0], [30.5, 1628.0], [30.6, 1629.0], [30.7, 1629.0], [30.8, 1629.0], [30.9, 1629.0], [31.0, 1629.0], [31.1, 1629.0], [31.2, 1629.0], [31.3, 1629.0], [31.4, 1629.0], [31.5, 1629.0], [31.6, 1629.0], [31.7, 1629.0], [31.8, 1629.0], [31.9, 1629.0], [32.0, 1635.0], [32.1, 1635.0], [32.2, 1635.0], [32.3, 1635.0], [32.4, 1635.0], [32.5, 1636.0], [32.6, 1636.0], [32.7, 1636.0], [32.8, 1636.0], [32.9, 1637.0], [33.0, 1637.0], [33.1, 1637.0], [33.2, 1637.0], [33.3, 1637.0], [33.4, 1637.0], [33.5, 1637.0], [33.6, 1637.0], [33.7, 1637.0], [33.8, 1640.0], [33.9, 1640.0], [34.0, 1640.0], [34.1, 1640.0], [34.2, 1640.0], [34.3, 1641.0], [34.4, 1641.0], [34.5, 1641.0], [34.6, 1641.0], [34.7, 1641.0], [34.8, 1641.0], [34.9, 1641.0], [35.0, 1641.0], [35.1, 1641.0], [35.2, 1642.0], [35.3, 1642.0], [35.4, 1642.0], [35.5, 1642.0], [35.6, 1642.0], [35.7, 1642.0], [35.8, 1642.0], [35.9, 1642.0], [36.0, 1642.0], [36.1, 1643.0], [36.2, 1643.0], [36.3, 1643.0], [36.4, 1643.0], [36.5, 1643.0], [36.6, 1644.0], [36.7, 1644.0], [36.8, 1644.0], [36.9, 1644.0], [37.0, 1646.0], [37.1, 1646.0], [37.2, 1646.0], [37.3, 1646.0], [37.4, 1646.0], [37.5, 1647.0], [37.6, 1647.0], [37.7, 1647.0], [37.8, 1647.0], [37.9, 1649.0], [38.0, 1649.0], [38.1, 1649.0], [38.2, 1649.0], [38.3, 1649.0], [38.4, 1650.0], [38.5, 1650.0], [38.6, 1650.0], [38.7, 1650.0], [38.8, 1650.0], [38.9, 1651.0], [39.0, 1651.0], [39.1, 1651.0], [39.2, 1651.0], [39.3, 1651.0], [39.4, 1651.0], [39.5, 1651.0], [39.6, 1651.0], [39.7, 1651.0], [39.8, 1652.0], [39.9, 1652.0], [40.0, 1652.0], [40.1, 1652.0], [40.2, 1653.0], [40.3, 1653.0], [40.4, 1653.0], [40.5, 1653.0], [40.6, 1653.0], [40.7, 1654.0], [40.8, 1654.0], [40.9, 1654.0], [41.0, 1654.0], [41.1, 1654.0], [41.2, 1654.0], [41.3, 1654.0], [41.4, 1654.0], [41.5, 1654.0], [41.6, 1654.0], [41.7, 1654.0], [41.8, 1654.0], [41.9, 1654.0], [42.0, 1654.0], [42.1, 1655.0], [42.2, 1655.0], [42.3, 1655.0], [42.4, 1655.0], [42.5, 1656.0], [42.6, 1656.0], [42.7, 1656.0], [42.8, 1656.0], [42.9, 1656.0], [43.0, 1656.0], [43.1, 1656.0], [43.2, 1656.0], [43.3, 1656.0], [43.4, 1656.0], [43.5, 1656.0], [43.6, 1656.0], [43.7, 1656.0], [43.8, 1656.0], [43.9, 1659.0], [44.0, 1659.0], [44.1, 1659.0], [44.2, 1659.0], [44.3, 1661.0], [44.4, 1661.0], [44.5, 1661.0], [44.6, 1661.0], [44.7, 1661.0], [44.8, 1661.0], [44.9, 1661.0], [45.0, 1661.0], [45.1, 1661.0], [45.2, 1661.0], [45.3, 1662.0], [45.4, 1662.0], [45.5, 1662.0], [45.6, 1662.0], [45.7, 1664.0], [45.8, 1664.0], [45.9, 1664.0], [46.0, 1664.0], [46.1, 1664.0], [46.2, 1666.0], [46.3, 1666.0], [46.4, 1666.0], [46.5, 1666.0], [46.6, 1667.0], [46.7, 1667.0], [46.8, 1667.0], [46.9, 1667.0], [47.0, 1667.0], [47.1, 1668.0], [47.2, 1668.0], [47.3, 1668.0], [47.4, 1668.0], [47.5, 1674.0], [47.6, 1674.0], [47.7, 1674.0], [47.8, 1674.0], [47.9, 1674.0], [48.0, 1676.0], [48.1, 1676.0], [48.2, 1676.0], [48.3, 1676.0], [48.4, 1676.0], [48.5, 1676.0], [48.6, 1676.0], [48.7, 1676.0], [48.8, 1676.0], [48.9, 1678.0], [49.0, 1678.0], [49.1, 1678.0], [49.2, 1678.0], [49.3, 1678.0], [49.4, 1681.0], [49.5, 1681.0], [49.6, 1681.0], [49.7, 1681.0], [49.8, 1681.0], [49.9, 1681.0], [50.0, 1681.0], [50.1, 1681.0], [50.2, 1681.0], [50.3, 1681.0], [50.4, 1681.0], [50.5, 1681.0], [50.6, 1681.0], [50.7, 1683.0], [50.8, 1683.0], [50.9, 1683.0], [51.0, 1683.0], [51.1, 1683.0], [51.2, 1686.0], [51.3, 1686.0], [51.4, 1686.0], [51.5, 1686.0], [51.6, 1687.0], [51.7, 1687.0], [51.8, 1687.0], [51.9, 1687.0], [52.0, 1687.0], [52.1, 1687.0], [52.2, 1687.0], [52.3, 1687.0], [52.4, 1687.0], [52.5, 1687.0], [52.6, 1688.0], [52.7, 1688.0], [52.8, 1688.0], [52.9, 1688.0], [53.0, 1689.0], [53.1, 1689.0], [53.2, 1689.0], [53.3, 1689.0], [53.4, 1689.0], [53.5, 1691.0], [53.6, 1691.0], [53.7, 1691.0], [53.8, 1691.0], [53.9, 1696.0], [54.0, 1696.0], [54.1, 1696.0], [54.2, 1696.0], [54.3, 1696.0], [54.4, 1697.0], [54.5, 1697.0], [54.6, 1697.0], [54.7, 1697.0], [54.8, 1699.0], [54.9, 1699.0], [55.0, 1699.0], [55.1, 1699.0], [55.2, 1699.0], [55.3, 1699.0], [55.4, 1699.0], [55.5, 1699.0], [55.6, 1699.0], [55.7, 1699.0], [55.8, 1703.0], [55.9, 1703.0], [56.0, 1703.0], [56.1, 1703.0], [56.2, 1707.0], [56.3, 1707.0], [56.4, 1707.0], [56.5, 1707.0], [56.6, 1707.0], [56.7, 1711.0], [56.8, 1711.0], [56.9, 1711.0], [57.0, 1711.0], [57.1, 1713.0], [57.2, 1713.0], [57.3, 1713.0], [57.4, 1713.0], [57.5, 1713.0], [57.6, 1714.0], [57.7, 1714.0], [57.8, 1714.0], [57.9, 1714.0], [58.0, 1714.0], [58.1, 1714.0], [58.2, 1714.0], [58.3, 1714.0], [58.4, 1714.0], [58.5, 1716.0], [58.6, 1716.0], [58.7, 1716.0], [58.8, 1716.0], [58.9, 1716.0], [59.0, 1720.0], [59.1, 1720.0], [59.2, 1720.0], [59.3, 1720.0], [59.4, 1723.0], [59.5, 1723.0], [59.6, 1723.0], [59.7, 1723.0], [59.8, 1723.0], [59.9, 1724.0], [60.0, 1724.0], [60.1, 1724.0], [60.2, 1724.0], [60.3, 1725.0], [60.4, 1725.0], [60.5, 1725.0], [60.6, 1725.0], [60.7, 1725.0], [60.8, 1734.0], [60.9, 1734.0], [61.0, 1734.0], [61.1, 1734.0], [61.2, 1734.0], [61.3, 1734.0], [61.4, 1734.0], [61.5, 1734.0], [61.6, 1734.0], [61.7, 1739.0], [61.8, 1739.0], [61.9, 1739.0], [62.0, 1739.0], [62.1, 1739.0], [62.2, 1741.0], [62.3, 1741.0], [62.4, 1741.0], [62.5, 1741.0], [62.6, 1748.0], [62.7, 1748.0], [62.8, 1748.0], [62.9, 1748.0], [63.0, 1748.0], [63.1, 1748.0], [63.2, 1748.0], [63.3, 1748.0], [63.4, 1748.0], [63.5, 1751.0], [63.6, 1751.0], [63.7, 1751.0], [63.8, 1751.0], [63.9, 1751.0], [64.0, 1758.0], [64.1, 1758.0], [64.2, 1758.0], [64.3, 1758.0], [64.4, 1758.0], [64.5, 1758.0], [64.6, 1758.0], [64.7, 1758.0], [64.8, 1758.0], [64.9, 1759.0], [65.0, 1759.0], [65.1, 1759.0], [65.2, 1759.0], [65.3, 1761.0], [65.4, 1761.0], [65.5, 1761.0], [65.6, 1761.0], [65.7, 1761.0], [65.8, 1762.0], [65.9, 1762.0], [66.0, 1762.0], [66.1, 1762.0], [66.2, 1762.0], [66.3, 1763.0], [66.4, 1763.0], [66.5, 1763.0], [66.6, 1763.0], [66.7, 1763.0], [66.8, 1763.0], [66.9, 1763.0], [67.0, 1763.0], [67.1, 1763.0], [67.2, 1766.0], [67.3, 1766.0], [67.4, 1766.0], [67.5, 1766.0], [67.6, 1766.0], [67.7, 1766.0], [67.8, 1766.0], [67.9, 1766.0], [68.0, 1766.0], [68.1, 1776.0], [68.2, 1776.0], [68.3, 1776.0], [68.4, 1776.0], [68.5, 1779.0], [68.6, 1779.0], [68.7, 1779.0], [68.8, 1779.0], [68.9, 1779.0], [69.0, 1780.0], [69.1, 1780.0], [69.2, 1780.0], [69.3, 1780.0], [69.4, 1780.0], [69.5, 1781.0], [69.6, 1781.0], [69.7, 1781.0], [69.8, 1781.0], [69.9, 1781.0], [70.0, 1781.0], [70.1, 1781.0], [70.2, 1781.0], [70.3, 1781.0], [70.4, 1781.0], [70.5, 1781.0], [70.6, 1781.0], [70.7, 1781.0], [70.8, 1784.0], [70.9, 1784.0], [71.0, 1784.0], [71.1, 1784.0], [71.2, 1784.0], [71.3, 1787.0], [71.4, 1787.0], [71.5, 1787.0], [71.6, 1787.0], [71.7, 1790.0], [71.8, 1790.0], [71.9, 1790.0], [72.0, 1790.0], [72.1, 1790.0], [72.2, 1791.0], [72.3, 1791.0], [72.4, 1791.0], [72.5, 1791.0], [72.6, 1791.0], [72.7, 1791.0], [72.8, 1791.0], [72.9, 1791.0], [73.0, 1791.0], [73.1, 1791.0], [73.2, 1791.0], [73.3, 1791.0], [73.4, 1791.0], [73.5, 1791.0], [73.6, 1792.0], [73.7, 1792.0], [73.8, 1792.0], [73.9, 1792.0], [74.0, 1794.0], [74.1, 1794.0], [74.2, 1794.0], [74.3, 1794.0], [74.4, 1794.0], [74.5, 1795.0], [74.6, 1795.0], [74.7, 1795.0], [74.8, 1795.0], [74.9, 1796.0], [75.0, 1796.0], [75.1, 1796.0], [75.2, 1796.0], [75.3, 1796.0], [75.4, 1816.0], [75.5, 1816.0], [75.6, 1816.0], [75.7, 1816.0], [75.8, 1829.0], [75.9, 1829.0], [76.0, 1829.0], [76.1, 1829.0], [76.2, 1829.0], [76.3, 1835.0], [76.4, 1835.0], [76.5, 1835.0], [76.6, 1835.0], [76.7, 1835.0], [76.8, 1843.0], [76.9, 1843.0], [77.0, 1843.0], [77.1, 1843.0], [77.2, 1846.0], [77.3, 1846.0], [77.4, 1846.0], [77.5, 1846.0], [77.6, 1846.0], [77.7, 1853.0], [77.8, 1853.0], [77.9, 1853.0], [78.0, 1853.0], [78.1, 1856.0], [78.2, 1856.0], [78.3, 1856.0], [78.4, 1856.0], [78.5, 1856.0], [78.6, 1864.0], [78.7, 1864.0], [78.8, 1864.0], [78.9, 1864.0], [79.0, 1873.0], [79.1, 1873.0], [79.2, 1873.0], [79.3, 1873.0], [79.4, 1873.0], [79.5, 1877.0], [79.6, 1877.0], [79.7, 1877.0], [79.8, 1877.0], [79.9, 1877.0], [80.0, 1879.0], [80.1, 1879.0], [80.2, 1879.0], [80.3, 1879.0], [80.4, 1888.0], [80.5, 1888.0], [80.6, 1888.0], [80.7, 1888.0], [80.8, 1888.0], [80.9, 1890.0], [81.0, 1890.0], [81.1, 1890.0], [81.2, 1890.0], [81.3, 1904.0], [81.4, 1904.0], [81.5, 1904.0], [81.6, 1904.0], [81.7, 1904.0], [81.8, 1909.0], [81.9, 1909.0], [82.0, 1909.0], [82.1, 1909.0], [82.2, 1939.0], [82.3, 1939.0], [82.4, 1939.0], [82.5, 1939.0], [82.6, 1939.0], [82.7, 1947.0], [82.8, 1947.0], [82.9, 1947.0], [83.0, 1947.0], [83.1, 1947.0], [83.2, 1957.0], [83.3, 1957.0], [83.4, 1957.0], [83.5, 1957.0], [83.6, 1957.0], [83.7, 1957.0], [83.8, 1957.0], [83.9, 1957.0], [84.0, 1957.0], [84.1, 1961.0], [84.2, 1961.0], [84.3, 1961.0], [84.4, 1961.0], [84.5, 1969.0], [84.6, 1969.0], [84.7, 1969.0], [84.8, 1969.0], [84.9, 1969.0], [85.0, 1971.0], [85.1, 1971.0], [85.2, 1971.0], [85.3, 1971.0], [85.4, 1972.0], [85.5, 1972.0], [85.6, 1972.0], [85.7, 1972.0], [85.8, 1972.0], [85.9, 1974.0], [86.0, 1974.0], [86.1, 1974.0], [86.2, 1974.0], [86.3, 1974.0], [86.4, 1976.0], [86.5, 1976.0], [86.6, 1976.0], [86.7, 1976.0], [86.8, 1982.0], [86.9, 1982.0], [87.0, 1982.0], [87.1, 1982.0], [87.2, 1982.0], [87.3, 1984.0], [87.4, 1984.0], [87.5, 1984.0], [87.6, 1984.0], [87.7, 1989.0], [87.8, 1989.0], [87.9, 1989.0], [88.0, 1989.0], [88.1, 1989.0], [88.2, 2017.0], [88.3, 2017.0], [88.4, 2017.0], [88.5, 2017.0], [88.6, 2019.0], [88.7, 2019.0], [88.8, 2019.0], [88.9, 2019.0], [89.0, 2019.0], [89.1, 2027.0], [89.2, 2027.0], [89.3, 2027.0], [89.4, 2027.0], [89.5, 2030.0], [89.6, 2030.0], [89.7, 2030.0], [89.8, 2030.0], [89.9, 2030.0], [90.0, 2033.0], [90.1, 2033.0], [90.2, 2033.0], [90.3, 2033.0], [90.4, 2033.0], [90.5, 2037.0], [90.6, 2037.0], [90.7, 2037.0], [90.8, 2037.0], [90.9, 2079.0], [91.0, 2079.0], [91.1, 2079.0], [91.2, 2079.0], [91.3, 2079.0], [91.4, 2079.0], [91.5, 2079.0], [91.6, 2079.0], [91.7, 2079.0], [91.8, 2091.0], [91.9, 2091.0], [92.0, 2091.0], [92.1, 2091.0], [92.2, 2091.0], [92.3, 2168.0], [92.4, 2168.0], [92.5, 2168.0], [92.6, 2168.0], [92.7, 2188.0], [92.8, 2188.0], [92.9, 2188.0], [93.0, 2188.0], [93.1, 2188.0], [93.2, 2221.0], [93.3, 2221.0], [93.4, 2221.0], [93.5, 2221.0], [93.6, 2221.0], [93.7, 2258.0], [93.8, 2258.0], [93.9, 2258.0], [94.0, 2258.0], [94.1, 2272.0], [94.2, 2272.0], [94.3, 2272.0], [94.4, 2272.0], [94.5, 2272.0], [94.6, 2310.0], [94.7, 2310.0], [94.8, 2310.0], [94.9, 2310.0], [95.0, 2311.0], [95.1, 2311.0], [95.2, 2311.0], [95.3, 2311.0], [95.4, 2311.0], [95.5, 2383.0], [95.6, 2383.0], [95.7, 2383.0], [95.8, 2383.0], [95.9, 2425.0], [96.0, 2425.0], [96.1, 2425.0], [96.2, 2425.0], [96.3, 2425.0], [96.4, 2499.0], [96.5, 2499.0], [96.6, 2499.0], [96.7, 2499.0], [96.8, 2499.0], [96.9, 2534.0], [97.0, 2534.0], [97.1, 2534.0], [97.2, 2534.0], [97.3, 2601.0], [97.4, 2601.0], [97.5, 2601.0], [97.6, 2601.0], [97.7, 2601.0], [97.8, 2987.0], [97.9, 2987.0], [98.0, 2987.0], [98.1, 2987.0], [98.2, 3257.0], [98.3, 3257.0], [98.4, 3257.0], [98.5, 3257.0], [98.6, 3257.0], [98.7, 4327.0], [98.8, 4327.0], [98.9, 4327.0], [99.0, 4327.0], [99.1, 4386.0], [99.2, 4386.0], [99.3, 4386.0], [99.4, 4386.0], [99.5, 4386.0], [99.6, 4400.0], [99.7, 4400.0], [99.8, 4400.0], [99.9, 4400.0], [100.0, 4400.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[0.0, 577.0], [0.1, 577.0], [0.2, 577.0], [0.3, 577.0], [0.4, 577.0], [0.5, 583.0], [0.6, 583.0], [0.7, 583.0], [0.8, 583.0], [0.9, 583.0], [1.0, 589.0], [1.1, 589.0], [1.2, 589.0], [1.3, 589.0], [1.4, 589.0], [1.5, 593.0], [1.6, 593.0], [1.7, 593.0], [1.8, 593.0], [1.9, 593.0], [2.0, 604.0], [2.1, 604.0], [2.2, 604.0], [2.3, 604.0], [2.4, 604.0], [2.5, 604.0], [2.6, 604.0], [2.7, 604.0], [2.8, 604.0], [2.9, 620.0], [3.0, 620.0], [3.1, 620.0], [3.2, 620.0], [3.3, 620.0], [3.4, 624.0], [3.5, 624.0], [3.6, 624.0], [3.7, 624.0], [3.8, 624.0], [3.9, 627.0], [4.0, 627.0], [4.1, 627.0], [4.2, 627.0], [4.3, 627.0], [4.4, 630.0], [4.5, 630.0], [4.6, 630.0], [4.7, 630.0], [4.8, 630.0], [4.9, 634.0], [5.0, 634.0], [5.1, 634.0], [5.2, 634.0], [5.3, 634.0], [5.4, 634.0], [5.5, 634.0], [5.6, 634.0], [5.7, 634.0], [5.8, 635.0], [5.9, 635.0], [6.0, 635.0], [6.1, 635.0], [6.2, 635.0], [6.3, 636.0], [6.4, 636.0], [6.5, 636.0], [6.6, 636.0], [6.7, 636.0], [6.8, 637.0], [6.9, 637.0], [7.0, 637.0], [7.1, 637.0], [7.2, 637.0], [7.3, 638.0], [7.4, 638.0], [7.5, 638.0], [7.6, 638.0], [7.7, 638.0], [7.8, 638.0], [7.9, 638.0], [8.0, 638.0], [8.1, 638.0], [8.2, 639.0], [8.3, 639.0], [8.4, 639.0], [8.5, 639.0], [8.6, 639.0], [8.7, 639.0], [8.8, 639.0], [8.9, 639.0], [9.0, 639.0], [9.1, 639.0], [9.2, 641.0], [9.3, 641.0], [9.4, 641.0], [9.5, 641.0], [9.6, 641.0], [9.7, 644.0], [9.8, 644.0], [9.9, 644.0], [10.0, 644.0], [10.1, 644.0], [10.2, 644.0], [10.3, 644.0], [10.4, 644.0], [10.5, 644.0], [10.6, 644.0], [10.7, 644.0], [10.8, 644.0], [10.9, 644.0], [11.0, 644.0], [11.1, 645.0], [11.2, 645.0], [11.3, 645.0], [11.4, 645.0], [11.5, 645.0], [11.6, 646.0], [11.7, 646.0], [11.8, 646.0], [11.9, 646.0], [12.0, 646.0], [12.1, 647.0], [12.2, 647.0], [12.3, 647.0], [12.4, 647.0], [12.5, 648.0], [12.6, 648.0], [12.7, 648.0], [12.8, 648.0], [12.9, 648.0], [13.0, 648.0], [13.1, 648.0], [13.2, 648.0], [13.3, 648.0], [13.4, 648.0], [13.5, 649.0], [13.6, 649.0], [13.7, 649.0], [13.8, 649.0], [13.9, 649.0], [14.0, 650.0], [14.1, 650.0], [14.2, 650.0], [14.3, 650.0], [14.4, 650.0], [14.5, 651.0], [14.6, 651.0], [14.7, 651.0], [14.8, 651.0], [14.9, 651.0], [15.0, 651.0], [15.1, 651.0], [15.2, 651.0], [15.3, 651.0], [15.4, 652.0], [15.5, 652.0], [15.6, 652.0], [15.7, 652.0], [15.8, 652.0], [15.9, 652.0], [16.0, 652.0], [16.1, 652.0], [16.2, 652.0], [16.3, 652.0], [16.4, 652.0], [16.5, 652.0], [16.6, 652.0], [16.7, 652.0], [16.8, 652.0], [16.9, 653.0], [17.0, 653.0], [17.1, 653.0], [17.2, 653.0], [17.3, 653.0], [17.4, 654.0], [17.5, 654.0], [17.6, 654.0], [17.7, 654.0], [17.8, 655.0], [17.9, 655.0], [18.0, 655.0], [18.1, 655.0], [18.2, 655.0], [18.3, 655.0], [18.4, 655.0], [18.5, 655.0], [18.6, 655.0], [18.7, 655.0], [18.8, 655.0], [18.9, 655.0], [19.0, 655.0], [19.1, 655.0], [19.2, 655.0], [19.3, 657.0], [19.4, 657.0], [19.5, 657.0], [19.6, 657.0], [19.7, 657.0], [19.8, 657.0], [19.9, 657.0], [20.0, 657.0], [20.1, 657.0], [20.2, 658.0], [20.3, 658.0], [20.4, 658.0], [20.5, 658.0], [20.6, 658.0], [20.7, 658.0], [20.8, 658.0], [20.9, 658.0], [21.0, 658.0], [21.1, 658.0], [21.2, 660.0], [21.3, 660.0], [21.4, 660.0], [21.5, 660.0], [21.6, 660.0], [21.7, 660.0], [21.8, 660.0], [21.9, 660.0], [22.0, 660.0], [22.1, 660.0], [22.2, 660.0], [22.3, 660.0], [22.4, 660.0], [22.5, 660.0], [22.6, 662.0], [22.7, 662.0], [22.8, 662.0], [22.9, 662.0], [23.0, 662.0], [23.1, 662.0], [23.2, 662.0], [23.3, 662.0], [23.4, 662.0], [23.5, 662.0], [23.6, 662.0], [23.7, 662.0], [23.8, 662.0], [23.9, 662.0], [24.0, 662.0], [24.1, 662.0], [24.2, 662.0], [24.3, 662.0], [24.4, 662.0], [24.5, 662.0], [24.6, 662.0], [24.7, 662.0], [24.8, 662.0], [24.9, 662.0], [25.0, 663.0], [25.1, 663.0], [25.2, 663.0], [25.3, 663.0], [25.4, 663.0], [25.5, 663.0], [25.6, 663.0], [25.7, 663.0], [25.8, 663.0], [25.9, 663.0], [26.0, 664.0], [26.1, 664.0], [26.2, 664.0], [26.3, 664.0], [26.4, 664.0], [26.5, 667.0], [26.6, 667.0], [26.7, 667.0], [26.8, 667.0], [26.9, 667.0], [27.0, 667.0], [27.1, 667.0], [27.2, 667.0], [27.3, 667.0], [27.4, 667.0], [27.5, 668.0], [27.6, 668.0], [27.7, 668.0], [27.8, 668.0], [27.9, 668.0], [28.0, 668.0], [28.1, 668.0], [28.2, 668.0], [28.3, 668.0], [28.4, 670.0], [28.5, 670.0], [28.6, 670.0], [28.7, 670.0], [28.8, 670.0], [28.9, 670.0], [29.0, 670.0], [29.1, 670.0], [29.2, 670.0], [29.3, 670.0], [29.4, 671.0], [29.5, 671.0], [29.6, 671.0], [29.7, 671.0], [29.8, 671.0], [29.9, 671.0], [30.0, 671.0], [30.1, 671.0], [30.2, 671.0], [30.3, 673.0], [30.4, 673.0], [30.5, 673.0], [30.6, 673.0], [30.7, 673.0], [30.8, 673.0], [30.9, 673.0], [31.0, 673.0], [31.1, 673.0], [31.2, 673.0], [31.3, 674.0], [31.4, 674.0], [31.5, 674.0], [31.6, 674.0], [31.7, 674.0], [31.8, 674.0], [31.9, 674.0], [32.0, 674.0], [32.1, 674.0], [32.2, 674.0], [32.3, 675.0], [32.4, 675.0], [32.5, 675.0], [32.6, 675.0], [32.7, 676.0], [32.8, 676.0], [32.9, 676.0], [33.0, 676.0], [33.1, 676.0], [33.2, 676.0], [33.3, 676.0], [33.4, 676.0], [33.5, 676.0], [33.6, 676.0], [33.7, 677.0], [33.8, 677.0], [33.9, 677.0], [34.0, 677.0], [34.1, 677.0], [34.2, 677.0], [34.3, 677.0], [34.4, 677.0], [34.5, 677.0], [34.6, 677.0], [34.7, 677.0], [34.8, 677.0], [34.9, 677.0], [35.0, 677.0], [35.1, 678.0], [35.2, 678.0], [35.3, 678.0], [35.4, 678.0], [35.5, 678.0], [35.6, 678.0], [35.7, 678.0], [35.8, 678.0], [35.9, 678.0], [36.0, 678.0], [36.1, 679.0], [36.2, 679.0], [36.3, 679.0], [36.4, 679.0], [36.5, 679.0], [36.6, 681.0], [36.7, 681.0], [36.8, 681.0], [36.9, 681.0], [37.0, 681.0], [37.1, 681.0], [37.2, 681.0], [37.3, 681.0], [37.4, 681.0], [37.5, 682.0], [37.6, 682.0], [37.7, 682.0], [37.8, 682.0], [37.9, 682.0], [38.0, 683.0], [38.1, 683.0], [38.2, 683.0], [38.3, 683.0], [38.4, 683.0], [38.5, 684.0], [38.6, 684.0], [38.7, 684.0], [38.8, 684.0], [38.9, 684.0], [39.0, 688.0], [39.1, 688.0], [39.2, 688.0], [39.3, 688.0], [39.4, 688.0], [39.5, 689.0], [39.6, 689.0], [39.7, 689.0], [39.8, 689.0], [39.9, 689.0], [40.0, 690.0], [40.1, 690.0], [40.2, 690.0], [40.3, 690.0], [40.4, 690.0], [40.5, 690.0], [40.6, 690.0], [40.7, 690.0], [40.8, 690.0], [40.9, 692.0], [41.0, 692.0], [41.1, 692.0], [41.2, 692.0], [41.3, 692.0], [41.4, 692.0], [41.5, 692.0], [41.6, 692.0], [41.7, 692.0], [41.8, 692.0], [41.9, 692.0], [42.0, 692.0], [42.1, 692.0], [42.2, 692.0], [42.3, 692.0], [42.4, 693.0], [42.5, 693.0], [42.6, 693.0], [42.7, 693.0], [42.8, 694.0], [42.9, 694.0], [43.0, 694.0], [43.1, 694.0], [43.2, 694.0], [43.3, 695.0], [43.4, 695.0], [43.5, 695.0], [43.6, 695.0], [43.7, 695.0], [43.8, 696.0], [43.9, 696.0], [44.0, 696.0], [44.1, 696.0], [44.2, 696.0], [44.3, 697.0], [44.4, 697.0], [44.5, 697.0], [44.6, 697.0], [44.7, 697.0], [44.8, 697.0], [44.9, 697.0], [45.0, 697.0], [45.1, 697.0], [45.2, 698.0], [45.3, 698.0], [45.4, 698.0], [45.5, 698.0], [45.6, 698.0], [45.7, 699.0], [45.8, 699.0], [45.9, 699.0], [46.0, 699.0], [46.1, 699.0], [46.2, 699.0], [46.3, 699.0], [46.4, 699.0], [46.5, 699.0], [46.6, 699.0], [46.7, 700.0], [46.8, 700.0], [46.9, 700.0], [47.0, 700.0], [47.1, 700.0], [47.2, 701.0], [47.3, 701.0], [47.4, 701.0], [47.5, 701.0], [47.6, 701.0], [47.7, 701.0], [47.8, 701.0], [47.9, 701.0], [48.0, 701.0], [48.1, 703.0], [48.2, 703.0], [48.3, 703.0], [48.4, 703.0], [48.5, 703.0], [48.6, 704.0], [48.7, 704.0], [48.8, 704.0], [48.9, 704.0], [49.0, 704.0], [49.1, 707.0], [49.2, 707.0], [49.3, 707.0], [49.4, 707.0], [49.5, 707.0], [49.6, 707.0], [49.7, 707.0], [49.8, 707.0], [49.9, 707.0], [50.0, 707.0], [50.1, 709.0], [50.2, 709.0], [50.3, 709.0], [50.4, 709.0], [50.5, 710.0], [50.6, 710.0], [50.7, 710.0], [50.8, 710.0], [50.9, 710.0], [51.0, 710.0], [51.1, 710.0], [51.2, 710.0], [51.3, 710.0], [51.4, 710.0], [51.5, 711.0], [51.6, 711.0], [51.7, 711.0], [51.8, 711.0], [51.9, 711.0], [52.0, 712.0], [52.1, 712.0], [52.2, 712.0], [52.3, 712.0], [52.4, 712.0], [52.5, 712.0], [52.6, 712.0], [52.7, 712.0], [52.8, 712.0], [52.9, 713.0], [53.0, 713.0], [53.1, 713.0], [53.2, 713.0], [53.3, 713.0], [53.4, 713.0], [53.5, 713.0], [53.6, 713.0], [53.7, 713.0], [53.8, 713.0], [53.9, 713.0], [54.0, 713.0], [54.1, 713.0], [54.2, 713.0], [54.3, 713.0], [54.4, 714.0], [54.5, 714.0], [54.6, 714.0], [54.7, 714.0], [54.8, 714.0], [54.9, 715.0], [55.0, 715.0], [55.1, 715.0], [55.2, 715.0], [55.3, 716.0], [55.4, 716.0], [55.5, 716.0], [55.6, 716.0], [55.7, 716.0], [55.8, 716.0], [55.9, 716.0], [56.0, 716.0], [56.1, 716.0], [56.2, 716.0], [56.3, 717.0], [56.4, 717.0], [56.5, 717.0], [56.6, 717.0], [56.7, 717.0], [56.8, 717.0], [56.9, 717.0], [57.0, 717.0], [57.1, 717.0], [57.2, 717.0], [57.3, 719.0], [57.4, 719.0], [57.5, 719.0], [57.6, 719.0], [57.7, 720.0], [57.8, 720.0], [57.9, 720.0], [58.0, 720.0], [58.1, 720.0], [58.2, 721.0], [58.3, 721.0], [58.4, 721.0], [58.5, 721.0], [58.6, 721.0], [58.7, 721.0], [58.8, 721.0], [58.9, 721.0], [59.0, 721.0], [59.1, 721.0], [59.2, 722.0], [59.3, 722.0], [59.4, 722.0], [59.5, 722.0], [59.6, 722.0], [59.7, 722.0], [59.8, 722.0], [59.9, 722.0], [60.0, 722.0], [60.1, 724.0], [60.2, 724.0], [60.3, 724.0], [60.4, 724.0], [60.5, 724.0], [60.6, 724.0], [60.7, 724.0], [60.8, 724.0], [60.9, 724.0], [61.0, 724.0], [61.1, 725.0], [61.2, 725.0], [61.3, 725.0], [61.4, 725.0], [61.5, 725.0], [61.6, 726.0], [61.7, 726.0], [61.8, 726.0], [61.9, 726.0], [62.0, 726.0], [62.1, 729.0], [62.2, 729.0], [62.3, 729.0], [62.4, 729.0], [62.5, 729.0], [62.6, 730.0], [62.7, 730.0], [62.8, 730.0], [62.9, 730.0], [63.0, 730.0], [63.1, 730.0], [63.2, 730.0], [63.3, 730.0], [63.4, 730.0], [63.5, 731.0], [63.6, 731.0], [63.7, 731.0], [63.8, 731.0], [63.9, 731.0], [64.0, 732.0], [64.1, 732.0], [64.2, 732.0], [64.3, 732.0], [64.4, 732.0], [64.5, 733.0], [64.6, 733.0], [64.7, 733.0], [64.8, 733.0], [64.9, 733.0], [65.0, 736.0], [65.1, 736.0], [65.2, 736.0], [65.3, 736.0], [65.4, 736.0], [65.5, 736.0], [65.6, 736.0], [65.7, 736.0], [65.8, 736.0], [65.9, 738.0], [66.0, 738.0], [66.1, 738.0], [66.2, 738.0], [66.3, 738.0], [66.4, 740.0], [66.5, 740.0], [66.6, 740.0], [66.7, 740.0], [66.8, 740.0], [66.9, 741.0], [67.0, 741.0], [67.1, 741.0], [67.2, 741.0], [67.3, 741.0], [67.4, 741.0], [67.5, 741.0], [67.6, 741.0], [67.7, 741.0], [67.8, 745.0], [67.9, 745.0], [68.0, 745.0], [68.1, 745.0], [68.2, 745.0], [68.3, 747.0], [68.4, 747.0], [68.5, 747.0], [68.6, 747.0], [68.7, 747.0], [68.8, 748.0], [68.9, 748.0], [69.0, 748.0], [69.1, 748.0], [69.2, 748.0], [69.3, 749.0], [69.4, 749.0], [69.5, 749.0], [69.6, 749.0], [69.7, 749.0], [69.8, 749.0], [69.9, 749.0], [70.0, 749.0], [70.1, 749.0], [70.2, 750.0], [70.3, 750.0], [70.4, 750.0], [70.5, 750.0], [70.6, 750.0], [70.7, 751.0], [70.8, 751.0], [70.9, 751.0], [71.0, 751.0], [71.1, 751.0], [71.2, 753.0], [71.3, 753.0], [71.4, 753.0], [71.5, 753.0], [71.6, 753.0], [71.7, 760.0], [71.8, 760.0], [71.9, 760.0], [72.0, 760.0], [72.1, 760.0], [72.2, 760.0], [72.3, 760.0], [72.4, 760.0], [72.5, 760.0], [72.6, 761.0], [72.7, 761.0], [72.8, 761.0], [72.9, 761.0], [73.0, 761.0], [73.1, 761.0], [73.2, 761.0], [73.3, 761.0], [73.4, 761.0], [73.5, 761.0], [73.6, 762.0], [73.7, 762.0], [73.8, 762.0], [73.9, 762.0], [74.0, 762.0], [74.1, 763.0], [74.2, 763.0], [74.3, 763.0], [74.4, 763.0], [74.5, 763.0], [74.6, 764.0], [74.7, 764.0], [74.8, 764.0], [74.9, 764.0], [75.0, 764.0], [75.1, 764.0], [75.2, 764.0], [75.3, 764.0], [75.4, 764.0], [75.5, 766.0], [75.6, 766.0], [75.7, 766.0], [75.8, 766.0], [75.9, 766.0], [76.0, 771.0], [76.1, 771.0], [76.2, 771.0], [76.3, 771.0], [76.4, 771.0], [76.5, 772.0], [76.6, 772.0], [76.7, 772.0], [76.8, 772.0], [76.9, 772.0], [77.0, 772.0], [77.1, 772.0], [77.2, 772.0], [77.3, 772.0], [77.4, 772.0], [77.5, 774.0], [77.6, 774.0], [77.7, 774.0], [77.8, 774.0], [77.9, 782.0], [78.0, 782.0], [78.1, 782.0], [78.2, 782.0], [78.3, 782.0], [78.4, 782.0], [78.5, 782.0], [78.6, 782.0], [78.7, 782.0], [78.8, 782.0], [78.9, 782.0], [79.0, 782.0], [79.1, 782.0], [79.2, 782.0], [79.3, 782.0], [79.4, 783.0], [79.5, 783.0], [79.6, 783.0], [79.7, 783.0], [79.8, 783.0], [79.9, 785.0], [80.0, 785.0], [80.1, 785.0], [80.2, 785.0], [80.3, 791.0], [80.4, 791.0], [80.5, 791.0], [80.6, 791.0], [80.7, 791.0], [80.8, 795.0], [80.9, 795.0], [81.0, 795.0], [81.1, 795.0], [81.2, 795.0], [81.3, 800.0], [81.4, 800.0], [81.5, 800.0], [81.6, 800.0], [81.7, 800.0], [81.8, 801.0], [81.9, 801.0], [82.0, 801.0], [82.1, 801.0], [82.2, 801.0], [82.3, 806.0], [82.4, 806.0], [82.5, 806.0], [82.6, 806.0], [82.7, 812.0], [82.8, 812.0], [82.9, 812.0], [83.0, 812.0], [83.1, 812.0], [83.2, 815.0], [83.3, 815.0], [83.4, 815.0], [83.5, 815.0], [83.6, 815.0], [83.7, 816.0], [83.8, 816.0], [83.9, 816.0], [84.0, 816.0], [84.1, 816.0], [84.2, 817.0], [84.3, 817.0], [84.4, 817.0], [84.5, 817.0], [84.6, 817.0], [84.7, 821.0], [84.8, 821.0], [84.9, 821.0], [85.0, 821.0], [85.1, 828.0], [85.2, 828.0], [85.3, 828.0], [85.4, 828.0], [85.5, 828.0], [85.6, 830.0], [85.7, 830.0], [85.8, 830.0], [85.9, 830.0], [86.0, 830.0], [86.1, 848.0], [86.2, 848.0], [86.3, 848.0], [86.4, 848.0], [86.5, 848.0], [86.6, 855.0], [86.7, 855.0], [86.8, 855.0], [86.9, 855.0], [87.0, 855.0], [87.1, 856.0], [87.2, 856.0], [87.3, 856.0], [87.4, 856.0], [87.5, 857.0], [87.6, 857.0], [87.7, 857.0], [87.8, 857.0], [87.9, 857.0], [88.0, 871.0], [88.1, 871.0], [88.2, 871.0], [88.3, 871.0], [88.4, 871.0], [88.5, 872.0], [88.6, 872.0], [88.7, 872.0], [88.8, 872.0], [88.9, 872.0], [89.0, 881.0], [89.1, 881.0], [89.2, 881.0], [89.3, 881.0], [89.4, 881.0], [89.5, 1012.0], [89.6, 1012.0], [89.7, 1012.0], [89.8, 1012.0], [89.9, 1012.0], [90.0, 1021.0], [90.1, 1021.0], [90.2, 1021.0], [90.3, 1021.0], [90.4, 1023.0], [90.5, 1023.0], [90.6, 1023.0], [90.7, 1023.0], [90.8, 1023.0], [90.9, 1030.0], [91.0, 1030.0], [91.1, 1030.0], [91.2, 1030.0], [91.3, 1030.0], [91.4, 1044.0], [91.5, 1044.0], [91.6, 1044.0], [91.7, 1044.0], [91.8, 1044.0], [91.9, 1195.0], [92.0, 1195.0], [92.1, 1195.0], [92.2, 1195.0], [92.3, 1195.0], [92.4, 1919.0], [92.5, 1919.0], [92.6, 1919.0], [92.7, 1919.0], [92.8, 2111.0], [92.9, 2111.0], [93.0, 2111.0], [93.1, 2111.0], [93.2, 2111.0], [93.3, 2238.0], [93.4, 2238.0], [93.5, 2238.0], [93.6, 2238.0], [93.7, 2238.0], [93.8, 2352.0], [93.9, 2352.0], [94.0, 2352.0], [94.1, 2352.0], [94.2, 2352.0], [94.3, 2546.0], [94.4, 2546.0], [94.5, 2546.0], [94.6, 2546.0], [94.7, 2546.0], [94.8, 2660.0], [94.9, 2660.0], [95.0, 2660.0], [95.1, 2660.0], [95.2, 3178.0], [95.3, 3178.0], [95.4, 3178.0], [95.5, 3178.0], [95.6, 3178.0], [95.7, 3518.0], [95.8, 3518.0], [95.9, 3518.0], [96.0, 3518.0], [96.1, 3518.0], [96.2, 3719.0], [96.3, 3719.0], [96.4, 3719.0], [96.5, 3719.0], [96.6, 3719.0], [96.7, 3824.0], [96.8, 3824.0], [96.9, 3824.0], [97.0, 3824.0], [97.1, 3824.0], [97.2, 4618.0], [97.3, 4618.0], [97.4, 4618.0], [97.5, 4618.0], [97.6, 4658.0], [97.7, 4658.0], [97.8, 4658.0], [97.9, 4658.0], [98.0, 4658.0], [98.1, 4711.0], [98.2, 4711.0], [98.3, 4711.0], [98.4, 4711.0], [98.5, 4711.0], [98.6, 5574.0], [98.7, 5574.0], [98.8, 5574.0], [98.9, 5574.0], [99.0, 5574.0], [99.1, 7162.0], [99.2, 7162.0], [99.3, 7162.0], [99.4, 7162.0], [99.5, 7162.0], [99.6, 7304.0], [99.7, 7304.0], [99.8, 7304.0], [99.9, 7304.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[0.0, 873.0], [0.1, 873.0], [0.2, 873.0], [0.3, 873.0], [0.4, 873.0], [0.5, 902.0], [0.6, 902.0], [0.7, 902.0], [0.8, 902.0], [0.9, 902.0], [1.0, 917.0], [1.1, 917.0], [1.2, 917.0], [1.3, 917.0], [1.4, 917.0], [1.5, 919.0], [1.6, 919.0], [1.7, 919.0], [1.8, 919.0], [1.9, 919.0], [2.0, 921.0], [2.1, 921.0], [2.2, 921.0], [2.3, 921.0], [2.4, 921.0], [2.5, 922.0], [2.6, 922.0], [2.7, 922.0], [2.8, 922.0], [2.9, 922.0], [3.0, 931.0], [3.1, 931.0], [3.2, 931.0], [3.3, 931.0], [3.4, 934.0], [3.5, 934.0], [3.6, 934.0], [3.7, 934.0], [3.8, 934.0], [3.9, 937.0], [4.0, 937.0], [4.1, 937.0], [4.2, 937.0], [4.3, 937.0], [4.4, 938.0], [4.5, 938.0], [4.6, 938.0], [4.7, 938.0], [4.8, 938.0], [4.9, 938.0], [5.0, 938.0], [5.1, 938.0], [5.2, 938.0], [5.3, 938.0], [5.4, 940.0], [5.5, 940.0], [5.6, 940.0], [5.7, 940.0], [5.8, 940.0], [5.9, 941.0], [6.0, 941.0], [6.1, 941.0], [6.2, 941.0], [6.3, 941.0], [6.4, 941.0], [6.5, 941.0], [6.6, 941.0], [6.7, 941.0], [6.8, 942.0], [6.9, 942.0], [7.0, 942.0], [7.1, 942.0], [7.2, 942.0], [7.3, 943.0], [7.4, 943.0], [7.5, 943.0], [7.6, 943.0], [7.7, 943.0], [7.8, 944.0], [7.9, 944.0], [8.0, 944.0], [8.1, 944.0], [8.2, 944.0], [8.3, 945.0], [8.4, 945.0], [8.5, 945.0], [8.6, 945.0], [8.7, 945.0], [8.8, 949.0], [8.9, 949.0], [9.0, 949.0], [9.1, 949.0], [9.2, 949.0], [9.3, 952.0], [9.4, 952.0], [9.5, 952.0], [9.6, 952.0], [9.7, 952.0], [9.8, 953.0], [9.9, 953.0], [10.0, 953.0], [10.1, 953.0], [10.2, 954.0], [10.3, 954.0], [10.4, 954.0], [10.5, 954.0], [10.6, 954.0], [10.7, 955.0], [10.8, 955.0], [10.9, 955.0], [11.0, 955.0], [11.1, 955.0], [11.2, 957.0], [11.3, 957.0], [11.4, 957.0], [11.5, 957.0], [11.6, 957.0], [11.7, 958.0], [11.8, 958.0], [11.9, 958.0], [12.0, 958.0], [12.1, 958.0], [12.2, 959.0], [12.3, 959.0], [12.4, 959.0], [12.5, 959.0], [12.6, 959.0], [12.7, 960.0], [12.8, 960.0], [12.9, 960.0], [13.0, 960.0], [13.1, 960.0], [13.2, 961.0], [13.3, 961.0], [13.4, 961.0], [13.5, 961.0], [13.6, 962.0], [13.7, 962.0], [13.8, 962.0], [13.9, 962.0], [14.0, 962.0], [14.1, 963.0], [14.2, 963.0], [14.3, 963.0], [14.4, 963.0], [14.5, 963.0], [14.6, 964.0], [14.7, 964.0], [14.8, 964.0], [14.9, 964.0], [15.0, 964.0], [15.1, 965.0], [15.2, 965.0], [15.3, 965.0], [15.4, 965.0], [15.5, 965.0], [15.6, 969.0], [15.7, 969.0], [15.8, 969.0], [15.9, 969.0], [16.0, 969.0], [16.1, 972.0], [16.2, 972.0], [16.3, 972.0], [16.4, 972.0], [16.5, 972.0], [16.6, 973.0], [16.7, 973.0], [16.8, 973.0], [16.9, 973.0], [17.0, 974.0], [17.1, 974.0], [17.2, 974.0], [17.3, 974.0], [17.4, 974.0], [17.5, 975.0], [17.6, 975.0], [17.7, 975.0], [17.8, 975.0], [17.9, 975.0], [18.0, 977.0], [18.1, 977.0], [18.2, 977.0], [18.3, 977.0], [18.4, 977.0], [18.5, 978.0], [18.6, 978.0], [18.7, 978.0], [18.8, 978.0], [18.9, 978.0], [19.0, 978.0], [19.1, 978.0], [19.2, 978.0], [19.3, 978.0], [19.4, 978.0], [19.5, 978.0], [19.6, 978.0], [19.7, 978.0], [19.8, 978.0], [19.9, 978.0], [20.0, 979.0], [20.1, 979.0], [20.2, 979.0], [20.3, 979.0], [20.4, 981.0], [20.5, 981.0], [20.6, 981.0], [20.7, 981.0], [20.8, 981.0], [20.9, 981.0], [21.0, 981.0], [21.1, 981.0], [21.2, 981.0], [21.3, 981.0], [21.4, 981.0], [21.5, 981.0], [21.6, 981.0], [21.7, 981.0], [21.8, 981.0], [21.9, 981.0], [22.0, 981.0], [22.1, 981.0], [22.2, 981.0], [22.3, 981.0], [22.4, 982.0], [22.5, 982.0], [22.6, 982.0], [22.7, 982.0], [22.8, 982.0], [22.9, 989.0], [23.0, 989.0], [23.1, 989.0], [23.2, 989.0], [23.3, 989.0], [23.4, 989.0], [23.5, 989.0], [23.6, 989.0], [23.7, 989.0], [23.8, 990.0], [23.9, 990.0], [24.0, 990.0], [24.1, 990.0], [24.2, 990.0], [24.3, 994.0], [24.4, 994.0], [24.5, 994.0], [24.6, 994.0], [24.7, 994.0], [24.8, 995.0], [24.9, 995.0], [25.0, 995.0], [25.1, 995.0], [25.2, 995.0], [25.3, 996.0], [25.4, 996.0], [25.5, 996.0], [25.6, 996.0], [25.7, 996.0], [25.8, 998.0], [25.9, 998.0], [26.0, 998.0], [26.1, 998.0], [26.2, 998.0], [26.3, 998.0], [26.4, 998.0], [26.5, 998.0], [26.6, 998.0], [26.7, 999.0], [26.8, 999.0], [26.9, 999.0], [27.0, 999.0], [27.1, 999.0], [27.2, 1000.0], [27.3, 1000.0], [27.4, 1000.0], [27.5, 1000.0], [27.6, 1000.0], [27.7, 1000.0], [27.8, 1000.0], [27.9, 1000.0], [28.0, 1000.0], [28.1, 1000.0], [28.2, 1001.0], [28.3, 1001.0], [28.4, 1001.0], [28.5, 1001.0], [28.6, 1001.0], [28.7, 1004.0], [28.8, 1004.0], [28.9, 1004.0], [29.0, 1004.0], [29.1, 1004.0], [29.2, 1004.0], [29.3, 1004.0], [29.4, 1004.0], [29.5, 1004.0], [29.6, 1004.0], [29.7, 1004.0], [29.8, 1004.0], [29.9, 1004.0], [30.0, 1004.0], [30.1, 1005.0], [30.2, 1005.0], [30.3, 1005.0], [30.4, 1005.0], [30.5, 1005.0], [30.6, 1007.0], [30.7, 1007.0], [30.8, 1007.0], [30.9, 1007.0], [31.0, 1007.0], [31.1, 1008.0], [31.2, 1008.0], [31.3, 1008.0], [31.4, 1008.0], [31.5, 1008.0], [31.6, 1008.0], [31.7, 1008.0], [31.8, 1008.0], [31.9, 1008.0], [32.0, 1008.0], [32.1, 1011.0], [32.2, 1011.0], [32.3, 1011.0], [32.4, 1011.0], [32.5, 1011.0], [32.6, 1011.0], [32.7, 1011.0], [32.8, 1011.0], [32.9, 1011.0], [33.0, 1011.0], [33.1, 1011.0], [33.2, 1011.0], [33.3, 1011.0], [33.4, 1011.0], [33.5, 1011.0], [33.6, 1011.0], [33.7, 1011.0], [33.8, 1011.0], [33.9, 1011.0], [34.0, 1015.0], [34.1, 1015.0], [34.2, 1015.0], [34.3, 1015.0], [34.4, 1015.0], [34.5, 1018.0], [34.6, 1018.0], [34.7, 1018.0], [34.8, 1018.0], [34.9, 1018.0], [35.0, 1019.0], [35.1, 1019.0], [35.2, 1019.0], [35.3, 1019.0], [35.4, 1019.0], [35.5, 1019.0], [35.6, 1019.0], [35.7, 1019.0], [35.8, 1019.0], [35.9, 1019.0], [36.0, 1019.0], [36.1, 1019.0], [36.2, 1019.0], [36.3, 1019.0], [36.4, 1019.0], [36.5, 1019.0], [36.6, 1019.0], [36.7, 1019.0], [36.8, 1019.0], [36.9, 1019.0], [37.0, 1019.0], [37.1, 1019.0], [37.2, 1019.0], [37.3, 1019.0], [37.4, 1022.0], [37.5, 1022.0], [37.6, 1022.0], [37.7, 1022.0], [37.8, 1022.0], [37.9, 1024.0], [38.0, 1024.0], [38.1, 1024.0], [38.2, 1024.0], [38.3, 1024.0], [38.4, 1025.0], [38.5, 1025.0], [38.6, 1025.0], [38.7, 1025.0], [38.8, 1025.0], [38.9, 1027.0], [39.0, 1027.0], [39.1, 1027.0], [39.2, 1027.0], [39.3, 1027.0], [39.4, 1032.0], [39.5, 1032.0], [39.6, 1032.0], [39.7, 1032.0], [39.8, 1032.0], [39.9, 1036.0], [40.0, 1036.0], [40.1, 1036.0], [40.2, 1036.0], [40.3, 1036.0], [40.4, 1036.0], [40.5, 1036.0], [40.6, 1036.0], [40.7, 1036.0], [40.8, 1037.0], [40.9, 1037.0], [41.0, 1037.0], [41.1, 1037.0], [41.2, 1037.0], [41.3, 1038.0], [41.4, 1038.0], [41.5, 1038.0], [41.6, 1038.0], [41.7, 1038.0], [41.8, 1038.0], [41.9, 1038.0], [42.0, 1038.0], [42.1, 1038.0], [42.2, 1038.0], [42.3, 1040.0], [42.4, 1040.0], [42.5, 1040.0], [42.6, 1040.0], [42.7, 1040.0], [42.8, 1041.0], [42.9, 1041.0], [43.0, 1041.0], [43.1, 1041.0], [43.2, 1041.0], [43.3, 1044.0], [43.4, 1044.0], [43.5, 1044.0], [43.6, 1044.0], [43.7, 1048.0], [43.8, 1048.0], [43.9, 1048.0], [44.0, 1048.0], [44.1, 1048.0], [44.2, 1050.0], [44.3, 1050.0], [44.4, 1050.0], [44.5, 1050.0], [44.6, 1050.0], [44.7, 1050.0], [44.8, 1050.0], [44.9, 1050.0], [45.0, 1050.0], [45.1, 1050.0], [45.2, 1053.0], [45.3, 1053.0], [45.4, 1053.0], [45.5, 1053.0], [45.6, 1053.0], [45.7, 1055.0], [45.8, 1055.0], [45.9, 1055.0], [46.0, 1055.0], [46.1, 1055.0], [46.2, 1057.0], [46.3, 1057.0], [46.4, 1057.0], [46.5, 1057.0], [46.6, 1057.0], [46.7, 1062.0], [46.8, 1062.0], [46.9, 1062.0], [47.0, 1062.0], [47.1, 1064.0], [47.2, 1064.0], [47.3, 1064.0], [47.4, 1064.0], [47.5, 1064.0], [47.6, 1066.0], [47.7, 1066.0], [47.8, 1066.0], [47.9, 1066.0], [48.0, 1066.0], [48.1, 1072.0], [48.2, 1072.0], [48.3, 1072.0], [48.4, 1072.0], [48.5, 1072.0], [48.6, 1076.0], [48.7, 1076.0], [48.8, 1076.0], [48.9, 1076.0], [49.0, 1076.0], [49.1, 1078.0], [49.2, 1078.0], [49.3, 1078.0], [49.4, 1078.0], [49.5, 1078.0], [49.6, 1080.0], [49.7, 1080.0], [49.8, 1080.0], [49.9, 1080.0], [50.0, 1080.0], [50.1, 1080.0], [50.2, 1080.0], [50.3, 1080.0], [50.4, 1080.0], [50.5, 1081.0], [50.6, 1081.0], [50.7, 1081.0], [50.8, 1081.0], [50.9, 1081.0], [51.0, 1084.0], [51.1, 1084.0], [51.2, 1084.0], [51.3, 1084.0], [51.4, 1084.0], [51.5, 1086.0], [51.6, 1086.0], [51.7, 1086.0], [51.8, 1086.0], [51.9, 1086.0], [52.0, 1086.0], [52.1, 1086.0], [52.2, 1086.0], [52.3, 1086.0], [52.4, 1086.0], [52.5, 1088.0], [52.6, 1088.0], [52.7, 1088.0], [52.8, 1088.0], [52.9, 1088.0], [53.0, 1090.0], [53.1, 1090.0], [53.2, 1090.0], [53.3, 1090.0], [53.4, 1092.0], [53.5, 1092.0], [53.6, 1092.0], [53.7, 1092.0], [53.8, 1092.0], [53.9, 1092.0], [54.0, 1092.0], [54.1, 1092.0], [54.2, 1092.0], [54.3, 1092.0], [54.4, 1092.0], [54.5, 1092.0], [54.6, 1092.0], [54.7, 1092.0], [54.8, 1092.0], [54.9, 1093.0], [55.0, 1093.0], [55.1, 1093.0], [55.2, 1093.0], [55.3, 1093.0], [55.4, 1096.0], [55.5, 1096.0], [55.6, 1096.0], [55.7, 1096.0], [55.8, 1096.0], [55.9, 1098.0], [56.0, 1098.0], [56.1, 1098.0], [56.2, 1098.0], [56.3, 1098.0], [56.4, 1099.0], [56.5, 1099.0], [56.6, 1099.0], [56.7, 1099.0], [56.8, 1105.0], [56.9, 1105.0], [57.0, 1105.0], [57.1, 1105.0], [57.2, 1105.0], [57.3, 1108.0], [57.4, 1108.0], [57.5, 1108.0], [57.6, 1108.0], [57.7, 1108.0], [57.8, 1112.0], [57.9, 1112.0], [58.0, 1112.0], [58.1, 1112.0], [58.2, 1112.0], [58.3, 1114.0], [58.4, 1114.0], [58.5, 1114.0], [58.6, 1114.0], [58.7, 1114.0], [58.8, 1114.0], [58.9, 1114.0], [59.0, 1114.0], [59.1, 1114.0], [59.2, 1114.0], [59.3, 1116.0], [59.4, 1116.0], [59.5, 1116.0], [59.6, 1116.0], [59.7, 1116.0], [59.8, 1121.0], [59.9, 1121.0], [60.0, 1121.0], [60.1, 1121.0], [60.2, 1122.0], [60.3, 1122.0], [60.4, 1122.0], [60.5, 1122.0], [60.6, 1122.0], [60.7, 1126.0], [60.8, 1126.0], [60.9, 1126.0], [61.0, 1126.0], [61.1, 1126.0], [61.2, 1131.0], [61.3, 1131.0], [61.4, 1131.0], [61.5, 1131.0], [61.6, 1131.0], [61.7, 1136.0], [61.8, 1136.0], [61.9, 1136.0], [62.0, 1136.0], [62.1, 1136.0], [62.2, 1141.0], [62.3, 1141.0], [62.4, 1141.0], [62.5, 1141.0], [62.6, 1141.0], [62.7, 1143.0], [62.8, 1143.0], [62.9, 1143.0], [63.0, 1143.0], [63.1, 1143.0], [63.2, 1153.0], [63.3, 1153.0], [63.4, 1153.0], [63.5, 1153.0], [63.6, 1154.0], [63.7, 1154.0], [63.8, 1154.0], [63.9, 1154.0], [64.0, 1154.0], [64.1, 1158.0], [64.2, 1158.0], [64.3, 1158.0], [64.4, 1158.0], [64.5, 1158.0], [64.6, 1159.0], [64.7, 1159.0], [64.8, 1159.0], [64.9, 1159.0], [65.0, 1159.0], [65.1, 1160.0], [65.2, 1160.0], [65.3, 1160.0], [65.4, 1160.0], [65.5, 1160.0], [65.6, 1165.0], [65.7, 1165.0], [65.8, 1165.0], [65.9, 1165.0], [66.0, 1165.0], [66.1, 1170.0], [66.2, 1170.0], [66.3, 1170.0], [66.4, 1170.0], [66.5, 1170.0], [66.6, 1181.0], [66.7, 1181.0], [66.8, 1181.0], [66.9, 1181.0], [67.0, 1181.0], [67.1, 1181.0], [67.2, 1181.0], [67.3, 1181.0], [67.4, 1181.0], [67.5, 1188.0], [67.6, 1188.0], [67.7, 1188.0], [67.8, 1188.0], [67.9, 1188.0], [68.0, 1193.0], [68.1, 1193.0], [68.2, 1193.0], [68.3, 1193.0], [68.4, 1193.0], [68.5, 1195.0], [68.6, 1195.0], [68.7, 1195.0], [68.8, 1195.0], [68.9, 1195.0], [69.0, 1200.0], [69.1, 1200.0], [69.2, 1200.0], [69.3, 1200.0], [69.4, 1200.0], [69.5, 1200.0], [69.6, 1200.0], [69.7, 1200.0], [69.8, 1200.0], [69.9, 1200.0], [70.0, 1201.0], [70.1, 1201.0], [70.2, 1201.0], [70.3, 1201.0], [70.4, 1203.0], [70.5, 1203.0], [70.6, 1203.0], [70.7, 1203.0], [70.8, 1203.0], [70.9, 1214.0], [71.0, 1214.0], [71.1, 1214.0], [71.2, 1214.0], [71.3, 1214.0], [71.4, 1222.0], [71.5, 1222.0], [71.6, 1222.0], [71.7, 1222.0], [71.8, 1222.0], [71.9, 1224.0], [72.0, 1224.0], [72.1, 1224.0], [72.2, 1224.0], [72.3, 1224.0], [72.4, 1228.0], [72.5, 1228.0], [72.6, 1228.0], [72.7, 1228.0], [72.8, 1228.0], [72.9, 1231.0], [73.0, 1231.0], [73.1, 1231.0], [73.2, 1231.0], [73.3, 1231.0], [73.4, 1240.0], [73.5, 1240.0], [73.6, 1240.0], [73.7, 1240.0], [73.8, 1242.0], [73.9, 1242.0], [74.0, 1242.0], [74.1, 1242.0], [74.2, 1242.0], [74.3, 1243.0], [74.4, 1243.0], [74.5, 1243.0], [74.6, 1243.0], [74.7, 1243.0], [74.8, 1244.0], [74.9, 1244.0], [75.0, 1244.0], [75.1, 1244.0], [75.2, 1244.0], [75.3, 1257.0], [75.4, 1257.0], [75.5, 1257.0], [75.6, 1257.0], [75.7, 1257.0], [75.8, 1266.0], [75.9, 1266.0], [76.0, 1266.0], [76.1, 1266.0], [76.2, 1266.0], [76.3, 1275.0], [76.4, 1275.0], [76.5, 1275.0], [76.6, 1275.0], [76.7, 1282.0], [76.8, 1282.0], [76.9, 1282.0], [77.0, 1282.0], [77.1, 1282.0], [77.2, 1297.0], [77.3, 1297.0], [77.4, 1297.0], [77.5, 1297.0], [77.6, 1297.0], [77.7, 1302.0], [77.8, 1302.0], [77.9, 1302.0], [78.0, 1302.0], [78.1, 1302.0], [78.2, 1324.0], [78.3, 1324.0], [78.4, 1324.0], [78.5, 1324.0], [78.6, 1324.0], [78.7, 1328.0], [78.8, 1328.0], [78.9, 1328.0], [79.0, 1328.0], [79.1, 1328.0], [79.2, 1332.0], [79.3, 1332.0], [79.4, 1332.0], [79.5, 1332.0], [79.6, 1332.0], [79.7, 1335.0], [79.8, 1335.0], [79.9, 1335.0], [80.0, 1335.0], [80.1, 1347.0], [80.2, 1347.0], [80.3, 1347.0], [80.4, 1347.0], [80.5, 1347.0], [80.6, 1347.0], [80.7, 1347.0], [80.8, 1347.0], [80.9, 1347.0], [81.0, 1347.0], [81.1, 1352.0], [81.2, 1352.0], [81.3, 1352.0], [81.4, 1352.0], [81.5, 1352.0], [81.6, 1371.0], [81.7, 1371.0], [81.8, 1371.0], [81.9, 1371.0], [82.0, 1371.0], [82.1, 1378.0], [82.2, 1378.0], [82.3, 1378.0], [82.4, 1378.0], [82.5, 1378.0], [82.6, 1392.0], [82.7, 1392.0], [82.8, 1392.0], [82.9, 1392.0], [83.0, 1392.0], [83.1, 1400.0], [83.2, 1400.0], [83.3, 1400.0], [83.4, 1400.0], [83.5, 1433.0], [83.6, 1433.0], [83.7, 1433.0], [83.8, 1433.0], [83.9, 1433.0], [84.0, 1443.0], [84.1, 1443.0], [84.2, 1443.0], [84.3, 1443.0], [84.4, 1443.0], [84.5, 1450.0], [84.6, 1450.0], [84.7, 1450.0], [84.8, 1450.0], [84.9, 1450.0], [85.0, 1452.0], [85.1, 1452.0], [85.2, 1452.0], [85.3, 1452.0], [85.4, 1452.0], [85.5, 1465.0], [85.6, 1465.0], [85.7, 1465.0], [85.8, 1465.0], [85.9, 1465.0], [86.0, 1471.0], [86.1, 1471.0], [86.2, 1471.0], [86.3, 1471.0], [86.4, 1471.0], [86.5, 1481.0], [86.6, 1481.0], [86.7, 1481.0], [86.8, 1481.0], [86.9, 1499.0], [87.0, 1499.0], [87.1, 1499.0], [87.2, 1499.0], [87.3, 1499.0], [87.4, 1581.0], [87.5, 1581.0], [87.6, 1581.0], [87.7, 1581.0], [87.8, 1581.0], [87.9, 1630.0], [88.0, 1630.0], [88.1, 1630.0], [88.2, 1630.0], [88.3, 1630.0], [88.4, 1679.0], [88.5, 1679.0], [88.6, 1679.0], [88.7, 1679.0], [88.8, 1679.0], [88.9, 1762.0], [89.0, 1762.0], [89.1, 1762.0], [89.2, 1762.0], [89.3, 1762.0], [89.4, 1778.0], [89.5, 1778.0], [89.6, 1778.0], [89.7, 1778.0], [89.8, 1778.0], [89.9, 1877.0], [90.0, 1877.0], [90.1, 1877.0], [90.2, 1877.0], [90.3, 1924.0], [90.4, 1924.0], [90.5, 1924.0], [90.6, 1924.0], [90.7, 1924.0], [90.8, 2108.0], [90.9, 2108.0], [91.0, 2108.0], [91.1, 2108.0], [91.2, 2108.0], [91.3, 2408.0], [91.4, 2408.0], [91.5, 2408.0], [91.6, 2408.0], [91.7, 2408.0], [91.8, 2416.0], [91.9, 2416.0], [92.0, 2416.0], [92.1, 2416.0], [92.2, 2416.0], [92.3, 2466.0], [92.4, 2466.0], [92.5, 2466.0], [92.6, 2466.0], [92.7, 2466.0], [92.8, 2532.0], [92.9, 2532.0], [93.0, 2532.0], [93.1, 2532.0], [93.2, 2532.0], [93.3, 2556.0], [93.4, 2556.0], [93.5, 2556.0], [93.6, 2556.0], [93.7, 2600.0], [93.8, 2600.0], [93.9, 2600.0], [94.0, 2600.0], [94.1, 2600.0], [94.2, 3270.0], [94.3, 3270.0], [94.4, 3270.0], [94.5, 3270.0], [94.6, 3270.0], [94.7, 3528.0], [94.8, 3528.0], [94.9, 3528.0], [95.0, 3528.0], [95.1, 3528.0], [95.2, 4351.0], [95.3, 4351.0], [95.4, 4351.0], [95.5, 4351.0], [95.6, 4351.0], [95.7, 4378.0], [95.8, 4378.0], [95.9, 4378.0], [96.0, 4378.0], [96.1, 4378.0], [96.2, 4852.0], [96.3, 4852.0], [96.4, 4852.0], [96.5, 4852.0], [96.6, 4852.0], [96.7, 5008.0], [96.8, 5008.0], [96.9, 5008.0], [97.0, 5008.0], [97.1, 5671.0], [97.2, 5671.0], [97.3, 5671.0], [97.4, 5671.0], [97.5, 5671.0], [97.6, 7391.0], [97.7, 7391.0], [97.8, 7391.0], [97.9, 7391.0], [98.0, 7391.0], [98.1, 8133.0], [98.2, 8133.0], [98.3, 8133.0], [98.4, 8133.0], [98.5, 8133.0], [98.6, 8261.0], [98.7, 8261.0], [98.8, 8261.0], [98.9, 8261.0], [99.0, 8261.0], [99.1, 8262.0], [99.2, 8262.0], [99.3, 8262.0], [99.4, 8262.0], [99.5, 8262.0], [99.6, 8263.0], [99.7, 8263.0], [99.8, 8263.0], [99.9, 8263.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 93.0, "series": [{"data": [[2100.0, 2.0], [2300.0, 3.0], [2200.0, 3.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 1.0], [2900.0, 1.0], [3200.0, 1.0], [4300.0, 2.0], [4400.0, 1.0], [1500.0, 48.0], [1600.0, 74.0], [1700.0, 43.0], [1800.0, 13.0], [1900.0, 15.0], [2000.0, 9.0]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[2100.0, 1.0], [2200.0, 1.0], [2300.0, 1.0], [600.0, 93.0], [2500.0, 1.0], [2600.0, 1.0], [700.0, 72.0], [3100.0, 1.0], [800.0, 17.0], [3500.0, 1.0], [3700.0, 1.0], [3800.0, 1.0], [1000.0, 5.0], [1100.0, 1.0], [4600.0, 2.0], [4700.0, 1.0], [5500.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [1900.0, 1.0], [500.0, 4.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[8200.0, 3.0], [800.0, 1.0], [900.0, 55.0], [1000.0, 61.0], [1100.0, 25.0], [1200.0, 18.0], [1300.0, 11.0], [1400.0, 9.0], [1500.0, 1.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 1.0], [1900.0, 1.0], [2100.0, 1.0], [2400.0, 3.0], [2500.0, 2.0], [2600.0, 1.0], [3200.0, 1.0], [3500.0, 1.0], [4300.0, 2.0], [4800.0, 1.0], [5000.0, 1.0], [5600.0, 1.0], [7300.0, 1.0], [8100.0, 1.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 261.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 372.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 372.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 261.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.421052631578947, "minX": 1.70618346E12, "maxY": 13.990366088631987, "series": [{"data": [[1.70618346E12, 11.421052631578947], [1.70618352E12, 13.990366088631987]], "isOverall": false, "label": "15 users sequential", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618352E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 632.75, "minX": 1.0, "maxY": 2573.6666666666665, "series": [{"data": [[8.0, 1596.5714285714287], [2.0, 1829.0], [9.0, 1614.0], [10.0, 1736.7142857142856], [11.0, 2573.6666666666665], [3.0, 1743.3333333333333], [12.0, 1901.2], [13.0, 1735.0], [14.0, 1595.4285714285713], [15.0, 1786.192307692308], [4.0, 1605.5], [1.0, 1587.0], [5.0, 1581.6666666666667], [6.0, 1684.75], [7.0, 1629.5]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[13.32420091324201, 1792.2054794520548]], "isOverall": false, "label": "getUserSpecificPermissions-Aggregated", "isController": false}, {"data": [[8.0, 632.75], [9.0, 698.5], [10.0, 688.1666666666666], [11.0, 665.4444444444443], [3.0, 644.0], [12.0, 782.3333333333334], [13.0, 661.8571428571428], [14.0, 669.0], [15.0, 1056.2903225806454], [4.0, 669.75], [5.0, 654.0], [6.0, 676.75], [7.0, 701.6]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[13.615384615384613, 960.0240384615383]], "isOverall": false, "label": "getUserOrganisationList-Aggregated", "isController": false}, {"data": [[8.0, 963.0], [9.0, 1030.8], [10.0, 1020.8571428571428], [11.0, 1148.5], [12.0, 1312.0], [3.0, 1116.5], [13.0, 2186.0], [14.0, 997.6666666666666], [15.0, 1480.2987012987023], [4.0, 990.0], [5.0, 959.0], [6.0, 969.2], [7.0, 973.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}, {"data": [[13.655339805825236, 1441.6019417475727]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 15.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2880.6666666666665, "minX": 1.70618346E12, "maxY": 27698.65, "series": [{"data": [[1.70618346E12, 2880.6666666666665], [1.70618352E12, 12889.616666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70618346E12, 6072.9], [1.70618352E12, 27698.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618352E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 724.0769230769231, "minX": 1.70618346E12, "maxY": 1813.4632768361578, "series": [{"data": [[1.70618346E12, 1702.6190476190473], [1.70618352E12, 1813.4632768361578]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618346E12, 724.0769230769231], [1.70618352E12, 1014.4733727810649]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618346E12, 1047.0606060606062], [1.70618352E12, 1516.8612716763007]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618352E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 723.9999999999999, "minX": 1.70618346E12, "maxY": 1813.4180790960454, "series": [{"data": [[1.70618346E12, 1702.5714285714284], [1.70618352E12, 1813.4180790960454]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618346E12, 723.9999999999999], [1.70618352E12, 1014.4378698224849]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618346E12, 1047.0303030303032], [1.70618352E12, 1516.820809248555]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618352E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70618346E12, "maxY": 601.6666666666666, "series": [{"data": [[1.70618346E12, 601.6666666666666], [1.70618352E12, 598.6271186440678]], "isOverall": false, "label": "getUserSpecificPermissions", "isController": false}, {"data": [[1.70618346E12, 0.0], [1.70618352E12, 0.0]], "isOverall": false, "label": "getUserOrganisationList", "isController": false}, {"data": [[1.70618346E12, 0.0], [1.70618352E12, 0.0]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618352E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 577.0, "minX": 1.70618346E12, "maxY": 8263.0, "series": [{"data": [[1.70618346E12, 2079.0], [1.70618352E12, 8263.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70618346E12, 1772.5], [1.70618352E12, 2091.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70618346E12, 2069.7], [1.70618352E12, 7373.599999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70618346E12, 1905.25], [1.70618352E12, 3178.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.70618346E12, 583.0], [1.70618352E12, 577.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70618346E12, 1016.5], [1.70618352E12, 1165.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618352E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1025.0, "minX": 1.0, "maxY": 4371.5, "series": [{"data": [[8.0, 1266.0], [2.0, 3122.0], [9.0, 1158.5], [10.0, 1058.5], [11.0, 1029.5], [3.0, 1025.0], [12.0, 1287.5], [13.0, 1027.0], [14.0, 1214.0], [15.0, 1092.0], [4.0, 1751.0], [16.0, 1076.0], [1.0, 4371.5], [5.0, 1284.0], [6.0, 1724.5], [7.0, 1112.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1025.0, "minX": 1.0, "maxY": 4371.5, "series": [{"data": [[8.0, 1266.0], [2.0, 3122.0], [9.0, 1158.5], [10.0, 1058.5], [11.0, 1029.5], [3.0, 1025.0], [12.0, 1287.5], [13.0, 1027.0], [14.0, 1213.5], [15.0, 1092.0], [4.0, 1751.0], [16.0, 1076.0], [1.0, 4371.5], [5.0, 1284.0], [6.0, 1724.5], [7.0, 1112.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 16.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.15, "minX": 1.70618346E12, "maxY": 8.4, "series": [{"data": [[1.70618346E12, 2.15], [1.70618352E12, 8.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618352E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.70618346E12, "maxY": 8.65, "series": [{"data": [[1.70618346E12, 1.9], [1.70618352E12, 8.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70618352E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.55, "minX": 1.70618346E12, "maxY": 2.95, "series": [{"data": [[1.70618346E12, 0.55], [1.70618352E12, 2.8833333333333333]], "isOverall": false, "label": "CAM Specific getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618346E12, 0.7], [1.70618352E12, 2.95]], "isOverall": false, "label": "getUserSpecificPermissions-success", "isController": false}, {"data": [[1.70618346E12, 0.65], [1.70618352E12, 2.816666666666667]], "isOverall": false, "label": "getUserOrganisationList-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618352E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.70618346E12, "maxY": 8.65, "series": [{"data": [[1.70618346E12, 1.9], [1.70618352E12, 8.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70618352E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

